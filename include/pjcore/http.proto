// JSON [de]serialization for protobuf + embedded HTTP server and client in C++.
// Copyright (C) 2014 http://protojson.com/
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

package pjcore;

import "pjcore/error.proto";

enum HttpParserType {
  HTTP_PARSER_REQUEST = 0;
  HTTP_PARSER_RESPONSE = 1;
  HTTP_PARSER_BOTH = 2;
}

message UrlParameter {
  optional string name = 1;
  optional string value = 2;
}

message ParsedUrl {
  optional string scheme = 1;
  optional string userinfo = 2;
  optional string host = 3;
  optional int32 port = 4;
  optional string path = 5;
  optional string query = 6;
  optional string fragment = 7;
  repeated UrlParameter parameters = 8;
}

message NodeAndServiceName {
  optional string node_name = 1;
  optional string service_name = 2;
}

message HttpVersion {
  optional int32 major = 1;
  optional int32 minor = 2;
}

message HttpHeader {
  optional string name = 1;
  optional string value = 2;
}

message HttpRequest {
  optional int32 method = 1;
  optional string url = 2;
  optional ParsedUrl parsed_url = 3;
  optional HttpVersion http_version = 4;
  repeated HttpHeader headers = 5;
  optional bytes content = 6;
  optional bool should_keep_alive = 7;
}

message HttpResponse {
  optional HttpVersion http_version = 1;
  optional HttpStatusCode status_code = 2;
  repeated HttpHeader headers = 3;
  optional bytes content = 4;
  optional bool should_keep_alive = 5;
}

enum HttpServerTransactionState {
  HTTP_SERVER_TRANSACTION_READ = 0;
  HTTP_SERVER_TRANSACTION_READ_COMPLETE = 1;
  HTTP_SERVER_TRANSACTION_WAIT_WRITE = 2;
  HTTP_SERVER_TRANSACTION_WRITE = 3;
}

message HttpServerConfig {
  optional int32 port = 1;
  optional int32 backlog = 2;
}

message HttpClientConfig {
}
