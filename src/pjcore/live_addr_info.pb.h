// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pjcore/live_addr_info.proto

#ifndef PROTOBUF_pjcore_2flive_5faddr_5finfo_2eproto__INCLUDED
#define PROTOBUF_pjcore_2flive_5faddr_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pjcore {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pjcore_2flive_5faddr_5finfo_2eproto();
void protobuf_AssignDesc_pjcore_2flive_5faddr_5finfo_2eproto();
void protobuf_ShutdownFile_pjcore_2flive_5faddr_5finfo_2eproto();

class LiveAddrInfo;

enum LiveAddrInfo_FamilyType {
  LiveAddrInfo_FamilyType_FAMILY_INET = 2,
  LiveAddrInfo_FamilyType_FAMILY_INET6 = 10
};
bool LiveAddrInfo_FamilyType_IsValid(int value);
const LiveAddrInfo_FamilyType LiveAddrInfo_FamilyType_FamilyType_MIN = LiveAddrInfo_FamilyType_FAMILY_INET;
const LiveAddrInfo_FamilyType LiveAddrInfo_FamilyType_FamilyType_MAX = LiveAddrInfo_FamilyType_FAMILY_INET6;
const int LiveAddrInfo_FamilyType_FamilyType_ARRAYSIZE = LiveAddrInfo_FamilyType_FamilyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LiveAddrInfo_FamilyType_descriptor();
inline const ::std::string& LiveAddrInfo_FamilyType_Name(LiveAddrInfo_FamilyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LiveAddrInfo_FamilyType_descriptor(), value);
}
inline bool LiveAddrInfo_FamilyType_Parse(
    const ::std::string& name, LiveAddrInfo_FamilyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LiveAddrInfo_FamilyType>(
    LiveAddrInfo_FamilyType_descriptor(), name, value);
}
enum LiveAddrInfo_ProtocolType {
  LiveAddrInfo_ProtocolType_PROTOCOL_TCP = 6,
  LiveAddrInfo_ProtocolType_PROTOCOL_UDP = 17
};
bool LiveAddrInfo_ProtocolType_IsValid(int value);
const LiveAddrInfo_ProtocolType LiveAddrInfo_ProtocolType_ProtocolType_MIN = LiveAddrInfo_ProtocolType_PROTOCOL_TCP;
const LiveAddrInfo_ProtocolType LiveAddrInfo_ProtocolType_ProtocolType_MAX = LiveAddrInfo_ProtocolType_PROTOCOL_UDP;
const int LiveAddrInfo_ProtocolType_ProtocolType_ARRAYSIZE = LiveAddrInfo_ProtocolType_ProtocolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LiveAddrInfo_ProtocolType_descriptor();
inline const ::std::string& LiveAddrInfo_ProtocolType_Name(LiveAddrInfo_ProtocolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LiveAddrInfo_ProtocolType_descriptor(), value);
}
inline bool LiveAddrInfo_ProtocolType_Parse(
    const ::std::string& name, LiveAddrInfo_ProtocolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LiveAddrInfo_ProtocolType>(
    LiveAddrInfo_ProtocolType_descriptor(), name, value);
}
enum LiveAddrInfo_SocketType {
  LiveAddrInfo_SocketType_SOCKET_STREAM = 1,
  LiveAddrInfo_SocketType_SOCKET_DGRAM = 2,
  LiveAddrInfo_SocketType_SOCKET_RAW = 3
};
bool LiveAddrInfo_SocketType_IsValid(int value);
const LiveAddrInfo_SocketType LiveAddrInfo_SocketType_SocketType_MIN = LiveAddrInfo_SocketType_SOCKET_STREAM;
const LiveAddrInfo_SocketType LiveAddrInfo_SocketType_SocketType_MAX = LiveAddrInfo_SocketType_SOCKET_RAW;
const int LiveAddrInfo_SocketType_SocketType_ARRAYSIZE = LiveAddrInfo_SocketType_SocketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LiveAddrInfo_SocketType_descriptor();
inline const ::std::string& LiveAddrInfo_SocketType_Name(LiveAddrInfo_SocketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LiveAddrInfo_SocketType_descriptor(), value);
}
inline bool LiveAddrInfo_SocketType_Parse(
    const ::std::string& name, LiveAddrInfo_SocketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LiveAddrInfo_SocketType>(
    LiveAddrInfo_SocketType_descriptor(), name, value);
}
// ===================================================================

class LiveAddrInfo : public ::google::protobuf::Message {
 public:
  LiveAddrInfo();
  virtual ~LiveAddrInfo();

  LiveAddrInfo(const LiveAddrInfo& from);

  inline LiveAddrInfo& operator=(const LiveAddrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveAddrInfo& default_instance();

  void Swap(LiveAddrInfo* other);

  // implements Message ----------------------------------------------

  inline LiveAddrInfo* New() const { return New(NULL); }

  LiveAddrInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveAddrInfo& from);
  void MergeFrom(const LiveAddrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveAddrInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LiveAddrInfo_FamilyType FamilyType;
  static const FamilyType FAMILY_INET = LiveAddrInfo_FamilyType_FAMILY_INET;
  static const FamilyType FAMILY_INET6 = LiveAddrInfo_FamilyType_FAMILY_INET6;
  static inline bool FamilyType_IsValid(int value) {
    return LiveAddrInfo_FamilyType_IsValid(value);
  }
  static const FamilyType FamilyType_MIN =
    LiveAddrInfo_FamilyType_FamilyType_MIN;
  static const FamilyType FamilyType_MAX =
    LiveAddrInfo_FamilyType_FamilyType_MAX;
  static const int FamilyType_ARRAYSIZE =
    LiveAddrInfo_FamilyType_FamilyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FamilyType_descriptor() {
    return LiveAddrInfo_FamilyType_descriptor();
  }
  static inline const ::std::string& FamilyType_Name(FamilyType value) {
    return LiveAddrInfo_FamilyType_Name(value);
  }
  static inline bool FamilyType_Parse(const ::std::string& name,
      FamilyType* value) {
    return LiveAddrInfo_FamilyType_Parse(name, value);
  }

  typedef LiveAddrInfo_ProtocolType ProtocolType;
  static const ProtocolType PROTOCOL_TCP = LiveAddrInfo_ProtocolType_PROTOCOL_TCP;
  static const ProtocolType PROTOCOL_UDP = LiveAddrInfo_ProtocolType_PROTOCOL_UDP;
  static inline bool ProtocolType_IsValid(int value) {
    return LiveAddrInfo_ProtocolType_IsValid(value);
  }
  static const ProtocolType ProtocolType_MIN =
    LiveAddrInfo_ProtocolType_ProtocolType_MIN;
  static const ProtocolType ProtocolType_MAX =
    LiveAddrInfo_ProtocolType_ProtocolType_MAX;
  static const int ProtocolType_ARRAYSIZE =
    LiveAddrInfo_ProtocolType_ProtocolType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtocolType_descriptor() {
    return LiveAddrInfo_ProtocolType_descriptor();
  }
  static inline const ::std::string& ProtocolType_Name(ProtocolType value) {
    return LiveAddrInfo_ProtocolType_Name(value);
  }
  static inline bool ProtocolType_Parse(const ::std::string& name,
      ProtocolType* value) {
    return LiveAddrInfo_ProtocolType_Parse(name, value);
  }

  typedef LiveAddrInfo_SocketType SocketType;
  static const SocketType SOCKET_STREAM = LiveAddrInfo_SocketType_SOCKET_STREAM;
  static const SocketType SOCKET_DGRAM = LiveAddrInfo_SocketType_SOCKET_DGRAM;
  static const SocketType SOCKET_RAW = LiveAddrInfo_SocketType_SOCKET_RAW;
  static inline bool SocketType_IsValid(int value) {
    return LiveAddrInfo_SocketType_IsValid(value);
  }
  static const SocketType SocketType_MIN =
    LiveAddrInfo_SocketType_SocketType_MIN;
  static const SocketType SocketType_MAX =
    LiveAddrInfo_SocketType_SocketType_MAX;
  static const int SocketType_ARRAYSIZE =
    LiveAddrInfo_SocketType_SocketType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SocketType_descriptor() {
    return LiveAddrInfo_SocketType_descriptor();
  }
  static inline const ::std::string& SocketType_Name(SocketType value) {
    return LiveAddrInfo_SocketType_Name(value);
  }
  static inline bool SocketType_Parse(const ::std::string& name,
      SocketType* value) {
    return LiveAddrInfo_SocketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // optional int32 flags = 2;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 2;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // optional bool flag_passive = 3;
  inline bool has_flag_passive() const;
  inline void clear_flag_passive();
  static const int kFlagPassiveFieldNumber = 3;
  inline bool flag_passive() const;
  inline void set_flag_passive(bool value);

  // optional bool flag_canonname = 4;
  inline bool has_flag_canonname() const;
  inline void clear_flag_canonname();
  static const int kFlagCanonnameFieldNumber = 4;
  inline bool flag_canonname() const;
  inline void set_flag_canonname(bool value);

  // optional bool flag_numerichost = 5;
  inline bool has_flag_numerichost() const;
  inline void clear_flag_numerichost();
  static const int kFlagNumerichostFieldNumber = 5;
  inline bool flag_numerichost() const;
  inline void set_flag_numerichost(bool value);

  // optional bool flag_numericserv = 6;
  inline bool has_flag_numericserv() const;
  inline void clear_flag_numericserv();
  static const int kFlagNumericservFieldNumber = 6;
  inline bool flag_numericserv() const;
  inline void set_flag_numericserv(bool value);

  // optional bool flag_all = 7;
  inline bool has_flag_all() const;
  inline void clear_flag_all();
  static const int kFlagAllFieldNumber = 7;
  inline bool flag_all() const;
  inline void set_flag_all(bool value);

  // optional bool flag_addrconfig = 8;
  inline bool has_flag_addrconfig() const;
  inline void clear_flag_addrconfig();
  static const int kFlagAddrconfigFieldNumber = 8;
  inline bool flag_addrconfig() const;
  inline void set_flag_addrconfig(bool value);

  // optional bool flag_v4mapped = 9;
  inline bool has_flag_v4mapped() const;
  inline void clear_flag_v4mapped();
  static const int kFlagV4MappedFieldNumber = 9;
  inline bool flag_v4mapped() const;
  inline void set_flag_v4mapped(bool value);

  // optional .pjcore.LiveAddrInfo.FamilyType family = 10;
  inline bool has_family() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 10;
  inline ::pjcore::LiveAddrInfo_FamilyType family() const;
  inline void set_family(::pjcore::LiveAddrInfo_FamilyType value);

  // optional .pjcore.LiveAddrInfo.SocketType socket = 11;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 11;
  inline ::pjcore::LiveAddrInfo_SocketType socket() const;
  inline void set_socket(::pjcore::LiveAddrInfo_SocketType value);

  // optional .pjcore.LiveAddrInfo.ProtocolType protocol = 12;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 12;
  inline ::pjcore::LiveAddrInfo_ProtocolType protocol() const;
  inline void set_protocol(::pjcore::LiveAddrInfo_ProtocolType value);

  // optional string addr = 13;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 13;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // optional int32 port = 14;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 14;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional uint32 flowinfo = 15;
  inline bool has_flowinfo() const;
  inline void clear_flowinfo();
  static const int kFlowinfoFieldNumber = 15;
  inline ::google::protobuf::uint32 flowinfo() const;
  inline void set_flowinfo(::google::protobuf::uint32 value);

  // optional string canonname = 16;
  inline bool has_canonname() const;
  inline void clear_canonname();
  static const int kCanonnameFieldNumber = 16;
  inline const ::std::string& canonname() const;
  inline void set_canonname(const ::std::string& value);
  inline void set_canonname(const char* value);
  inline void set_canonname(const char* value, size_t size);
  inline ::std::string* mutable_canonname();
  inline ::std::string* release_canonname();
  inline void set_allocated_canonname(::std::string* canonname);

  // @@protoc_insertion_point(class_scope:pjcore.LiveAddrInfo)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_flag_passive();
  inline void clear_has_flag_passive();
  inline void set_has_flag_canonname();
  inline void clear_has_flag_canonname();
  inline void set_has_flag_numerichost();
  inline void clear_has_flag_numerichost();
  inline void set_has_flag_numericserv();
  inline void clear_has_flag_numericserv();
  inline void set_has_flag_all();
  inline void clear_has_flag_all();
  inline void set_has_flag_addrconfig();
  inline void clear_has_flag_addrconfig();
  inline void set_has_flag_v4mapped();
  inline void clear_has_flag_v4mapped();
  inline void set_has_family();
  inline void clear_has_family();
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_flowinfo();
  inline void clear_has_flowinfo();
  inline void set_has_canonname();
  inline void clear_has_canonname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::int32 flags_;
  bool flag_passive_;
  bool flag_canonname_;
  bool flag_numerichost_;
  bool flag_numericserv_;
  bool flag_all_;
  bool flag_addrconfig_;
  bool flag_v4mapped_;
  int family_;
  int socket_;
  int protocol_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint32 flowinfo_;
  ::google::protobuf::internal::ArenaStringPtr canonname_;
  friend void  protobuf_AddDesc_pjcore_2flive_5faddr_5finfo_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5faddr_5finfo_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5faddr_5finfo_2eproto();

  void InitAsDefaultInstance();
  static LiveAddrInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// LiveAddrInfo

// optional uint64 ptr = 1;
inline bool LiveAddrInfo::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveAddrInfo::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveAddrInfo::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveAddrInfo::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 LiveAddrInfo::ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.ptr)
  return ptr_;
}
inline void LiveAddrInfo::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.ptr)
}

// optional int32 flags = 2;
inline bool LiveAddrInfo::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveAddrInfo::set_has_flags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveAddrInfo::clear_has_flags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveAddrInfo::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 LiveAddrInfo::flags() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flags)
  return flags_;
}
inline void LiveAddrInfo::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flags)
}

// optional bool flag_passive = 3;
inline bool LiveAddrInfo::has_flag_passive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveAddrInfo::set_has_flag_passive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveAddrInfo::clear_has_flag_passive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveAddrInfo::clear_flag_passive() {
  flag_passive_ = false;
  clear_has_flag_passive();
}
inline bool LiveAddrInfo::flag_passive() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_passive)
  return flag_passive_;
}
inline void LiveAddrInfo::set_flag_passive(bool value) {
  set_has_flag_passive();
  flag_passive_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_passive)
}

// optional bool flag_canonname = 4;
inline bool LiveAddrInfo::has_flag_canonname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiveAddrInfo::set_has_flag_canonname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LiveAddrInfo::clear_has_flag_canonname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LiveAddrInfo::clear_flag_canonname() {
  flag_canonname_ = false;
  clear_has_flag_canonname();
}
inline bool LiveAddrInfo::flag_canonname() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_canonname)
  return flag_canonname_;
}
inline void LiveAddrInfo::set_flag_canonname(bool value) {
  set_has_flag_canonname();
  flag_canonname_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_canonname)
}

// optional bool flag_numerichost = 5;
inline bool LiveAddrInfo::has_flag_numerichost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LiveAddrInfo::set_has_flag_numerichost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LiveAddrInfo::clear_has_flag_numerichost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LiveAddrInfo::clear_flag_numerichost() {
  flag_numerichost_ = false;
  clear_has_flag_numerichost();
}
inline bool LiveAddrInfo::flag_numerichost() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_numerichost)
  return flag_numerichost_;
}
inline void LiveAddrInfo::set_flag_numerichost(bool value) {
  set_has_flag_numerichost();
  flag_numerichost_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_numerichost)
}

// optional bool flag_numericserv = 6;
inline bool LiveAddrInfo::has_flag_numericserv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LiveAddrInfo::set_has_flag_numericserv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LiveAddrInfo::clear_has_flag_numericserv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LiveAddrInfo::clear_flag_numericserv() {
  flag_numericserv_ = false;
  clear_has_flag_numericserv();
}
inline bool LiveAddrInfo::flag_numericserv() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_numericserv)
  return flag_numericserv_;
}
inline void LiveAddrInfo::set_flag_numericserv(bool value) {
  set_has_flag_numericserv();
  flag_numericserv_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_numericserv)
}

// optional bool flag_all = 7;
inline bool LiveAddrInfo::has_flag_all() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LiveAddrInfo::set_has_flag_all() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LiveAddrInfo::clear_has_flag_all() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LiveAddrInfo::clear_flag_all() {
  flag_all_ = false;
  clear_has_flag_all();
}
inline bool LiveAddrInfo::flag_all() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_all)
  return flag_all_;
}
inline void LiveAddrInfo::set_flag_all(bool value) {
  set_has_flag_all();
  flag_all_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_all)
}

// optional bool flag_addrconfig = 8;
inline bool LiveAddrInfo::has_flag_addrconfig() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LiveAddrInfo::set_has_flag_addrconfig() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LiveAddrInfo::clear_has_flag_addrconfig() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LiveAddrInfo::clear_flag_addrconfig() {
  flag_addrconfig_ = false;
  clear_has_flag_addrconfig();
}
inline bool LiveAddrInfo::flag_addrconfig() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_addrconfig)
  return flag_addrconfig_;
}
inline void LiveAddrInfo::set_flag_addrconfig(bool value) {
  set_has_flag_addrconfig();
  flag_addrconfig_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_addrconfig)
}

// optional bool flag_v4mapped = 9;
inline bool LiveAddrInfo::has_flag_v4mapped() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LiveAddrInfo::set_has_flag_v4mapped() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LiveAddrInfo::clear_has_flag_v4mapped() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LiveAddrInfo::clear_flag_v4mapped() {
  flag_v4mapped_ = false;
  clear_has_flag_v4mapped();
}
inline bool LiveAddrInfo::flag_v4mapped() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flag_v4mapped)
  return flag_v4mapped_;
}
inline void LiveAddrInfo::set_flag_v4mapped(bool value) {
  set_has_flag_v4mapped();
  flag_v4mapped_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flag_v4mapped)
}

// optional .pjcore.LiveAddrInfo.FamilyType family = 10;
inline bool LiveAddrInfo::has_family() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LiveAddrInfo::set_has_family() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LiveAddrInfo::clear_has_family() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LiveAddrInfo::clear_family() {
  family_ = 2;
  clear_has_family();
}
inline ::pjcore::LiveAddrInfo_FamilyType LiveAddrInfo::family() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.family)
  return static_cast< ::pjcore::LiveAddrInfo_FamilyType >(family_);
}
inline void LiveAddrInfo::set_family(::pjcore::LiveAddrInfo_FamilyType value) {
  assert(::pjcore::LiveAddrInfo_FamilyType_IsValid(value));
  set_has_family();
  family_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.family)
}

// optional .pjcore.LiveAddrInfo.SocketType socket = 11;
inline bool LiveAddrInfo::has_socket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LiveAddrInfo::set_has_socket() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LiveAddrInfo::clear_has_socket() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LiveAddrInfo::clear_socket() {
  socket_ = 1;
  clear_has_socket();
}
inline ::pjcore::LiveAddrInfo_SocketType LiveAddrInfo::socket() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.socket)
  return static_cast< ::pjcore::LiveAddrInfo_SocketType >(socket_);
}
inline void LiveAddrInfo::set_socket(::pjcore::LiveAddrInfo_SocketType value) {
  assert(::pjcore::LiveAddrInfo_SocketType_IsValid(value));
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.socket)
}

// optional .pjcore.LiveAddrInfo.ProtocolType protocol = 12;
inline bool LiveAddrInfo::has_protocol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LiveAddrInfo::set_has_protocol() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LiveAddrInfo::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LiveAddrInfo::clear_protocol() {
  protocol_ = 6;
  clear_has_protocol();
}
inline ::pjcore::LiveAddrInfo_ProtocolType LiveAddrInfo::protocol() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.protocol)
  return static_cast< ::pjcore::LiveAddrInfo_ProtocolType >(protocol_);
}
inline void LiveAddrInfo::set_protocol(::pjcore::LiveAddrInfo_ProtocolType value) {
  assert(::pjcore::LiveAddrInfo_ProtocolType_IsValid(value));
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.protocol)
}

// optional string addr = 13;
inline bool LiveAddrInfo::has_addr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LiveAddrInfo::set_has_addr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LiveAddrInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LiveAddrInfo::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
inline const ::std::string& LiveAddrInfo::addr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveAddrInfo::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.addr)
}
inline void LiveAddrInfo::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pjcore.LiveAddrInfo.addr)
}
inline void LiveAddrInfo::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pjcore.LiveAddrInfo.addr)
}
inline ::std::string* LiveAddrInfo::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:pjcore.LiveAddrInfo.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveAddrInfo::release_addr() {
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveAddrInfo::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:pjcore.LiveAddrInfo.addr)
}

// optional int32 port = 14;
inline bool LiveAddrInfo::has_port() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LiveAddrInfo::set_has_port() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LiveAddrInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LiveAddrInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 LiveAddrInfo::port() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.port)
  return port_;
}
inline void LiveAddrInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.port)
}

// optional uint32 flowinfo = 15;
inline bool LiveAddrInfo::has_flowinfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LiveAddrInfo::set_has_flowinfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LiveAddrInfo::clear_has_flowinfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LiveAddrInfo::clear_flowinfo() {
  flowinfo_ = 0u;
  clear_has_flowinfo();
}
inline ::google::protobuf::uint32 LiveAddrInfo::flowinfo() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.flowinfo)
  return flowinfo_;
}
inline void LiveAddrInfo::set_flowinfo(::google::protobuf::uint32 value) {
  set_has_flowinfo();
  flowinfo_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.flowinfo)
}

// optional string canonname = 16;
inline bool LiveAddrInfo::has_canonname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LiveAddrInfo::set_has_canonname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LiveAddrInfo::clear_has_canonname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LiveAddrInfo::clear_canonname() {
  canonname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_canonname();
}
inline const ::std::string& LiveAddrInfo::canonname() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveAddrInfo.canonname)
  return canonname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveAddrInfo::set_canonname(const ::std::string& value) {
  set_has_canonname();
  canonname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pjcore.LiveAddrInfo.canonname)
}
inline void LiveAddrInfo::set_canonname(const char* value) {
  set_has_canonname();
  canonname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pjcore.LiveAddrInfo.canonname)
}
inline void LiveAddrInfo::set_canonname(const char* value, size_t size) {
  set_has_canonname();
  canonname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pjcore.LiveAddrInfo.canonname)
}
inline ::std::string* LiveAddrInfo::mutable_canonname() {
  set_has_canonname();
  // @@protoc_insertion_point(field_mutable:pjcore.LiveAddrInfo.canonname)
  return canonname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveAddrInfo::release_canonname() {
  clear_has_canonname();
  return canonname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveAddrInfo::set_allocated_canonname(::std::string* canonname) {
  if (canonname != NULL) {
    set_has_canonname();
  } else {
    clear_has_canonname();
  }
  canonname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonname);
  // @@protoc_insertion_point(field_set_allocated:pjcore.LiveAddrInfo.canonname)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pjcore

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pjcore::LiveAddrInfo_FamilyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pjcore::LiveAddrInfo_FamilyType>() {
  return ::pjcore::LiveAddrInfo_FamilyType_descriptor();
}
template <> struct is_proto_enum< ::pjcore::LiveAddrInfo_ProtocolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pjcore::LiveAddrInfo_ProtocolType>() {
  return ::pjcore::LiveAddrInfo_ProtocolType_descriptor();
}
template <> struct is_proto_enum< ::pjcore::LiveAddrInfo_SocketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pjcore::LiveAddrInfo_SocketType>() {
  return ::pjcore::LiveAddrInfo_SocketType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pjcore_2flive_5faddr_5finfo_2eproto__INCLUDED
