// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pjcore/live_uv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pjcore/live_uv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pjcore {

namespace {

const ::google::protobuf::Descriptor* LiveUvBuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvBuf_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveUvHandle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvHandle_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveUvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveUvLoop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvLoop_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveIdleLogger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveIdleLogger_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveUvLoopFuture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvLoopFuture_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveUvLoopAsyncClosureContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvLoopAsyncClosureContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveUvLoopAsyncCallbackContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveUvLoopAsyncCallbackContext_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto() {
  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pjcore/live_uv.proto");
  GOOGLE_CHECK(file != NULL);
  LiveUvBuf_descriptor_ = file->message_type(0);
  static const int LiveUvBuf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvBuf, base_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvBuf, len_),
  };
  LiveUvBuf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvBuf_descriptor_,
      LiveUvBuf::default_instance_,
      LiveUvBuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvBuf, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvBuf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvBuf, _internal_metadata_));
  LiveUvHandle_descriptor_ = file->message_type(1);
  static const int LiveUvHandle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, type_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, close_cb_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, data_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, flag_internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, flag_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, flag_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, flag_closing_),
  };
  LiveUvHandle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvHandle_descriptor_,
      LiveUvHandle::default_instance_,
      LiveUvHandle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvHandle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvHandle, _internal_metadata_));
  LiveUvReq_descriptor_ = file->message_type(2);
  static const int LiveUvReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvReq, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvReq, type_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvReq, data_ptr_),
  };
  LiveUvReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvReq_descriptor_,
      LiveUvReq::default_instance_,
      LiveUvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvReq, _internal_metadata_));
  LiveUvLoop_descriptor_ = file->message_type(3);
  static const int LiveUvLoop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, uv_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, own_loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, data_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, active_handles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, stop_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, handle_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, active_reqs_),
  };
  LiveUvLoop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvLoop_descriptor_,
      LiveUvLoop::default_instance_,
      LiveUvLoop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvLoop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoop, _internal_metadata_));
  LiveIdleLogger_descriptor_ = file->message_type(4);
  static const int LiveIdleLogger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveIdleLogger, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveIdleLogger, log_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveIdleLogger, log_always_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveIdleLogger, idle_handle_ptr_),
  };
  LiveIdleLogger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveIdleLogger_descriptor_,
      LiveIdleLogger::default_instance_,
      LiveIdleLogger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveIdleLogger, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveIdleLogger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveIdleLogger, _internal_metadata_));
  LiveUvLoopFuture_descriptor_ = file->message_type(5);
  static const int LiveUvLoopFuture_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopFuture, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopFuture, pending_count_),
  };
  LiveUvLoopFuture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvLoopFuture_descriptor_,
      LiveUvLoopFuture::default_instance_,
      LiveUvLoopFuture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopFuture, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvLoopFuture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopFuture, _internal_metadata_));
  LiveUvLoopAsyncClosureContext_descriptor_ = file->message_type(6);
  static const int LiveUvLoopAsyncClosureContext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncClosureContext, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncClosureContext, on_work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncClosureContext, request_ptr_),
  };
  LiveUvLoopAsyncClosureContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvLoopAsyncClosureContext_descriptor_,
      LiveUvLoopAsyncClosureContext::default_instance_,
      LiveUvLoopAsyncClosureContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncClosureContext, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvLoopAsyncClosureContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncClosureContext, _internal_metadata_));
  LiveUvLoopAsyncCallbackContext_descriptor_ = file->message_type(7);
  static const int LiveUvLoopAsyncCallbackContext_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncCallbackContext, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncCallbackContext, on_work_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncCallbackContext, request_ptr_),
  };
  LiveUvLoopAsyncCallbackContext_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveUvLoopAsyncCallbackContext_descriptor_,
      LiveUvLoopAsyncCallbackContext::default_instance_,
      LiveUvLoopAsyncCallbackContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncCallbackContext, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveUvLoopAsyncCallbackContext),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveUvLoopAsyncCallbackContext, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvBuf_descriptor_, &LiveUvBuf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvHandle_descriptor_, &LiveUvHandle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvReq_descriptor_, &LiveUvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvLoop_descriptor_, &LiveUvLoop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveIdleLogger_descriptor_, &LiveIdleLogger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvLoopFuture_descriptor_, &LiveUvLoopFuture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvLoopAsyncClosureContext_descriptor_, &LiveUvLoopAsyncClosureContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveUvLoopAsyncCallbackContext_descriptor_, &LiveUvLoopAsyncCallbackContext::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto() {
  delete LiveUvBuf::default_instance_;
  delete LiveUvBuf_reflection_;
  delete LiveUvHandle::default_instance_;
  delete LiveUvHandle_reflection_;
  delete LiveUvReq::default_instance_;
  delete LiveUvReq_reflection_;
  delete LiveUvLoop::default_instance_;
  delete LiveUvLoop_reflection_;
  delete LiveIdleLogger::default_instance_;
  delete LiveIdleLogger_reflection_;
  delete LiveUvLoopFuture::default_instance_;
  delete LiveUvLoopFuture_reflection_;
  delete LiveUvLoopAsyncClosureContext::default_instance_;
  delete LiveUvLoopAsyncClosureContext_reflection_;
  delete LiveUvLoopAsyncCallbackContext::default_instance_;
  delete LiveUvLoopAsyncCallbackContext_reflection_;
}

void protobuf_AddDesc_pjcore_2flive_5fuv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pjcore::protobuf_AddDesc_pjcore_2flive_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024pjcore/live_uv.proto\022\006pjcore\032\021pjcore/l"
    "ive.proto\"*\n\tLiveUvBuf\022\020\n\010base_ptr\030\001 \001(\004"
    "\022\013\n\003len\030\002 \001(\004\"\330\001\n\014LiveUvHandle\022\013\n\003ptr\030\001 "
    "\001(\004\022\014\n\004type\030\002 \001(\005\022\020\n\010type_str\030\003 \001(\t\022\024\n\014c"
    "lose_cb_ptr\030\004 \001(\004\022\020\n\010data_ptr\030\005 \001(\004\022\020\n\010l"
    "oop_ptr\030\006 \001(\004\022\r\n\005flags\030\007 \001(\005\022\025\n\rflag_int"
    "ernal\030\010 \001(\010\022\023\n\013flag_active\030\t \001(\010\022\020\n\010flag"
    "_ref\030\n \001(\010\022\024\n\014flag_closing\030\013 \001(\010\"J\n\tLive"
    "UvReq\022\013\n\003ptr\030\001 \001(\004\022\014\n\004type\030\002 \001(\005\022\020\n\010type"
    "_str\030\003 \001(\t\022\020\n\010data_ptr\030\005 \001(\004\"\321\001\n\nLiveUvL"
    "oop\022\016\n\006uv_ptr\030\001 \001(\004\022\020\n\010own_loop\030\002 \001(\010\022\020\n"
    "\010loop_ptr\030\003 \001(\004\022\020\n\010data_ptr\030\004 \001(\004\022\026\n\016act"
    "ive_handles\030\005 \001(\r\022\021\n\tstop_flag\030\006 \001(\r\022*\n\014"
    "handle_queue\030\007 \003(\0132\024.pjcore.LiveUvHandle"
    "\022&\n\013active_reqs\030\010 \003(\0132\021.pjcore.LiveUvReq"
    "\"h\n\016LiveIdleLogger\022\027\n\017shared_loop_ptr\030\001 "
    "\001(\004\022\020\n\010log_once\030\002 \001(\010\022\022\n\nlog_always\030\003 \001("
    "\010\022\027\n\017idle_handle_ptr\030\004 \001(\004\"B\n\020LiveUvLoop"
    "Future\022\027\n\017shared_loop_ptr\030\001 \001(\004\022\025\n\rpendi"
    "ng_count\030\002 \001(\005\"t\n\035LiveUvLoopAsyncClosure"
    "Context\022\027\n\017shared_loop_ptr\030\001 \001(\004\022%\n\007on_w"
    "ork\030\002 \001(\0132\024.pjcore.LiveCallback\022\023\n\013reque"
    "st_ptr\030\003 \001(\004\"u\n\036LiveUvLoopAsyncCallbackC"
    "ontext\022\027\n\017shared_loop_ptr\030\001 \001(\004\022%\n\007on_wo"
    "rk\030\002 \001(\0132\024.pjcore.LiveCallback\022\023\n\013reques"
    "t_ptr\030\003 \001(\004", 1011);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pjcore/live_uv.proto", &protobuf_RegisterTypes);
  LiveUvBuf::default_instance_ = new LiveUvBuf();
  LiveUvHandle::default_instance_ = new LiveUvHandle();
  LiveUvReq::default_instance_ = new LiveUvReq();
  LiveUvLoop::default_instance_ = new LiveUvLoop();
  LiveIdleLogger::default_instance_ = new LiveIdleLogger();
  LiveUvLoopFuture::default_instance_ = new LiveUvLoopFuture();
  LiveUvLoopAsyncClosureContext::default_instance_ = new LiveUvLoopAsyncClosureContext();
  LiveUvLoopAsyncCallbackContext::default_instance_ = new LiveUvLoopAsyncCallbackContext();
  LiveUvBuf::default_instance_->InitAsDefaultInstance();
  LiveUvHandle::default_instance_->InitAsDefaultInstance();
  LiveUvReq::default_instance_->InitAsDefaultInstance();
  LiveUvLoop::default_instance_->InitAsDefaultInstance();
  LiveIdleLogger::default_instance_->InitAsDefaultInstance();
  LiveUvLoopFuture::default_instance_->InitAsDefaultInstance();
  LiveUvLoopAsyncClosureContext::default_instance_->InitAsDefaultInstance();
  LiveUvLoopAsyncCallbackContext::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pjcore_2flive_5fuv_2eproto {
  StaticDescriptorInitializer_pjcore_2flive_5fuv_2eproto() {
    protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  }
} static_descriptor_initializer_pjcore_2flive_5fuv_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int LiveUvBuf::kBasePtrFieldNumber;
const int LiveUvBuf::kLenFieldNumber;
#endif  // !_MSC_VER

LiveUvBuf::LiveUvBuf()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvBuf)
}

void LiveUvBuf::InitAsDefaultInstance() {
}

LiveUvBuf::LiveUvBuf(const LiveUvBuf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvBuf)
}

void LiveUvBuf::SharedCtor() {
  _cached_size_ = 0;
  base_ptr_ = GOOGLE_ULONGLONG(0);
  len_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvBuf::~LiveUvBuf() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvBuf)
  SharedDtor();
}

void LiveUvBuf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LiveUvBuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvBuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvBuf_descriptor_;
}

const LiveUvBuf& LiveUvBuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvBuf* LiveUvBuf::default_instance_ = NULL;

LiveUvBuf* LiveUvBuf::New(::google::protobuf::Arena* arena) const {
  LiveUvBuf* n = new LiveUvBuf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvBuf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveUvBuf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(base_ptr_, len_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvBuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvBuf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 base_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_ptr_)));
          set_has_base_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // optional uint64 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvBuf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvBuf)
  return false;
#undef DO_
}

void LiveUvBuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvBuf)
  // optional uint64 base_ptr = 1;
  if (has_base_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->base_ptr(), output);
  }

  // optional uint64 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvBuf)
}

::google::protobuf::uint8* LiveUvBuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvBuf)
  // optional uint64 base_ptr = 1;
  if (has_base_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->base_ptr(), target);
  }

  // optional uint64 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvBuf)
  return target;
}

int LiveUvBuf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 base_ptr = 1;
    if (has_base_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_ptr());
    }

    // optional uint64 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->len());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvBuf::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvBuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvBuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvBuf::MergeFrom(const LiveUvBuf& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_ptr()) {
      set_base_ptr(from.base_ptr());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvBuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvBuf::CopyFrom(const LiveUvBuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvBuf::IsInitialized() const {

  return true;
}

void LiveUvBuf::Swap(LiveUvBuf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvBuf::InternalSwap(LiveUvBuf* other) {
  std::swap(base_ptr_, other->base_ptr_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvBuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvBuf_descriptor_;
  metadata.reflection = LiveUvBuf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveUvHandle::kPtrFieldNumber;
const int LiveUvHandle::kTypeFieldNumber;
const int LiveUvHandle::kTypeStrFieldNumber;
const int LiveUvHandle::kCloseCbPtrFieldNumber;
const int LiveUvHandle::kDataPtrFieldNumber;
const int LiveUvHandle::kLoopPtrFieldNumber;
const int LiveUvHandle::kFlagsFieldNumber;
const int LiveUvHandle::kFlagInternalFieldNumber;
const int LiveUvHandle::kFlagActiveFieldNumber;
const int LiveUvHandle::kFlagRefFieldNumber;
const int LiveUvHandle::kFlagClosingFieldNumber;
#endif  // !_MSC_VER

LiveUvHandle::LiveUvHandle()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvHandle)
}

void LiveUvHandle::InitAsDefaultInstance() {
}

LiveUvHandle::LiveUvHandle(const LiveUvHandle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvHandle)
}

void LiveUvHandle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  type_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_cb_ptr_ = GOOGLE_ULONGLONG(0);
  data_ptr_ = GOOGLE_ULONGLONG(0);
  loop_ptr_ = GOOGLE_ULONGLONG(0);
  flags_ = 0;
  flag_internal_ = false;
  flag_active_ = false;
  flag_ref_ = false;
  flag_closing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvHandle::~LiveUvHandle() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvHandle)
  SharedDtor();
}

void LiveUvHandle::SharedDtor() {
  type_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LiveUvHandle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvHandle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvHandle_descriptor_;
}

const LiveUvHandle& LiveUvHandle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvHandle* LiveUvHandle::default_instance_ = NULL;

LiveUvHandle* LiveUvHandle::New(::google::protobuf::Arena* arena) const {
  LiveUvHandle* n = new LiveUvHandle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvHandle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveUvHandle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(close_cb_ptr_, flag_internal_);
    ptr_ = GOOGLE_ULONGLONG(0);
    if (has_type_str()) {
      type_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(flag_active_, flag_closing_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvHandle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_str;
        break;
      }

      // optional string type_str = 3;
      case 3: {
        if (tag == 26) {
         parse_type_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_str().data(), this->type_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveUvHandle.type_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close_cb_ptr;
        break;
      }

      // optional uint64 close_cb_ptr = 4;
      case 4: {
        if (tag == 32) {
         parse_close_cb_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &close_cb_ptr_)));
          set_has_close_cb_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_ptr;
        break;
      }

      // optional uint64 data_ptr = 5;
      case 5: {
        if (tag == 40) {
         parse_data_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_ptr_)));
          set_has_data_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loop_ptr;
        break;
      }

      // optional uint64 loop_ptr = 6;
      case 6: {
        if (tag == 48) {
         parse_loop_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loop_ptr_)));
          set_has_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional int32 flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flag_internal;
        break;
      }

      // optional bool flag_internal = 8;
      case 8: {
        if (tag == 64) {
         parse_flag_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_internal_)));
          set_has_flag_internal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_flag_active;
        break;
      }

      // optional bool flag_active = 9;
      case 9: {
        if (tag == 72) {
         parse_flag_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_active_)));
          set_has_flag_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_flag_ref;
        break;
      }

      // optional bool flag_ref = 10;
      case 10: {
        if (tag == 80) {
         parse_flag_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_ref_)));
          set_has_flag_ref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_flag_closing;
        break;
      }

      // optional bool flag_closing = 11;
      case 11: {
        if (tag == 88) {
         parse_flag_closing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_closing_)));
          set_has_flag_closing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvHandle)
  return false;
#undef DO_
}

void LiveUvHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvHandle)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string type_str = 3;
  if (has_type_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_str().data(), this->type_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveUvHandle.type_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_str(), output);
  }

  // optional uint64 close_cb_ptr = 4;
  if (has_close_cb_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->close_cb_ptr(), output);
  }

  // optional uint64 data_ptr = 5;
  if (has_data_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_ptr(), output);
  }

  // optional uint64 loop_ptr = 6;
  if (has_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->loop_ptr(), output);
  }

  // optional int32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flags(), output);
  }

  // optional bool flag_internal = 8;
  if (has_flag_internal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->flag_internal(), output);
  }

  // optional bool flag_active = 9;
  if (has_flag_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flag_active(), output);
  }

  // optional bool flag_ref = 10;
  if (has_flag_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->flag_ref(), output);
  }

  // optional bool flag_closing = 11;
  if (has_flag_closing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->flag_closing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvHandle)
}

::google::protobuf::uint8* LiveUvHandle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvHandle)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string type_str = 3;
  if (has_type_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_str().data(), this->type_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveUvHandle.type_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_str(), target);
  }

  // optional uint64 close_cb_ptr = 4;
  if (has_close_cb_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->close_cb_ptr(), target);
  }

  // optional uint64 data_ptr = 5;
  if (has_data_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data_ptr(), target);
  }

  // optional uint64 loop_ptr = 6;
  if (has_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->loop_ptr(), target);
  }

  // optional int32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flags(), target);
  }

  // optional bool flag_internal = 8;
  if (has_flag_internal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->flag_internal(), target);
  }

  // optional bool flag_active = 9;
  if (has_flag_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flag_active(), target);
  }

  // optional bool flag_ref = 10;
  if (has_flag_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->flag_ref(), target);
  }

  // optional bool flag_closing = 11;
  if (has_flag_closing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->flag_closing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvHandle)
  return target;
}

int LiveUvHandle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string type_str = 3;
    if (has_type_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_str());
    }

    // optional uint64 close_cb_ptr = 4;
    if (has_close_cb_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->close_cb_ptr());
    }

    // optional uint64 data_ptr = 5;
    if (has_data_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_ptr());
    }

    // optional uint64 loop_ptr = 6;
    if (has_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loop_ptr());
    }

    // optional int32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional bool flag_internal = 8;
    if (has_flag_internal()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792) {
    // optional bool flag_active = 9;
    if (has_flag_active()) {
      total_size += 1 + 1;
    }

    // optional bool flag_ref = 10;
    if (has_flag_ref()) {
      total_size += 1 + 1;
    }

    // optional bool flag_closing = 11;
    if (has_flag_closing()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvHandle::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvHandle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvHandle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvHandle::MergeFrom(const LiveUvHandle& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_str()) {
      set_has_type_str();
      type_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_str_);
    }
    if (from.has_close_cb_ptr()) {
      set_close_cb_ptr(from.close_cb_ptr());
    }
    if (from.has_data_ptr()) {
      set_data_ptr(from.data_ptr());
    }
    if (from.has_loop_ptr()) {
      set_loop_ptr(from.loop_ptr());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_flag_internal()) {
      set_flag_internal(from.flag_internal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag_active()) {
      set_flag_active(from.flag_active());
    }
    if (from.has_flag_ref()) {
      set_flag_ref(from.flag_ref());
    }
    if (from.has_flag_closing()) {
      set_flag_closing(from.flag_closing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvHandle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvHandle::CopyFrom(const LiveUvHandle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvHandle::IsInitialized() const {

  return true;
}

void LiveUvHandle::Swap(LiveUvHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvHandle::InternalSwap(LiveUvHandle* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(type_, other->type_);
  type_str_.Swap(&other->type_str_);
  std::swap(close_cb_ptr_, other->close_cb_ptr_);
  std::swap(data_ptr_, other->data_ptr_);
  std::swap(loop_ptr_, other->loop_ptr_);
  std::swap(flags_, other->flags_);
  std::swap(flag_internal_, other->flag_internal_);
  std::swap(flag_active_, other->flag_active_);
  std::swap(flag_ref_, other->flag_ref_);
  std::swap(flag_closing_, other->flag_closing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvHandle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvHandle_descriptor_;
  metadata.reflection = LiveUvHandle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveUvReq::kPtrFieldNumber;
const int LiveUvReq::kTypeFieldNumber;
const int LiveUvReq::kTypeStrFieldNumber;
const int LiveUvReq::kDataPtrFieldNumber;
#endif  // !_MSC_VER

LiveUvReq::LiveUvReq()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvReq)
}

void LiveUvReq::InitAsDefaultInstance() {
}

LiveUvReq::LiveUvReq(const LiveUvReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvReq)
}

void LiveUvReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  type_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvReq::~LiveUvReq() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvReq)
  SharedDtor();
}

void LiveUvReq::SharedDtor() {
  type_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LiveUvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvReq_descriptor_;
}

const LiveUvReq& LiveUvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvReq* LiveUvReq::default_instance_ = NULL;

LiveUvReq* LiveUvReq::New(::google::protobuf::Arena* arena) const {
  LiveUvReq* n = new LiveUvReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveUvReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(data_ptr_, type_);
    ptr_ = GOOGLE_ULONGLONG(0);
    if (has_type_str()) {
      type_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type_str;
        break;
      }

      // optional string type_str = 3;
      case 3: {
        if (tag == 26) {
         parse_type_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_str().data(), this->type_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveUvReq.type_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_data_ptr;
        break;
      }

      // optional uint64 data_ptr = 5;
      case 5: {
        if (tag == 40) {
         parse_data_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_ptr_)));
          set_has_data_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvReq)
  return false;
#undef DO_
}

void LiveUvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvReq)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string type_str = 3;
  if (has_type_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_str().data(), this->type_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveUvReq.type_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type_str(), output);
  }

  // optional uint64 data_ptr = 5;
  if (has_data_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvReq)
}

::google::protobuf::uint8* LiveUvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvReq)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string type_str = 3;
  if (has_type_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_str().data(), this->type_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveUvReq.type_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_str(), target);
  }

  // optional uint64 data_ptr = 5;
  if (has_data_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvReq)
  return target;
}

int LiveUvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string type_str = 3;
    if (has_type_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_str());
    }

    // optional uint64 data_ptr = 5;
    if (has_data_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_ptr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvReq::MergeFrom(const LiveUvReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_str()) {
      set_has_type_str();
      type_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_str_);
    }
    if (from.has_data_ptr()) {
      set_data_ptr(from.data_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvReq::CopyFrom(const LiveUvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvReq::IsInitialized() const {

  return true;
}

void LiveUvReq::Swap(LiveUvReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvReq::InternalSwap(LiveUvReq* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(type_, other->type_);
  type_str_.Swap(&other->type_str_);
  std::swap(data_ptr_, other->data_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvReq_descriptor_;
  metadata.reflection = LiveUvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveUvLoop::kUvPtrFieldNumber;
const int LiveUvLoop::kOwnLoopFieldNumber;
const int LiveUvLoop::kLoopPtrFieldNumber;
const int LiveUvLoop::kDataPtrFieldNumber;
const int LiveUvLoop::kActiveHandlesFieldNumber;
const int LiveUvLoop::kStopFlagFieldNumber;
const int LiveUvLoop::kHandleQueueFieldNumber;
const int LiveUvLoop::kActiveReqsFieldNumber;
#endif  // !_MSC_VER

LiveUvLoop::LiveUvLoop()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvLoop)
}

void LiveUvLoop::InitAsDefaultInstance() {
}

LiveUvLoop::LiveUvLoop(const LiveUvLoop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvLoop)
}

void LiveUvLoop::SharedCtor() {
  _cached_size_ = 0;
  uv_ptr_ = GOOGLE_ULONGLONG(0);
  own_loop_ = false;
  loop_ptr_ = GOOGLE_ULONGLONG(0);
  data_ptr_ = GOOGLE_ULONGLONG(0);
  active_handles_ = 0u;
  stop_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvLoop::~LiveUvLoop() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvLoop)
  SharedDtor();
}

void LiveUvLoop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LiveUvLoop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvLoop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvLoop_descriptor_;
}

const LiveUvLoop& LiveUvLoop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvLoop* LiveUvLoop::default_instance_ = NULL;

LiveUvLoop* LiveUvLoop::New(::google::protobuf::Arena* arena) const {
  LiveUvLoop* n = new LiveUvLoop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvLoop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveUvLoop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uv_ptr_, data_ptr_);
    stop_flag_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  handle_queue_.Clear();
  active_reqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvLoop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uv_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uv_ptr_)));
          set_has_uv_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_own_loop;
        break;
      }

      // optional bool own_loop = 2;
      case 2: {
        if (tag == 16) {
         parse_own_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &own_loop_)));
          set_has_own_loop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loop_ptr;
        break;
      }

      // optional uint64 loop_ptr = 3;
      case 3: {
        if (tag == 24) {
         parse_loop_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &loop_ptr_)));
          set_has_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_data_ptr;
        break;
      }

      // optional uint64 data_ptr = 4;
      case 4: {
        if (tag == 32) {
         parse_data_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_ptr_)));
          set_has_data_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_active_handles;
        break;
      }

      // optional uint32 active_handles = 5;
      case 5: {
        if (tag == 40) {
         parse_active_handles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_handles_)));
          set_has_active_handles();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stop_flag;
        break;
      }

      // optional uint32 stop_flag = 6;
      case 6: {
        if (tag == 48) {
         parse_stop_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_flag_)));
          set_has_stop_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_handle_queue;
        break;
      }

      // repeated .pjcore.LiveUvHandle handle_queue = 7;
      case 7: {
        if (tag == 58) {
         parse_handle_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handle_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_handle_queue;
        if (input->ExpectTag(66)) goto parse_active_reqs;
        break;
      }

      // repeated .pjcore.LiveUvReq active_reqs = 8;
      case 8: {
        if (tag == 66) {
         parse_active_reqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_reqs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_active_reqs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvLoop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvLoop)
  return false;
#undef DO_
}

void LiveUvLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvLoop)
  // optional uint64 uv_ptr = 1;
  if (has_uv_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uv_ptr(), output);
  }

  // optional bool own_loop = 2;
  if (has_own_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->own_loop(), output);
  }

  // optional uint64 loop_ptr = 3;
  if (has_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->loop_ptr(), output);
  }

  // optional uint64 data_ptr = 4;
  if (has_data_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->data_ptr(), output);
  }

  // optional uint32 active_handles = 5;
  if (has_active_handles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->active_handles(), output);
  }

  // optional uint32 stop_flag = 6;
  if (has_stop_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stop_flag(), output);
  }

  // repeated .pjcore.LiveUvHandle handle_queue = 7;
  for (unsigned int i = 0, n = this->handle_queue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->handle_queue(i), output);
  }

  // repeated .pjcore.LiveUvReq active_reqs = 8;
  for (unsigned int i = 0, n = this->active_reqs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->active_reqs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvLoop)
}

::google::protobuf::uint8* LiveUvLoop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvLoop)
  // optional uint64 uv_ptr = 1;
  if (has_uv_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uv_ptr(), target);
  }

  // optional bool own_loop = 2;
  if (has_own_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->own_loop(), target);
  }

  // optional uint64 loop_ptr = 3;
  if (has_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->loop_ptr(), target);
  }

  // optional uint64 data_ptr = 4;
  if (has_data_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->data_ptr(), target);
  }

  // optional uint32 active_handles = 5;
  if (has_active_handles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->active_handles(), target);
  }

  // optional uint32 stop_flag = 6;
  if (has_stop_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stop_flag(), target);
  }

  // repeated .pjcore.LiveUvHandle handle_queue = 7;
  for (unsigned int i = 0, n = this->handle_queue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->handle_queue(i), target);
  }

  // repeated .pjcore.LiveUvReq active_reqs = 8;
  for (unsigned int i = 0, n = this->active_reqs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->active_reqs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvLoop)
  return target;
}

int LiveUvLoop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional uint64 uv_ptr = 1;
    if (has_uv_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uv_ptr());
    }

    // optional bool own_loop = 2;
    if (has_own_loop()) {
      total_size += 1 + 1;
    }

    // optional uint64 loop_ptr = 3;
    if (has_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->loop_ptr());
    }

    // optional uint64 data_ptr = 4;
    if (has_data_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_ptr());
    }

    // optional uint32 active_handles = 5;
    if (has_active_handles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_handles());
    }

    // optional uint32 stop_flag = 6;
    if (has_stop_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_flag());
    }

  }
  // repeated .pjcore.LiveUvHandle handle_queue = 7;
  total_size += 1 * this->handle_queue_size();
  for (int i = 0; i < this->handle_queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handle_queue(i));
  }

  // repeated .pjcore.LiveUvReq active_reqs = 8;
  total_size += 1 * this->active_reqs_size();
  for (int i = 0; i < this->active_reqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_reqs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvLoop::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvLoop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvLoop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvLoop::MergeFrom(const LiveUvLoop& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  handle_queue_.MergeFrom(from.handle_queue_);
  active_reqs_.MergeFrom(from.active_reqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uv_ptr()) {
      set_uv_ptr(from.uv_ptr());
    }
    if (from.has_own_loop()) {
      set_own_loop(from.own_loop());
    }
    if (from.has_loop_ptr()) {
      set_loop_ptr(from.loop_ptr());
    }
    if (from.has_data_ptr()) {
      set_data_ptr(from.data_ptr());
    }
    if (from.has_active_handles()) {
      set_active_handles(from.active_handles());
    }
    if (from.has_stop_flag()) {
      set_stop_flag(from.stop_flag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvLoop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvLoop::CopyFrom(const LiveUvLoop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvLoop::IsInitialized() const {

  return true;
}

void LiveUvLoop::Swap(LiveUvLoop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvLoop::InternalSwap(LiveUvLoop* other) {
  std::swap(uv_ptr_, other->uv_ptr_);
  std::swap(own_loop_, other->own_loop_);
  std::swap(loop_ptr_, other->loop_ptr_);
  std::swap(data_ptr_, other->data_ptr_);
  std::swap(active_handles_, other->active_handles_);
  std::swap(stop_flag_, other->stop_flag_);
  handle_queue_.UnsafeArenaSwap(&other->handle_queue_);
  active_reqs_.UnsafeArenaSwap(&other->active_reqs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvLoop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvLoop_descriptor_;
  metadata.reflection = LiveUvLoop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveIdleLogger::kSharedLoopPtrFieldNumber;
const int LiveIdleLogger::kLogOnceFieldNumber;
const int LiveIdleLogger::kLogAlwaysFieldNumber;
const int LiveIdleLogger::kIdleHandlePtrFieldNumber;
#endif  // !_MSC_VER

LiveIdleLogger::LiveIdleLogger()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveIdleLogger)
}

void LiveIdleLogger::InitAsDefaultInstance() {
}

LiveIdleLogger::LiveIdleLogger(const LiveIdleLogger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveIdleLogger)
}

void LiveIdleLogger::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  log_once_ = false;
  log_always_ = false;
  idle_handle_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveIdleLogger::~LiveIdleLogger() {
  // @@protoc_insertion_point(destructor:pjcore.LiveIdleLogger)
  SharedDtor();
}

void LiveIdleLogger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LiveIdleLogger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveIdleLogger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveIdleLogger_descriptor_;
}

const LiveIdleLogger& LiveIdleLogger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveIdleLogger* LiveIdleLogger::default_instance_ = NULL;

LiveIdleLogger* LiveIdleLogger::New(::google::protobuf::Arena* arena) const {
  LiveIdleLogger* n = new LiveIdleLogger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveIdleLogger::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveIdleLogger*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(shared_loop_ptr_, log_always_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveIdleLogger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveIdleLogger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_log_once;
        break;
      }

      // optional bool log_once = 2;
      case 2: {
        if (tag == 16) {
         parse_log_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_once_)));
          set_has_log_once();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_log_always;
        break;
      }

      // optional bool log_always = 3;
      case 3: {
        if (tag == 24) {
         parse_log_always:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_always_)));
          set_has_log_always();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_idle_handle_ptr;
        break;
      }

      // optional uint64 idle_handle_ptr = 4;
      case 4: {
        if (tag == 32) {
         parse_idle_handle_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idle_handle_ptr_)));
          set_has_idle_handle_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveIdleLogger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveIdleLogger)
  return false;
#undef DO_
}

void LiveIdleLogger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveIdleLogger)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // optional bool log_once = 2;
  if (has_log_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->log_once(), output);
  }

  // optional bool log_always = 3;
  if (has_log_always()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->log_always(), output);
  }

  // optional uint64 idle_handle_ptr = 4;
  if (has_idle_handle_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->idle_handle_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveIdleLogger)
}

::google::protobuf::uint8* LiveIdleLogger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveIdleLogger)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // optional bool log_once = 2;
  if (has_log_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->log_once(), target);
  }

  // optional bool log_always = 3;
  if (has_log_always()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->log_always(), target);
  }

  // optional uint64 idle_handle_ptr = 4;
  if (has_idle_handle_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->idle_handle_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveIdleLogger)
  return target;
}

int LiveIdleLogger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional bool log_once = 2;
    if (has_log_once()) {
      total_size += 1 + 1;
    }

    // optional bool log_always = 3;
    if (has_log_always()) {
      total_size += 1 + 1;
    }

    // optional uint64 idle_handle_ptr = 4;
    if (has_idle_handle_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->idle_handle_ptr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveIdleLogger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveIdleLogger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveIdleLogger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveIdleLogger::MergeFrom(const LiveIdleLogger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_log_once()) {
      set_log_once(from.log_once());
    }
    if (from.has_log_always()) {
      set_log_always(from.log_always());
    }
    if (from.has_idle_handle_ptr()) {
      set_idle_handle_ptr(from.idle_handle_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveIdleLogger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveIdleLogger::CopyFrom(const LiveIdleLogger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveIdleLogger::IsInitialized() const {

  return true;
}

void LiveIdleLogger::Swap(LiveIdleLogger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveIdleLogger::InternalSwap(LiveIdleLogger* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(log_once_, other->log_once_);
  std::swap(log_always_, other->log_always_);
  std::swap(idle_handle_ptr_, other->idle_handle_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveIdleLogger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveIdleLogger_descriptor_;
  metadata.reflection = LiveIdleLogger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveUvLoopFuture::kSharedLoopPtrFieldNumber;
const int LiveUvLoopFuture::kPendingCountFieldNumber;
#endif  // !_MSC_VER

LiveUvLoopFuture::LiveUvLoopFuture()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvLoopFuture)
}

void LiveUvLoopFuture::InitAsDefaultInstance() {
}

LiveUvLoopFuture::LiveUvLoopFuture(const LiveUvLoopFuture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvLoopFuture)
}

void LiveUvLoopFuture::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  pending_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvLoopFuture::~LiveUvLoopFuture() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvLoopFuture)
  SharedDtor();
}

void LiveUvLoopFuture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LiveUvLoopFuture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvLoopFuture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvLoopFuture_descriptor_;
}

const LiveUvLoopFuture& LiveUvLoopFuture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvLoopFuture* LiveUvLoopFuture::default_instance_ = NULL;

LiveUvLoopFuture* LiveUvLoopFuture::New(::google::protobuf::Arena* arena) const {
  LiveUvLoopFuture* n = new LiveUvLoopFuture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvLoopFuture::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveUvLoopFuture*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(shared_loop_ptr_, pending_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvLoopFuture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvLoopFuture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pending_count;
        break;
      }

      // optional int32 pending_count = 2;
      case 2: {
        if (tag == 16) {
         parse_pending_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pending_count_)));
          set_has_pending_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvLoopFuture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvLoopFuture)
  return false;
#undef DO_
}

void LiveUvLoopFuture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvLoopFuture)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // optional int32 pending_count = 2;
  if (has_pending_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pending_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvLoopFuture)
}

::google::protobuf::uint8* LiveUvLoopFuture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvLoopFuture)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // optional int32 pending_count = 2;
  if (has_pending_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pending_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvLoopFuture)
  return target;
}

int LiveUvLoopFuture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional int32 pending_count = 2;
    if (has_pending_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pending_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvLoopFuture::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvLoopFuture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvLoopFuture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvLoopFuture::MergeFrom(const LiveUvLoopFuture& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_pending_count()) {
      set_pending_count(from.pending_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvLoopFuture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvLoopFuture::CopyFrom(const LiveUvLoopFuture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvLoopFuture::IsInitialized() const {

  return true;
}

void LiveUvLoopFuture::Swap(LiveUvLoopFuture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvLoopFuture::InternalSwap(LiveUvLoopFuture* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(pending_count_, other->pending_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvLoopFuture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvLoopFuture_descriptor_;
  metadata.reflection = LiveUvLoopFuture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveUvLoopAsyncClosureContext::kSharedLoopPtrFieldNumber;
const int LiveUvLoopAsyncClosureContext::kOnWorkFieldNumber;
const int LiveUvLoopAsyncClosureContext::kRequestPtrFieldNumber;
#endif  // !_MSC_VER

LiveUvLoopAsyncClosureContext::LiveUvLoopAsyncClosureContext()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvLoopAsyncClosureContext)
}

void LiveUvLoopAsyncClosureContext::InitAsDefaultInstance() {
  on_work_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveUvLoopAsyncClosureContext::LiveUvLoopAsyncClosureContext(const LiveUvLoopAsyncClosureContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvLoopAsyncClosureContext)
}

void LiveUvLoopAsyncClosureContext::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  on_work_ = NULL;
  request_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvLoopAsyncClosureContext::~LiveUvLoopAsyncClosureContext() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvLoopAsyncClosureContext)
  SharedDtor();
}

void LiveUvLoopAsyncClosureContext::SharedDtor() {
  if (this != default_instance_) {
    delete on_work_;
  }
}

void LiveUvLoopAsyncClosureContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvLoopAsyncClosureContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvLoopAsyncClosureContext_descriptor_;
}

const LiveUvLoopAsyncClosureContext& LiveUvLoopAsyncClosureContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvLoopAsyncClosureContext* LiveUvLoopAsyncClosureContext::default_instance_ = NULL;

LiveUvLoopAsyncClosureContext* LiveUvLoopAsyncClosureContext::New(::google::protobuf::Arena* arena) const {
  LiveUvLoopAsyncClosureContext* n = new LiveUvLoopAsyncClosureContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvLoopAsyncClosureContext::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_on_work()) {
      if (on_work_ != NULL) on_work_->::pjcore::LiveCallback::Clear();
    }
    request_ptr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvLoopAsyncClosureContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvLoopAsyncClosureContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_on_work;
        break;
      }

      // optional .pjcore.LiveCallback on_work = 2;
      case 2: {
        if (tag == 18) {
         parse_on_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_work()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_ptr;
        break;
      }

      // optional uint64 request_ptr = 3;
      case 3: {
        if (tag == 24) {
         parse_request_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_ptr_)));
          set_has_request_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvLoopAsyncClosureContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvLoopAsyncClosureContext)
  return false;
#undef DO_
}

void LiveUvLoopAsyncClosureContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvLoopAsyncClosureContext)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // optional .pjcore.LiveCallback on_work = 2;
  if (has_on_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->on_work_, output);
  }

  // optional uint64 request_ptr = 3;
  if (has_request_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->request_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvLoopAsyncClosureContext)
}

::google::protobuf::uint8* LiveUvLoopAsyncClosureContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvLoopAsyncClosureContext)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // optional .pjcore.LiveCallback on_work = 2;
  if (has_on_work()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->on_work_, target);
  }

  // optional uint64 request_ptr = 3;
  if (has_request_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->request_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvLoopAsyncClosureContext)
  return target;
}

int LiveUvLoopAsyncClosureContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional .pjcore.LiveCallback on_work = 2;
    if (has_on_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_work_);
    }

    // optional uint64 request_ptr = 3;
    if (has_request_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_ptr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvLoopAsyncClosureContext::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvLoopAsyncClosureContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvLoopAsyncClosureContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvLoopAsyncClosureContext::MergeFrom(const LiveUvLoopAsyncClosureContext& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_on_work()) {
      mutable_on_work()->::pjcore::LiveCallback::MergeFrom(from.on_work());
    }
    if (from.has_request_ptr()) {
      set_request_ptr(from.request_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvLoopAsyncClosureContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvLoopAsyncClosureContext::CopyFrom(const LiveUvLoopAsyncClosureContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvLoopAsyncClosureContext::IsInitialized() const {

  return true;
}

void LiveUvLoopAsyncClosureContext::Swap(LiveUvLoopAsyncClosureContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvLoopAsyncClosureContext::InternalSwap(LiveUvLoopAsyncClosureContext* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(on_work_, other->on_work_);
  std::swap(request_ptr_, other->request_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvLoopAsyncClosureContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvLoopAsyncClosureContext_descriptor_;
  metadata.reflection = LiveUvLoopAsyncClosureContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveUvLoopAsyncCallbackContext::kSharedLoopPtrFieldNumber;
const int LiveUvLoopAsyncCallbackContext::kOnWorkFieldNumber;
const int LiveUvLoopAsyncCallbackContext::kRequestPtrFieldNumber;
#endif  // !_MSC_VER

LiveUvLoopAsyncCallbackContext::LiveUvLoopAsyncCallbackContext()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveUvLoopAsyncCallbackContext)
}

void LiveUvLoopAsyncCallbackContext::InitAsDefaultInstance() {
  on_work_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveUvLoopAsyncCallbackContext::LiveUvLoopAsyncCallbackContext(const LiveUvLoopAsyncCallbackContext& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveUvLoopAsyncCallbackContext)
}

void LiveUvLoopAsyncCallbackContext::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  on_work_ = NULL;
  request_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveUvLoopAsyncCallbackContext::~LiveUvLoopAsyncCallbackContext() {
  // @@protoc_insertion_point(destructor:pjcore.LiveUvLoopAsyncCallbackContext)
  SharedDtor();
}

void LiveUvLoopAsyncCallbackContext::SharedDtor() {
  if (this != default_instance_) {
    delete on_work_;
  }
}

void LiveUvLoopAsyncCallbackContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveUvLoopAsyncCallbackContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveUvLoopAsyncCallbackContext_descriptor_;
}

const LiveUvLoopAsyncCallbackContext& LiveUvLoopAsyncCallbackContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  return *default_instance_;
}

LiveUvLoopAsyncCallbackContext* LiveUvLoopAsyncCallbackContext::default_instance_ = NULL;

LiveUvLoopAsyncCallbackContext* LiveUvLoopAsyncCallbackContext::New(::google::protobuf::Arena* arena) const {
  LiveUvLoopAsyncCallbackContext* n = new LiveUvLoopAsyncCallbackContext;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveUvLoopAsyncCallbackContext::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_on_work()) {
      if (on_work_ != NULL) on_work_->::pjcore::LiveCallback::Clear();
    }
    request_ptr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveUvLoopAsyncCallbackContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveUvLoopAsyncCallbackContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_on_work;
        break;
      }

      // optional .pjcore.LiveCallback on_work = 2;
      case 2: {
        if (tag == 18) {
         parse_on_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_work()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_ptr;
        break;
      }

      // optional uint64 request_ptr = 3;
      case 3: {
        if (tag == 24) {
         parse_request_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_ptr_)));
          set_has_request_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveUvLoopAsyncCallbackContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveUvLoopAsyncCallbackContext)
  return false;
#undef DO_
}

void LiveUvLoopAsyncCallbackContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveUvLoopAsyncCallbackContext)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // optional .pjcore.LiveCallback on_work = 2;
  if (has_on_work()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->on_work_, output);
  }

  // optional uint64 request_ptr = 3;
  if (has_request_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->request_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveUvLoopAsyncCallbackContext)
}

::google::protobuf::uint8* LiveUvLoopAsyncCallbackContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveUvLoopAsyncCallbackContext)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // optional .pjcore.LiveCallback on_work = 2;
  if (has_on_work()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->on_work_, target);
  }

  // optional uint64 request_ptr = 3;
  if (has_request_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->request_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveUvLoopAsyncCallbackContext)
  return target;
}

int LiveUvLoopAsyncCallbackContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional .pjcore.LiveCallback on_work = 2;
    if (has_on_work()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_work_);
    }

    // optional uint64 request_ptr = 3;
    if (has_request_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_ptr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveUvLoopAsyncCallbackContext::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveUvLoopAsyncCallbackContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveUvLoopAsyncCallbackContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveUvLoopAsyncCallbackContext::MergeFrom(const LiveUvLoopAsyncCallbackContext& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_on_work()) {
      mutable_on_work()->::pjcore::LiveCallback::MergeFrom(from.on_work());
    }
    if (from.has_request_ptr()) {
      set_request_ptr(from.request_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveUvLoopAsyncCallbackContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveUvLoopAsyncCallbackContext::CopyFrom(const LiveUvLoopAsyncCallbackContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveUvLoopAsyncCallbackContext::IsInitialized() const {

  return true;
}

void LiveUvLoopAsyncCallbackContext::Swap(LiveUvLoopAsyncCallbackContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveUvLoopAsyncCallbackContext::InternalSwap(LiveUvLoopAsyncCallbackContext* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(on_work_, other->on_work_);
  std::swap(request_ptr_, other->request_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveUvLoopAsyncCallbackContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveUvLoopAsyncCallbackContext_descriptor_;
  metadata.reflection = LiveUvLoopAsyncCallbackContext_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pjcore

// @@protoc_insertion_point(global_scope)
