// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pjcore/live_uv.proto

#ifndef PROTOBUF_pjcore_2flive_5fuv_2eproto__INCLUDED
#define PROTOBUF_pjcore_2flive_5fuv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "pjcore/live.pb.h"
// @@protoc_insertion_point(includes)

namespace pjcore {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

class LiveUvBuf;
class LiveUvHandle;
class LiveUvReq;
class LiveUvLoop;
class LiveIdleLogger;
class LiveUvLoopFuture;
class LiveUvLoopAsyncClosureContext;
class LiveUvLoopAsyncCallbackContext;

// ===================================================================

class LiveUvBuf : public ::google::protobuf::Message {
 public:
  LiveUvBuf();
  virtual ~LiveUvBuf();

  LiveUvBuf(const LiveUvBuf& from);

  inline LiveUvBuf& operator=(const LiveUvBuf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvBuf& default_instance();

  void Swap(LiveUvBuf* other);

  // implements Message ----------------------------------------------

  inline LiveUvBuf* New() const { return New(NULL); }

  LiveUvBuf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvBuf& from);
  void MergeFrom(const LiveUvBuf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvBuf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 base_ptr = 1;
  inline bool has_base_ptr() const;
  inline void clear_base_ptr();
  static const int kBasePtrFieldNumber = 1;
  inline ::google::protobuf::uint64 base_ptr() const;
  inline void set_base_ptr(::google::protobuf::uint64 value);

  // optional uint64 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::uint64 len() const;
  inline void set_len(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvBuf)
 private:
  inline void set_has_base_ptr();
  inline void clear_has_base_ptr();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 base_ptr_;
  ::google::protobuf::uint64 len_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvBuf* default_instance_;
};
// -------------------------------------------------------------------

class LiveUvHandle : public ::google::protobuf::Message {
 public:
  LiveUvHandle();
  virtual ~LiveUvHandle();

  LiveUvHandle(const LiveUvHandle& from);

  inline LiveUvHandle& operator=(const LiveUvHandle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvHandle& default_instance();

  void Swap(LiveUvHandle* other);

  // implements Message ----------------------------------------------

  inline LiveUvHandle* New() const { return New(NULL); }

  LiveUvHandle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvHandle& from);
  void MergeFrom(const LiveUvHandle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string type_str = 3;
  inline bool has_type_str() const;
  inline void clear_type_str();
  static const int kTypeStrFieldNumber = 3;
  inline const ::std::string& type_str() const;
  inline void set_type_str(const ::std::string& value);
  inline void set_type_str(const char* value);
  inline void set_type_str(const char* value, size_t size);
  inline ::std::string* mutable_type_str();
  inline ::std::string* release_type_str();
  inline void set_allocated_type_str(::std::string* type_str);

  // optional uint64 close_cb_ptr = 4;
  inline bool has_close_cb_ptr() const;
  inline void clear_close_cb_ptr();
  static const int kCloseCbPtrFieldNumber = 4;
  inline ::google::protobuf::uint64 close_cb_ptr() const;
  inline void set_close_cb_ptr(::google::protobuf::uint64 value);

  // optional uint64 data_ptr = 5;
  inline bool has_data_ptr() const;
  inline void clear_data_ptr();
  static const int kDataPtrFieldNumber = 5;
  inline ::google::protobuf::uint64 data_ptr() const;
  inline void set_data_ptr(::google::protobuf::uint64 value);

  // optional uint64 loop_ptr = 6;
  inline bool has_loop_ptr() const;
  inline void clear_loop_ptr();
  static const int kLoopPtrFieldNumber = 6;
  inline ::google::protobuf::uint64 loop_ptr() const;
  inline void set_loop_ptr(::google::protobuf::uint64 value);

  // optional int32 flags = 7;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 7;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // optional bool flag_internal = 8;
  inline bool has_flag_internal() const;
  inline void clear_flag_internal();
  static const int kFlagInternalFieldNumber = 8;
  inline bool flag_internal() const;
  inline void set_flag_internal(bool value);

  // optional bool flag_active = 9;
  inline bool has_flag_active() const;
  inline void clear_flag_active();
  static const int kFlagActiveFieldNumber = 9;
  inline bool flag_active() const;
  inline void set_flag_active(bool value);

  // optional bool flag_ref = 10;
  inline bool has_flag_ref() const;
  inline void clear_flag_ref();
  static const int kFlagRefFieldNumber = 10;
  inline bool flag_ref() const;
  inline void set_flag_ref(bool value);

  // optional bool flag_closing = 11;
  inline bool has_flag_closing() const;
  inline void clear_flag_closing();
  static const int kFlagClosingFieldNumber = 11;
  inline bool flag_closing() const;
  inline void set_flag_closing(bool value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvHandle)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_type_str();
  inline void clear_has_type_str();
  inline void set_has_close_cb_ptr();
  inline void clear_has_close_cb_ptr();
  inline void set_has_data_ptr();
  inline void clear_has_data_ptr();
  inline void set_has_loop_ptr();
  inline void clear_has_loop_ptr();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_flag_internal();
  inline void clear_has_flag_internal();
  inline void set_has_flag_active();
  inline void clear_has_flag_active();
  inline void set_has_flag_ref();
  inline void clear_has_flag_ref();
  inline void set_has_flag_closing();
  inline void clear_has_flag_closing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::internal::ArenaStringPtr type_str_;
  ::google::protobuf::uint64 close_cb_ptr_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::uint64 data_ptr_;
  ::google::protobuf::uint64 loop_ptr_;
  bool flag_internal_;
  bool flag_active_;
  bool flag_ref_;
  bool flag_closing_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvHandle* default_instance_;
};
// -------------------------------------------------------------------

class LiveUvReq : public ::google::protobuf::Message {
 public:
  LiveUvReq();
  virtual ~LiveUvReq();

  LiveUvReq(const LiveUvReq& from);

  inline LiveUvReq& operator=(const LiveUvReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvReq& default_instance();

  void Swap(LiveUvReq* other);

  // implements Message ----------------------------------------------

  inline LiveUvReq* New() const { return New(NULL); }

  LiveUvReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvReq& from);
  void MergeFrom(const LiveUvReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ptr = 1;
  inline bool has_ptr() const;
  inline void clear_ptr();
  static const int kPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 ptr() const;
  inline void set_ptr(::google::protobuf::uint64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string type_str = 3;
  inline bool has_type_str() const;
  inline void clear_type_str();
  static const int kTypeStrFieldNumber = 3;
  inline const ::std::string& type_str() const;
  inline void set_type_str(const ::std::string& value);
  inline void set_type_str(const char* value);
  inline void set_type_str(const char* value, size_t size);
  inline ::std::string* mutable_type_str();
  inline ::std::string* release_type_str();
  inline void set_allocated_type_str(::std::string* type_str);

  // optional uint64 data_ptr = 5;
  inline bool has_data_ptr() const;
  inline void clear_data_ptr();
  static const int kDataPtrFieldNumber = 5;
  inline ::google::protobuf::uint64 data_ptr() const;
  inline void set_data_ptr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvReq)
 private:
  inline void set_has_ptr();
  inline void clear_has_ptr();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_type_str();
  inline void clear_has_type_str();
  inline void set_has_data_ptr();
  inline void clear_has_data_ptr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ptr_;
  ::google::protobuf::internal::ArenaStringPtr type_str_;
  ::google::protobuf::uint64 data_ptr_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvReq* default_instance_;
};
// -------------------------------------------------------------------

class LiveUvLoop : public ::google::protobuf::Message {
 public:
  LiveUvLoop();
  virtual ~LiveUvLoop();

  LiveUvLoop(const LiveUvLoop& from);

  inline LiveUvLoop& operator=(const LiveUvLoop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvLoop& default_instance();

  void Swap(LiveUvLoop* other);

  // implements Message ----------------------------------------------

  inline LiveUvLoop* New() const { return New(NULL); }

  LiveUvLoop* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvLoop& from);
  void MergeFrom(const LiveUvLoop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvLoop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uv_ptr = 1;
  inline bool has_uv_ptr() const;
  inline void clear_uv_ptr();
  static const int kUvPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 uv_ptr() const;
  inline void set_uv_ptr(::google::protobuf::uint64 value);

  // optional bool own_loop = 2;
  inline bool has_own_loop() const;
  inline void clear_own_loop();
  static const int kOwnLoopFieldNumber = 2;
  inline bool own_loop() const;
  inline void set_own_loop(bool value);

  // optional uint64 loop_ptr = 3;
  inline bool has_loop_ptr() const;
  inline void clear_loop_ptr();
  static const int kLoopPtrFieldNumber = 3;
  inline ::google::protobuf::uint64 loop_ptr() const;
  inline void set_loop_ptr(::google::protobuf::uint64 value);

  // optional uint64 data_ptr = 4;
  inline bool has_data_ptr() const;
  inline void clear_data_ptr();
  static const int kDataPtrFieldNumber = 4;
  inline ::google::protobuf::uint64 data_ptr() const;
  inline void set_data_ptr(::google::protobuf::uint64 value);

  // optional uint32 active_handles = 5;
  inline bool has_active_handles() const;
  inline void clear_active_handles();
  static const int kActiveHandlesFieldNumber = 5;
  inline ::google::protobuf::uint32 active_handles() const;
  inline void set_active_handles(::google::protobuf::uint32 value);

  // optional uint32 stop_flag = 6;
  inline bool has_stop_flag() const;
  inline void clear_stop_flag();
  static const int kStopFlagFieldNumber = 6;
  inline ::google::protobuf::uint32 stop_flag() const;
  inline void set_stop_flag(::google::protobuf::uint32 value);

  // repeated .pjcore.LiveUvHandle handle_queue = 7;
  inline int handle_queue_size() const;
  inline void clear_handle_queue();
  static const int kHandleQueueFieldNumber = 7;
  inline const ::pjcore::LiveUvHandle& handle_queue(int index) const;
  inline ::pjcore::LiveUvHandle* mutable_handle_queue(int index);
  inline ::pjcore::LiveUvHandle* add_handle_queue();
  inline const ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvHandle >&
      handle_queue() const;
  inline ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvHandle >*
      mutable_handle_queue();

  // repeated .pjcore.LiveUvReq active_reqs = 8;
  inline int active_reqs_size() const;
  inline void clear_active_reqs();
  static const int kActiveReqsFieldNumber = 8;
  inline const ::pjcore::LiveUvReq& active_reqs(int index) const;
  inline ::pjcore::LiveUvReq* mutable_active_reqs(int index);
  inline ::pjcore::LiveUvReq* add_active_reqs();
  inline const ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvReq >&
      active_reqs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvReq >*
      mutable_active_reqs();

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvLoop)
 private:
  inline void set_has_uv_ptr();
  inline void clear_has_uv_ptr();
  inline void set_has_own_loop();
  inline void clear_has_own_loop();
  inline void set_has_loop_ptr();
  inline void clear_has_loop_ptr();
  inline void set_has_data_ptr();
  inline void clear_has_data_ptr();
  inline void set_has_active_handles();
  inline void clear_has_active_handles();
  inline void set_has_stop_flag();
  inline void clear_has_stop_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uv_ptr_;
  ::google::protobuf::uint64 loop_ptr_;
  bool own_loop_;
  ::google::protobuf::uint32 active_handles_;
  ::google::protobuf::uint64 data_ptr_;
  ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvHandle > handle_queue_;
  ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvReq > active_reqs_;
  ::google::protobuf::uint32 stop_flag_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvLoop* default_instance_;
};
// -------------------------------------------------------------------

class LiveIdleLogger : public ::google::protobuf::Message {
 public:
  LiveIdleLogger();
  virtual ~LiveIdleLogger();

  LiveIdleLogger(const LiveIdleLogger& from);

  inline LiveIdleLogger& operator=(const LiveIdleLogger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveIdleLogger& default_instance();

  void Swap(LiveIdleLogger* other);

  // implements Message ----------------------------------------------

  inline LiveIdleLogger* New() const { return New(NULL); }

  LiveIdleLogger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveIdleLogger& from);
  void MergeFrom(const LiveIdleLogger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveIdleLogger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 shared_loop_ptr = 1;
  inline bool has_shared_loop_ptr() const;
  inline void clear_shared_loop_ptr();
  static const int kSharedLoopPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 shared_loop_ptr() const;
  inline void set_shared_loop_ptr(::google::protobuf::uint64 value);

  // optional bool log_once = 2;
  inline bool has_log_once() const;
  inline void clear_log_once();
  static const int kLogOnceFieldNumber = 2;
  inline bool log_once() const;
  inline void set_log_once(bool value);

  // optional bool log_always = 3;
  inline bool has_log_always() const;
  inline void clear_log_always();
  static const int kLogAlwaysFieldNumber = 3;
  inline bool log_always() const;
  inline void set_log_always(bool value);

  // optional uint64 idle_handle_ptr = 4;
  inline bool has_idle_handle_ptr() const;
  inline void clear_idle_handle_ptr();
  static const int kIdleHandlePtrFieldNumber = 4;
  inline ::google::protobuf::uint64 idle_handle_ptr() const;
  inline void set_idle_handle_ptr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveIdleLogger)
 private:
  inline void set_has_shared_loop_ptr();
  inline void clear_has_shared_loop_ptr();
  inline void set_has_log_once();
  inline void clear_has_log_once();
  inline void set_has_log_always();
  inline void clear_has_log_always();
  inline void set_has_idle_handle_ptr();
  inline void clear_has_idle_handle_ptr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 shared_loop_ptr_;
  ::google::protobuf::uint64 idle_handle_ptr_;
  bool log_once_;
  bool log_always_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveIdleLogger* default_instance_;
};
// -------------------------------------------------------------------

class LiveUvLoopFuture : public ::google::protobuf::Message {
 public:
  LiveUvLoopFuture();
  virtual ~LiveUvLoopFuture();

  LiveUvLoopFuture(const LiveUvLoopFuture& from);

  inline LiveUvLoopFuture& operator=(const LiveUvLoopFuture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvLoopFuture& default_instance();

  void Swap(LiveUvLoopFuture* other);

  // implements Message ----------------------------------------------

  inline LiveUvLoopFuture* New() const { return New(NULL); }

  LiveUvLoopFuture* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvLoopFuture& from);
  void MergeFrom(const LiveUvLoopFuture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvLoopFuture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 shared_loop_ptr = 1;
  inline bool has_shared_loop_ptr() const;
  inline void clear_shared_loop_ptr();
  static const int kSharedLoopPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 shared_loop_ptr() const;
  inline void set_shared_loop_ptr(::google::protobuf::uint64 value);

  // optional int32 pending_count = 2;
  inline bool has_pending_count() const;
  inline void clear_pending_count();
  static const int kPendingCountFieldNumber = 2;
  inline ::google::protobuf::int32 pending_count() const;
  inline void set_pending_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvLoopFuture)
 private:
  inline void set_has_shared_loop_ptr();
  inline void clear_has_shared_loop_ptr();
  inline void set_has_pending_count();
  inline void clear_has_pending_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 shared_loop_ptr_;
  ::google::protobuf::int32 pending_count_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvLoopFuture* default_instance_;
};
// -------------------------------------------------------------------

class LiveUvLoopAsyncClosureContext : public ::google::protobuf::Message {
 public:
  LiveUvLoopAsyncClosureContext();
  virtual ~LiveUvLoopAsyncClosureContext();

  LiveUvLoopAsyncClosureContext(const LiveUvLoopAsyncClosureContext& from);

  inline LiveUvLoopAsyncClosureContext& operator=(const LiveUvLoopAsyncClosureContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvLoopAsyncClosureContext& default_instance();

  void Swap(LiveUvLoopAsyncClosureContext* other);

  // implements Message ----------------------------------------------

  inline LiveUvLoopAsyncClosureContext* New() const { return New(NULL); }

  LiveUvLoopAsyncClosureContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvLoopAsyncClosureContext& from);
  void MergeFrom(const LiveUvLoopAsyncClosureContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvLoopAsyncClosureContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 shared_loop_ptr = 1;
  inline bool has_shared_loop_ptr() const;
  inline void clear_shared_loop_ptr();
  static const int kSharedLoopPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 shared_loop_ptr() const;
  inline void set_shared_loop_ptr(::google::protobuf::uint64 value);

  // optional .pjcore.LiveCallback on_work = 2;
  inline bool has_on_work() const;
  inline void clear_on_work();
  static const int kOnWorkFieldNumber = 2;
  inline const ::pjcore::LiveCallback& on_work() const;
  inline ::pjcore::LiveCallback* mutable_on_work();
  inline ::pjcore::LiveCallback* release_on_work();
  inline void set_allocated_on_work(::pjcore::LiveCallback* on_work);

  // optional uint64 request_ptr = 3;
  inline bool has_request_ptr() const;
  inline void clear_request_ptr();
  static const int kRequestPtrFieldNumber = 3;
  inline ::google::protobuf::uint64 request_ptr() const;
  inline void set_request_ptr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvLoopAsyncClosureContext)
 private:
  inline void set_has_shared_loop_ptr();
  inline void clear_has_shared_loop_ptr();
  inline void set_has_on_work();
  inline void clear_has_on_work();
  inline void set_has_request_ptr();
  inline void clear_has_request_ptr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 shared_loop_ptr_;
  ::pjcore::LiveCallback* on_work_;
  ::google::protobuf::uint64 request_ptr_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvLoopAsyncClosureContext* default_instance_;
};
// -------------------------------------------------------------------

class LiveUvLoopAsyncCallbackContext : public ::google::protobuf::Message {
 public:
  LiveUvLoopAsyncCallbackContext();
  virtual ~LiveUvLoopAsyncCallbackContext();

  LiveUvLoopAsyncCallbackContext(const LiveUvLoopAsyncCallbackContext& from);

  inline LiveUvLoopAsyncCallbackContext& operator=(const LiveUvLoopAsyncCallbackContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveUvLoopAsyncCallbackContext& default_instance();

  void Swap(LiveUvLoopAsyncCallbackContext* other);

  // implements Message ----------------------------------------------

  inline LiveUvLoopAsyncCallbackContext* New() const { return New(NULL); }

  LiveUvLoopAsyncCallbackContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LiveUvLoopAsyncCallbackContext& from);
  void MergeFrom(const LiveUvLoopAsyncCallbackContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveUvLoopAsyncCallbackContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 shared_loop_ptr = 1;
  inline bool has_shared_loop_ptr() const;
  inline void clear_shared_loop_ptr();
  static const int kSharedLoopPtrFieldNumber = 1;
  inline ::google::protobuf::uint64 shared_loop_ptr() const;
  inline void set_shared_loop_ptr(::google::protobuf::uint64 value);

  // optional .pjcore.LiveCallback on_work = 2;
  inline bool has_on_work() const;
  inline void clear_on_work();
  static const int kOnWorkFieldNumber = 2;
  inline const ::pjcore::LiveCallback& on_work() const;
  inline ::pjcore::LiveCallback* mutable_on_work();
  inline ::pjcore::LiveCallback* release_on_work();
  inline void set_allocated_on_work(::pjcore::LiveCallback* on_work);

  // optional uint64 request_ptr = 3;
  inline bool has_request_ptr() const;
  inline void clear_request_ptr();
  static const int kRequestPtrFieldNumber = 3;
  inline ::google::protobuf::uint64 request_ptr() const;
  inline void set_request_ptr(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pjcore.LiveUvLoopAsyncCallbackContext)
 private:
  inline void set_has_shared_loop_ptr();
  inline void clear_has_shared_loop_ptr();
  inline void set_has_on_work();
  inline void clear_has_on_work();
  inline void set_has_request_ptr();
  inline void clear_has_request_ptr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 shared_loop_ptr_;
  ::pjcore::LiveCallback* on_work_;
  ::google::protobuf::uint64 request_ptr_;
  friend void  protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_AssignDesc_pjcore_2flive_5fuv_2eproto();
  friend void protobuf_ShutdownFile_pjcore_2flive_5fuv_2eproto();

  void InitAsDefaultInstance();
  static LiveUvLoopAsyncCallbackContext* default_instance_;
};
// ===================================================================


// ===================================================================

// LiveUvBuf

// optional uint64 base_ptr = 1;
inline bool LiveUvBuf::has_base_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvBuf::set_has_base_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvBuf::clear_has_base_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvBuf::clear_base_ptr() {
  base_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_base_ptr();
}
inline ::google::protobuf::uint64 LiveUvBuf::base_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvBuf.base_ptr)
  return base_ptr_;
}
inline void LiveUvBuf::set_base_ptr(::google::protobuf::uint64 value) {
  set_has_base_ptr();
  base_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvBuf.base_ptr)
}

// optional uint64 len = 2;
inline bool LiveUvBuf::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvBuf::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvBuf::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvBuf::clear_len() {
  len_ = GOOGLE_ULONGLONG(0);
  clear_has_len();
}
inline ::google::protobuf::uint64 LiveUvBuf::len() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvBuf.len)
  return len_;
}
inline void LiveUvBuf::set_len(::google::protobuf::uint64 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvBuf.len)
}

// -------------------------------------------------------------------

// LiveUvHandle

// optional uint64 ptr = 1;
inline bool LiveUvHandle::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvHandle::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvHandle::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvHandle::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 LiveUvHandle::ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.ptr)
  return ptr_;
}
inline void LiveUvHandle::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.ptr)
}

// optional int32 type = 2;
inline bool LiveUvHandle::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvHandle::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvHandle::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvHandle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LiveUvHandle::type() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.type)
  return type_;
}
inline void LiveUvHandle::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.type)
}

// optional string type_str = 3;
inline bool LiveUvHandle::has_type_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveUvHandle::set_has_type_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveUvHandle::clear_has_type_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveUvHandle::clear_type_str() {
  type_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_str();
}
inline const ::std::string& LiveUvHandle::type_str() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.type_str)
  return type_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveUvHandle::set_type_str(const ::std::string& value) {
  set_has_type_str();
  type_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.type_str)
}
inline void LiveUvHandle::set_type_str(const char* value) {
  set_has_type_str();
  type_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pjcore.LiveUvHandle.type_str)
}
inline void LiveUvHandle::set_type_str(const char* value, size_t size) {
  set_has_type_str();
  type_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pjcore.LiveUvHandle.type_str)
}
inline ::std::string* LiveUvHandle::mutable_type_str() {
  set_has_type_str();
  // @@protoc_insertion_point(field_mutable:pjcore.LiveUvHandle.type_str)
  return type_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveUvHandle::release_type_str() {
  clear_has_type_str();
  return type_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveUvHandle::set_allocated_type_str(::std::string* type_str) {
  if (type_str != NULL) {
    set_has_type_str();
  } else {
    clear_has_type_str();
  }
  type_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_str);
  // @@protoc_insertion_point(field_set_allocated:pjcore.LiveUvHandle.type_str)
}

// optional uint64 close_cb_ptr = 4;
inline bool LiveUvHandle::has_close_cb_ptr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiveUvHandle::set_has_close_cb_ptr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LiveUvHandle::clear_has_close_cb_ptr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LiveUvHandle::clear_close_cb_ptr() {
  close_cb_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_close_cb_ptr();
}
inline ::google::protobuf::uint64 LiveUvHandle::close_cb_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.close_cb_ptr)
  return close_cb_ptr_;
}
inline void LiveUvHandle::set_close_cb_ptr(::google::protobuf::uint64 value) {
  set_has_close_cb_ptr();
  close_cb_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.close_cb_ptr)
}

// optional uint64 data_ptr = 5;
inline bool LiveUvHandle::has_data_ptr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LiveUvHandle::set_has_data_ptr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LiveUvHandle::clear_has_data_ptr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LiveUvHandle::clear_data_ptr() {
  data_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_data_ptr();
}
inline ::google::protobuf::uint64 LiveUvHandle::data_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.data_ptr)
  return data_ptr_;
}
inline void LiveUvHandle::set_data_ptr(::google::protobuf::uint64 value) {
  set_has_data_ptr();
  data_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.data_ptr)
}

// optional uint64 loop_ptr = 6;
inline bool LiveUvHandle::has_loop_ptr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LiveUvHandle::set_has_loop_ptr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LiveUvHandle::clear_has_loop_ptr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LiveUvHandle::clear_loop_ptr() {
  loop_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_loop_ptr();
}
inline ::google::protobuf::uint64 LiveUvHandle::loop_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.loop_ptr)
  return loop_ptr_;
}
inline void LiveUvHandle::set_loop_ptr(::google::protobuf::uint64 value) {
  set_has_loop_ptr();
  loop_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.loop_ptr)
}

// optional int32 flags = 7;
inline bool LiveUvHandle::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LiveUvHandle::set_has_flags() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LiveUvHandle::clear_has_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LiveUvHandle::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 LiveUvHandle::flags() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.flags)
  return flags_;
}
inline void LiveUvHandle::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.flags)
}

// optional bool flag_internal = 8;
inline bool LiveUvHandle::has_flag_internal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LiveUvHandle::set_has_flag_internal() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LiveUvHandle::clear_has_flag_internal() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LiveUvHandle::clear_flag_internal() {
  flag_internal_ = false;
  clear_has_flag_internal();
}
inline bool LiveUvHandle::flag_internal() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.flag_internal)
  return flag_internal_;
}
inline void LiveUvHandle::set_flag_internal(bool value) {
  set_has_flag_internal();
  flag_internal_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.flag_internal)
}

// optional bool flag_active = 9;
inline bool LiveUvHandle::has_flag_active() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LiveUvHandle::set_has_flag_active() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LiveUvHandle::clear_has_flag_active() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LiveUvHandle::clear_flag_active() {
  flag_active_ = false;
  clear_has_flag_active();
}
inline bool LiveUvHandle::flag_active() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.flag_active)
  return flag_active_;
}
inline void LiveUvHandle::set_flag_active(bool value) {
  set_has_flag_active();
  flag_active_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.flag_active)
}

// optional bool flag_ref = 10;
inline bool LiveUvHandle::has_flag_ref() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LiveUvHandle::set_has_flag_ref() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LiveUvHandle::clear_has_flag_ref() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LiveUvHandle::clear_flag_ref() {
  flag_ref_ = false;
  clear_has_flag_ref();
}
inline bool LiveUvHandle::flag_ref() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.flag_ref)
  return flag_ref_;
}
inline void LiveUvHandle::set_flag_ref(bool value) {
  set_has_flag_ref();
  flag_ref_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.flag_ref)
}

// optional bool flag_closing = 11;
inline bool LiveUvHandle::has_flag_closing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LiveUvHandle::set_has_flag_closing() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LiveUvHandle::clear_has_flag_closing() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LiveUvHandle::clear_flag_closing() {
  flag_closing_ = false;
  clear_has_flag_closing();
}
inline bool LiveUvHandle::flag_closing() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvHandle.flag_closing)
  return flag_closing_;
}
inline void LiveUvHandle::set_flag_closing(bool value) {
  set_has_flag_closing();
  flag_closing_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvHandle.flag_closing)
}

// -------------------------------------------------------------------

// LiveUvReq

// optional uint64 ptr = 1;
inline bool LiveUvReq::has_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvReq::set_has_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvReq::clear_has_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvReq::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_ptr();
}
inline ::google::protobuf::uint64 LiveUvReq::ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvReq.ptr)
  return ptr_;
}
inline void LiveUvReq::set_ptr(::google::protobuf::uint64 value) {
  set_has_ptr();
  ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvReq.ptr)
}

// optional int32 type = 2;
inline bool LiveUvReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LiveUvReq::type() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvReq.type)
  return type_;
}
inline void LiveUvReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvReq.type)
}

// optional string type_str = 3;
inline bool LiveUvReq::has_type_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveUvReq::set_has_type_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveUvReq::clear_has_type_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveUvReq::clear_type_str() {
  type_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_str();
}
inline const ::std::string& LiveUvReq::type_str() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvReq.type_str)
  return type_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveUvReq::set_type_str(const ::std::string& value) {
  set_has_type_str();
  type_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pjcore.LiveUvReq.type_str)
}
inline void LiveUvReq::set_type_str(const char* value) {
  set_has_type_str();
  type_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pjcore.LiveUvReq.type_str)
}
inline void LiveUvReq::set_type_str(const char* value, size_t size) {
  set_has_type_str();
  type_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pjcore.LiveUvReq.type_str)
}
inline ::std::string* LiveUvReq::mutable_type_str() {
  set_has_type_str();
  // @@protoc_insertion_point(field_mutable:pjcore.LiveUvReq.type_str)
  return type_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveUvReq::release_type_str() {
  clear_has_type_str();
  return type_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveUvReq::set_allocated_type_str(::std::string* type_str) {
  if (type_str != NULL) {
    set_has_type_str();
  } else {
    clear_has_type_str();
  }
  type_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_str);
  // @@protoc_insertion_point(field_set_allocated:pjcore.LiveUvReq.type_str)
}

// optional uint64 data_ptr = 5;
inline bool LiveUvReq::has_data_ptr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiveUvReq::set_has_data_ptr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LiveUvReq::clear_has_data_ptr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LiveUvReq::clear_data_ptr() {
  data_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_data_ptr();
}
inline ::google::protobuf::uint64 LiveUvReq::data_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvReq.data_ptr)
  return data_ptr_;
}
inline void LiveUvReq::set_data_ptr(::google::protobuf::uint64 value) {
  set_has_data_ptr();
  data_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvReq.data_ptr)
}

// -------------------------------------------------------------------

// LiveUvLoop

// optional uint64 uv_ptr = 1;
inline bool LiveUvLoop::has_uv_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvLoop::set_has_uv_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvLoop::clear_has_uv_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvLoop::clear_uv_ptr() {
  uv_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_uv_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoop::uv_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.uv_ptr)
  return uv_ptr_;
}
inline void LiveUvLoop::set_uv_ptr(::google::protobuf::uint64 value) {
  set_has_uv_ptr();
  uv_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoop.uv_ptr)
}

// optional bool own_loop = 2;
inline bool LiveUvLoop::has_own_loop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvLoop::set_has_own_loop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvLoop::clear_has_own_loop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvLoop::clear_own_loop() {
  own_loop_ = false;
  clear_has_own_loop();
}
inline bool LiveUvLoop::own_loop() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.own_loop)
  return own_loop_;
}
inline void LiveUvLoop::set_own_loop(bool value) {
  set_has_own_loop();
  own_loop_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoop.own_loop)
}

// optional uint64 loop_ptr = 3;
inline bool LiveUvLoop::has_loop_ptr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveUvLoop::set_has_loop_ptr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveUvLoop::clear_has_loop_ptr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveUvLoop::clear_loop_ptr() {
  loop_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_loop_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoop::loop_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.loop_ptr)
  return loop_ptr_;
}
inline void LiveUvLoop::set_loop_ptr(::google::protobuf::uint64 value) {
  set_has_loop_ptr();
  loop_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoop.loop_ptr)
}

// optional uint64 data_ptr = 4;
inline bool LiveUvLoop::has_data_ptr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiveUvLoop::set_has_data_ptr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LiveUvLoop::clear_has_data_ptr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LiveUvLoop::clear_data_ptr() {
  data_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_data_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoop::data_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.data_ptr)
  return data_ptr_;
}
inline void LiveUvLoop::set_data_ptr(::google::protobuf::uint64 value) {
  set_has_data_ptr();
  data_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoop.data_ptr)
}

// optional uint32 active_handles = 5;
inline bool LiveUvLoop::has_active_handles() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LiveUvLoop::set_has_active_handles() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LiveUvLoop::clear_has_active_handles() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LiveUvLoop::clear_active_handles() {
  active_handles_ = 0u;
  clear_has_active_handles();
}
inline ::google::protobuf::uint32 LiveUvLoop::active_handles() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.active_handles)
  return active_handles_;
}
inline void LiveUvLoop::set_active_handles(::google::protobuf::uint32 value) {
  set_has_active_handles();
  active_handles_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoop.active_handles)
}

// optional uint32 stop_flag = 6;
inline bool LiveUvLoop::has_stop_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LiveUvLoop::set_has_stop_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LiveUvLoop::clear_has_stop_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LiveUvLoop::clear_stop_flag() {
  stop_flag_ = 0u;
  clear_has_stop_flag();
}
inline ::google::protobuf::uint32 LiveUvLoop::stop_flag() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.stop_flag)
  return stop_flag_;
}
inline void LiveUvLoop::set_stop_flag(::google::protobuf::uint32 value) {
  set_has_stop_flag();
  stop_flag_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoop.stop_flag)
}

// repeated .pjcore.LiveUvHandle handle_queue = 7;
inline int LiveUvLoop::handle_queue_size() const {
  return handle_queue_.size();
}
inline void LiveUvLoop::clear_handle_queue() {
  handle_queue_.Clear();
}
inline const ::pjcore::LiveUvHandle& LiveUvLoop::handle_queue(int index) const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.handle_queue)
  return handle_queue_.Get(index);
}
inline ::pjcore::LiveUvHandle* LiveUvLoop::mutable_handle_queue(int index) {
  // @@protoc_insertion_point(field_mutable:pjcore.LiveUvLoop.handle_queue)
  return handle_queue_.Mutable(index);
}
inline ::pjcore::LiveUvHandle* LiveUvLoop::add_handle_queue() {
  // @@protoc_insertion_point(field_add:pjcore.LiveUvLoop.handle_queue)
  return handle_queue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvHandle >&
LiveUvLoop::handle_queue() const {
  // @@protoc_insertion_point(field_list:pjcore.LiveUvLoop.handle_queue)
  return handle_queue_;
}
inline ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvHandle >*
LiveUvLoop::mutable_handle_queue() {
  // @@protoc_insertion_point(field_mutable_list:pjcore.LiveUvLoop.handle_queue)
  return &handle_queue_;
}

// repeated .pjcore.LiveUvReq active_reqs = 8;
inline int LiveUvLoop::active_reqs_size() const {
  return active_reqs_.size();
}
inline void LiveUvLoop::clear_active_reqs() {
  active_reqs_.Clear();
}
inline const ::pjcore::LiveUvReq& LiveUvLoop::active_reqs(int index) const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoop.active_reqs)
  return active_reqs_.Get(index);
}
inline ::pjcore::LiveUvReq* LiveUvLoop::mutable_active_reqs(int index) {
  // @@protoc_insertion_point(field_mutable:pjcore.LiveUvLoop.active_reqs)
  return active_reqs_.Mutable(index);
}
inline ::pjcore::LiveUvReq* LiveUvLoop::add_active_reqs() {
  // @@protoc_insertion_point(field_add:pjcore.LiveUvLoop.active_reqs)
  return active_reqs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvReq >&
LiveUvLoop::active_reqs() const {
  // @@protoc_insertion_point(field_list:pjcore.LiveUvLoop.active_reqs)
  return active_reqs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pjcore::LiveUvReq >*
LiveUvLoop::mutable_active_reqs() {
  // @@protoc_insertion_point(field_mutable_list:pjcore.LiveUvLoop.active_reqs)
  return &active_reqs_;
}

// -------------------------------------------------------------------

// LiveIdleLogger

// optional uint64 shared_loop_ptr = 1;
inline bool LiveIdleLogger::has_shared_loop_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveIdleLogger::set_has_shared_loop_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveIdleLogger::clear_has_shared_loop_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveIdleLogger::clear_shared_loop_ptr() {
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_shared_loop_ptr();
}
inline ::google::protobuf::uint64 LiveIdleLogger::shared_loop_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveIdleLogger.shared_loop_ptr)
  return shared_loop_ptr_;
}
inline void LiveIdleLogger::set_shared_loop_ptr(::google::protobuf::uint64 value) {
  set_has_shared_loop_ptr();
  shared_loop_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveIdleLogger.shared_loop_ptr)
}

// optional bool log_once = 2;
inline bool LiveIdleLogger::has_log_once() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveIdleLogger::set_has_log_once() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveIdleLogger::clear_has_log_once() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveIdleLogger::clear_log_once() {
  log_once_ = false;
  clear_has_log_once();
}
inline bool LiveIdleLogger::log_once() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveIdleLogger.log_once)
  return log_once_;
}
inline void LiveIdleLogger::set_log_once(bool value) {
  set_has_log_once();
  log_once_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveIdleLogger.log_once)
}

// optional bool log_always = 3;
inline bool LiveIdleLogger::has_log_always() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveIdleLogger::set_has_log_always() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveIdleLogger::clear_has_log_always() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveIdleLogger::clear_log_always() {
  log_always_ = false;
  clear_has_log_always();
}
inline bool LiveIdleLogger::log_always() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveIdleLogger.log_always)
  return log_always_;
}
inline void LiveIdleLogger::set_log_always(bool value) {
  set_has_log_always();
  log_always_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveIdleLogger.log_always)
}

// optional uint64 idle_handle_ptr = 4;
inline bool LiveIdleLogger::has_idle_handle_ptr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LiveIdleLogger::set_has_idle_handle_ptr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LiveIdleLogger::clear_has_idle_handle_ptr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LiveIdleLogger::clear_idle_handle_ptr() {
  idle_handle_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_idle_handle_ptr();
}
inline ::google::protobuf::uint64 LiveIdleLogger::idle_handle_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveIdleLogger.idle_handle_ptr)
  return idle_handle_ptr_;
}
inline void LiveIdleLogger::set_idle_handle_ptr(::google::protobuf::uint64 value) {
  set_has_idle_handle_ptr();
  idle_handle_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveIdleLogger.idle_handle_ptr)
}

// -------------------------------------------------------------------

// LiveUvLoopFuture

// optional uint64 shared_loop_ptr = 1;
inline bool LiveUvLoopFuture::has_shared_loop_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvLoopFuture::set_has_shared_loop_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvLoopFuture::clear_has_shared_loop_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvLoopFuture::clear_shared_loop_ptr() {
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_shared_loop_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoopFuture::shared_loop_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopFuture.shared_loop_ptr)
  return shared_loop_ptr_;
}
inline void LiveUvLoopFuture::set_shared_loop_ptr(::google::protobuf::uint64 value) {
  set_has_shared_loop_ptr();
  shared_loop_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoopFuture.shared_loop_ptr)
}

// optional int32 pending_count = 2;
inline bool LiveUvLoopFuture::has_pending_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvLoopFuture::set_has_pending_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvLoopFuture::clear_has_pending_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvLoopFuture::clear_pending_count() {
  pending_count_ = 0;
  clear_has_pending_count();
}
inline ::google::protobuf::int32 LiveUvLoopFuture::pending_count() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopFuture.pending_count)
  return pending_count_;
}
inline void LiveUvLoopFuture::set_pending_count(::google::protobuf::int32 value) {
  set_has_pending_count();
  pending_count_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoopFuture.pending_count)
}

// -------------------------------------------------------------------

// LiveUvLoopAsyncClosureContext

// optional uint64 shared_loop_ptr = 1;
inline bool LiveUvLoopAsyncClosureContext::has_shared_loop_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvLoopAsyncClosureContext::set_has_shared_loop_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvLoopAsyncClosureContext::clear_has_shared_loop_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvLoopAsyncClosureContext::clear_shared_loop_ptr() {
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_shared_loop_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoopAsyncClosureContext::shared_loop_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopAsyncClosureContext.shared_loop_ptr)
  return shared_loop_ptr_;
}
inline void LiveUvLoopAsyncClosureContext::set_shared_loop_ptr(::google::protobuf::uint64 value) {
  set_has_shared_loop_ptr();
  shared_loop_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoopAsyncClosureContext.shared_loop_ptr)
}

// optional .pjcore.LiveCallback on_work = 2;
inline bool LiveUvLoopAsyncClosureContext::has_on_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvLoopAsyncClosureContext::set_has_on_work() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvLoopAsyncClosureContext::clear_has_on_work() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvLoopAsyncClosureContext::clear_on_work() {
  if (on_work_ != NULL) on_work_->::pjcore::LiveCallback::Clear();
  clear_has_on_work();
}
inline const ::pjcore::LiveCallback& LiveUvLoopAsyncClosureContext::on_work() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopAsyncClosureContext.on_work)
  return on_work_ != NULL ? *on_work_ : *default_instance_->on_work_;
}
inline ::pjcore::LiveCallback* LiveUvLoopAsyncClosureContext::mutable_on_work() {
  set_has_on_work();
  if (on_work_ == NULL) {
    on_work_ = new ::pjcore::LiveCallback;
  }
  // @@protoc_insertion_point(field_mutable:pjcore.LiveUvLoopAsyncClosureContext.on_work)
  return on_work_;
}
inline ::pjcore::LiveCallback* LiveUvLoopAsyncClosureContext::release_on_work() {
  clear_has_on_work();
  ::pjcore::LiveCallback* temp = on_work_;
  on_work_ = NULL;
  return temp;
}
inline void LiveUvLoopAsyncClosureContext::set_allocated_on_work(::pjcore::LiveCallback* on_work) {
  delete on_work_;
  on_work_ = on_work;
  if (on_work) {
    set_has_on_work();
  } else {
    clear_has_on_work();
  }
  // @@protoc_insertion_point(field_set_allocated:pjcore.LiveUvLoopAsyncClosureContext.on_work)
}

// optional uint64 request_ptr = 3;
inline bool LiveUvLoopAsyncClosureContext::has_request_ptr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveUvLoopAsyncClosureContext::set_has_request_ptr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveUvLoopAsyncClosureContext::clear_has_request_ptr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveUvLoopAsyncClosureContext::clear_request_ptr() {
  request_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_request_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoopAsyncClosureContext::request_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopAsyncClosureContext.request_ptr)
  return request_ptr_;
}
inline void LiveUvLoopAsyncClosureContext::set_request_ptr(::google::protobuf::uint64 value) {
  set_has_request_ptr();
  request_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoopAsyncClosureContext.request_ptr)
}

// -------------------------------------------------------------------

// LiveUvLoopAsyncCallbackContext

// optional uint64 shared_loop_ptr = 1;
inline bool LiveUvLoopAsyncCallbackContext::has_shared_loop_ptr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LiveUvLoopAsyncCallbackContext::set_has_shared_loop_ptr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LiveUvLoopAsyncCallbackContext::clear_has_shared_loop_ptr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LiveUvLoopAsyncCallbackContext::clear_shared_loop_ptr() {
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_shared_loop_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoopAsyncCallbackContext::shared_loop_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopAsyncCallbackContext.shared_loop_ptr)
  return shared_loop_ptr_;
}
inline void LiveUvLoopAsyncCallbackContext::set_shared_loop_ptr(::google::protobuf::uint64 value) {
  set_has_shared_loop_ptr();
  shared_loop_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoopAsyncCallbackContext.shared_loop_ptr)
}

// optional .pjcore.LiveCallback on_work = 2;
inline bool LiveUvLoopAsyncCallbackContext::has_on_work() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LiveUvLoopAsyncCallbackContext::set_has_on_work() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LiveUvLoopAsyncCallbackContext::clear_has_on_work() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LiveUvLoopAsyncCallbackContext::clear_on_work() {
  if (on_work_ != NULL) on_work_->::pjcore::LiveCallback::Clear();
  clear_has_on_work();
}
inline const ::pjcore::LiveCallback& LiveUvLoopAsyncCallbackContext::on_work() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopAsyncCallbackContext.on_work)
  return on_work_ != NULL ? *on_work_ : *default_instance_->on_work_;
}
inline ::pjcore::LiveCallback* LiveUvLoopAsyncCallbackContext::mutable_on_work() {
  set_has_on_work();
  if (on_work_ == NULL) {
    on_work_ = new ::pjcore::LiveCallback;
  }
  // @@protoc_insertion_point(field_mutable:pjcore.LiveUvLoopAsyncCallbackContext.on_work)
  return on_work_;
}
inline ::pjcore::LiveCallback* LiveUvLoopAsyncCallbackContext::release_on_work() {
  clear_has_on_work();
  ::pjcore::LiveCallback* temp = on_work_;
  on_work_ = NULL;
  return temp;
}
inline void LiveUvLoopAsyncCallbackContext::set_allocated_on_work(::pjcore::LiveCallback* on_work) {
  delete on_work_;
  on_work_ = on_work;
  if (on_work) {
    set_has_on_work();
  } else {
    clear_has_on_work();
  }
  // @@protoc_insertion_point(field_set_allocated:pjcore.LiveUvLoopAsyncCallbackContext.on_work)
}

// optional uint64 request_ptr = 3;
inline bool LiveUvLoopAsyncCallbackContext::has_request_ptr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LiveUvLoopAsyncCallbackContext::set_has_request_ptr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LiveUvLoopAsyncCallbackContext::clear_has_request_ptr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LiveUvLoopAsyncCallbackContext::clear_request_ptr() {
  request_ptr_ = GOOGLE_ULONGLONG(0);
  clear_has_request_ptr();
}
inline ::google::protobuf::uint64 LiveUvLoopAsyncCallbackContext::request_ptr() const {
  // @@protoc_insertion_point(field_get:pjcore.LiveUvLoopAsyncCallbackContext.request_ptr)
  return request_ptr_;
}
inline void LiveUvLoopAsyncCallbackContext::set_request_ptr(::google::protobuf::uint64 value) {
  set_has_request_ptr();
  request_ptr_ = value;
  // @@protoc_insertion_point(field_set:pjcore.LiveUvLoopAsyncCallbackContext.request_ptr)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pjcore

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pjcore_2flive_5fuv_2eproto__INCLUDED
