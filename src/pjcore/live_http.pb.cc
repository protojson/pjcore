// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pjcore/live_http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pjcore/live_http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pjcore {

namespace {

const ::google::protobuf::Descriptor* LiveHttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpParser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpParser_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpParserPlusPlus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpParserPlusPlus_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpServerTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpServerTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpServerConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpServerConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpServerCore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpServerCore_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpClientTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpClientTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpClientConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpClientConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpClientConnectionGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpClientConnectionGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpClientCore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpClientCore_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpCallbackHandler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpCallbackHandler_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpPathHandler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpPathHandler_reflection_ = NULL;
const ::google::protobuf::Descriptor* LiveHttpPathHandler_PathHandlerEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LiveHttpPathHandler_PathHandlerEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pjcore_2flive_5fhttp_2eproto() {
  protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pjcore/live_http.proto");
  GOOGLE_CHECK(file != NULL);
  LiveHttpRequest_descriptor_ = file->message_type(0);
  static const int LiveHttpRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, method_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, parsed_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, http_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, content_),
  };
  LiveHttpRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpRequest_descriptor_,
      LiveHttpRequest::default_instance_,
      LiveHttpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpRequest, _internal_metadata_));
  LiveHttpResponse_descriptor_ = file->message_type(1);
  static const int LiveHttpResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, http_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, content_),
  };
  LiveHttpResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpResponse_descriptor_,
      LiveHttpResponse::default_instance_,
      LiveHttpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpResponse, _internal_metadata_));
  LiveHttpParser_descriptor_ = file->message_type(2);
  static const int LiveHttpParser_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flag_chunked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flag_connection_keep_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flag_connection_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flag_trailing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flag_upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, flag_skipbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, header_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, nread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, content_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, http_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, http_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, status_code_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, method_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, http_errno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, http_errno_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, data_ptr_),
  };
  LiveHttpParser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpParser_descriptor_,
      LiveHttpParser::default_instance_,
      LiveHttpParser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpParser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParser, _internal_metadata_));
  LiveHttpParserPlusPlus_descriptor_ = file->message_type(3);
  static const int LiveHttpParserPlusPlus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, pending_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, pending_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, parser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, error_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, response_queue_),
  };
  LiveHttpParserPlusPlus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpParserPlusPlus_descriptor_,
      LiveHttpParserPlusPlus::default_instance_,
      LiveHttpParserPlusPlus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpParserPlusPlus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpParserPlusPlus, _internal_metadata_));
  LiveHttpServerTransaction_descriptor_ = file->message_type(4);
  static const int LiveHttpServerTransaction_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, uv_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, on_write_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, response_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, write_bufs_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, write_bufs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, write_req_ptr_),
  };
  LiveHttpServerTransaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpServerTransaction_descriptor_,
      LiveHttpServerTransaction::default_instance_,
      LiveHttpServerTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpServerTransaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerTransaction, _internal_metadata_));
  LiveHttpServerConnection_descriptor_ = file->message_type(5);
  static const int LiveHttpServerConnection_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, pending_transaction_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, listen_handle_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, handler_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, accept_handle_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, handle_queue_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, write_queue_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, on_closing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, on_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, closing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, parser_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, buffer_ptr_),
  };
  LiveHttpServerConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpServerConnection_descriptor_,
      LiveHttpServerConnection::default_instance_,
      LiveHttpServerConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpServerConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerConnection, _internal_metadata_));
  LiveHttpServerCore_descriptor_ = file->message_type(6);
  static const int LiveHttpServerCore_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, shell_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, pending_connection_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, pending_transaction_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, handler_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, listen_handle_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, on_destroy_),
  };
  LiveHttpServerCore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpServerCore_descriptor_,
      LiveHttpServerCore::default_instance_,
      LiveHttpServerCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpServerCore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServerCore, _internal_metadata_));
  LiveHttpServer_descriptor_ = file->message_type(7);
  static const int LiveHttpServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServer, core_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServer, on_destroy_),
  };
  LiveHttpServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpServer_descriptor_,
      LiveHttpServer::default_instance_,
      LiveHttpServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpServer, _internal_metadata_));
  LiveHttpClientTransaction_descriptor_ = file->message_type(8);
  static const int LiveHttpClientTransaction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientTransaction, uv_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientTransaction, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientTransaction, node_and_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientTransaction, on_response_),
  };
  LiveHttpClientTransaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpClientTransaction_descriptor_,
      LiveHttpClientTransaction::default_instance_,
      LiveHttpClientTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientTransaction, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpClientTransaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientTransaction, _internal_metadata_));
  LiveHttpClientConnection_descriptor_ = file->message_type(9);
  static const int LiveHttpClientConnection_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, addr_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, wait_queue_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, write_queue_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, read_queue_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, on_closing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, on_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, connect_handle_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, connect_req_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, reading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, closing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, parser_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, buffer_ptr_),
  };
  LiveHttpClientConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpClientConnection_descriptor_,
      LiveHttpClientConnection::default_instance_,
      LiveHttpClientConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpClientConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnection, _internal_metadata_));
  LiveHttpClientConnectionGroup_descriptor_ = file->message_type(10);
  static const int LiveHttpClientConnectionGroup_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, pending_resolve_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, pending_connection_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, node_and_service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, resolve_hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, resolve_req_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, addr_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, open_connections_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, closing_connections_ptr_),
  };
  LiveHttpClientConnectionGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpClientConnectionGroup_descriptor_,
      LiveHttpClientConnectionGroup::default_instance_,
      LiveHttpClientConnectionGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpClientConnectionGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientConnectionGroup, _internal_metadata_));
  LiveHttpClientCore_descriptor_ = file->message_type(11);
  static const int LiveHttpClientCore_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, shell_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, pending_resolve_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, pending_connection_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, pending_transaction_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, shared_loop_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, connection_groups_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, on_destroy_),
  };
  LiveHttpClientCore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpClientCore_descriptor_,
      LiveHttpClientCore::default_instance_,
      LiveHttpClientCore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpClientCore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClientCore, _internal_metadata_));
  LiveHttpClient_descriptor_ = file->message_type(12);
  static const int LiveHttpClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClient, core_ptr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClient, on_destroy_),
  };
  LiveHttpClient_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpClient_descriptor_,
      LiveHttpClient::default_instance_,
      LiveHttpClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClient, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpClient),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpClient, _internal_metadata_));
  LiveHttpCallbackHandler_descriptor_ = file->message_type(13);
  static const int LiveHttpCallbackHandler_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpCallbackHandler, callback_),
  };
  LiveHttpCallbackHandler_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpCallbackHandler_descriptor_,
      LiveHttpCallbackHandler::default_instance_,
      LiveHttpCallbackHandler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpCallbackHandler, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpCallbackHandler),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpCallbackHandler, _internal_metadata_));
  LiveHttpPathHandler_descriptor_ = file->message_type(14);
  static const int LiveHttpPathHandler_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler, default_handler_ptr_),
  };
  LiveHttpPathHandler_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpPathHandler_descriptor_,
      LiveHttpPathHandler::default_instance_,
      LiveHttpPathHandler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpPathHandler),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler, _internal_metadata_));
  LiveHttpPathHandler_PathHandlerEntry_descriptor_ = LiveHttpPathHandler_descriptor_->nested_type(0);
  static const int LiveHttpPathHandler_PathHandlerEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler_PathHandlerEntry, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler_PathHandlerEntry, handler_ptr_),
  };
  LiveHttpPathHandler_PathHandlerEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LiveHttpPathHandler_PathHandlerEntry_descriptor_,
      LiveHttpPathHandler_PathHandlerEntry::default_instance_,
      LiveHttpPathHandler_PathHandlerEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler_PathHandlerEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(LiveHttpPathHandler_PathHandlerEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LiveHttpPathHandler_PathHandlerEntry, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pjcore_2flive_5fhttp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpRequest_descriptor_, &LiveHttpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpResponse_descriptor_, &LiveHttpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpParser_descriptor_, &LiveHttpParser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpParserPlusPlus_descriptor_, &LiveHttpParserPlusPlus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpServerTransaction_descriptor_, &LiveHttpServerTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpServerConnection_descriptor_, &LiveHttpServerConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpServerCore_descriptor_, &LiveHttpServerCore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpServer_descriptor_, &LiveHttpServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpClientTransaction_descriptor_, &LiveHttpClientTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpClientConnection_descriptor_, &LiveHttpClientConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpClientConnectionGroup_descriptor_, &LiveHttpClientConnectionGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpClientCore_descriptor_, &LiveHttpClientCore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpClient_descriptor_, &LiveHttpClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpCallbackHandler_descriptor_, &LiveHttpCallbackHandler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpPathHandler_descriptor_, &LiveHttpPathHandler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LiveHttpPathHandler_PathHandlerEntry_descriptor_, &LiveHttpPathHandler_PathHandlerEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pjcore_2flive_5fhttp_2eproto() {
  delete LiveHttpRequest::default_instance_;
  delete LiveHttpRequest_reflection_;
  delete LiveHttpResponse::default_instance_;
  delete LiveHttpResponse_reflection_;
  delete LiveHttpParser::default_instance_;
  delete LiveHttpParser_reflection_;
  delete LiveHttpParserPlusPlus::default_instance_;
  delete LiveHttpParserPlusPlus_reflection_;
  delete LiveHttpServerTransaction::default_instance_;
  delete LiveHttpServerTransaction_reflection_;
  delete LiveHttpServerConnection::default_instance_;
  delete LiveHttpServerConnection_reflection_;
  delete LiveHttpServerCore::default_instance_;
  delete LiveHttpServerCore_reflection_;
  delete LiveHttpServer::default_instance_;
  delete LiveHttpServer_reflection_;
  delete LiveHttpClientTransaction::default_instance_;
  delete LiveHttpClientTransaction_reflection_;
  delete LiveHttpClientConnection::default_instance_;
  delete LiveHttpClientConnection_reflection_;
  delete LiveHttpClientConnectionGroup::default_instance_;
  delete LiveHttpClientConnectionGroup_reflection_;
  delete LiveHttpClientCore::default_instance_;
  delete LiveHttpClientCore_reflection_;
  delete LiveHttpClient::default_instance_;
  delete LiveHttpClient_reflection_;
  delete LiveHttpCallbackHandler::default_instance_;
  delete LiveHttpCallbackHandler_reflection_;
  delete LiveHttpPathHandler::default_instance_;
  delete LiveHttpPathHandler_reflection_;
  delete LiveHttpPathHandler_PathHandlerEntry::default_instance_;
  delete LiveHttpPathHandler_PathHandlerEntry_reflection_;
}

void protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pjcore::protobuf_AddDesc_pjcore_2ferror_2eproto();
  ::pjcore::protobuf_AddDesc_pjcore_2fhttp_2eproto();
  ::pjcore::protobuf_AddDesc_pjcore_2flive_2eproto();
  ::pjcore::protobuf_AddDesc_pjcore_2flive_5faddr_5finfo_2eproto();
  ::pjcore::protobuf_AddDesc_pjcore_2flive_5fuv_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026pjcore/live_http.proto\022\006pjcore\032\022pjcore"
    "/error.proto\032\021pjcore/http.proto\032\021pjcore/"
    "live.proto\032\033pjcore/live_addr_info.proto\032"
    "\024pjcore/live_uv.proto\"\354\001\n\017LiveHttpReques"
    "t\022\013\n\003ptr\030\001 \001(\004\022\016\n\006method\030\002 \001(\005\022\022\n\nmethod"
    "_str\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\022%\n\nparsed_url\030\005 "
    "\001(\0132\021.pjcore.ParsedUrl\022)\n\014http_version\030\006"
    " \001(\0132\023.pjcore.HttpVersion\022#\n\007headers\030\007 \003"
    "(\0132\022.pjcore.HttpHeader\022$\n\007content\030\010 \001(\0132"
    "\023.pjcore.LiveContent\"\302\001\n\020LiveHttpRespons"
    "e\022\013\n\003ptr\030\001 \001(\004\022)\n\014http_version\030\002 \001(\0132\023.p"
    "jcore.HttpVersion\022+\n\013status_code\030\003 \001(\0162\026"
    ".pjcore.HttpStatusCode\022#\n\007headers\030\004 \003(\0132"
    "\022.pjcore.HttpHeader\022$\n\007content\030\005 \001(\0132\023.p"
    "jcore.LiveContent\"\233\004\n\016LiveHttpParser\022\013\n\003"
    "ptr\030\001 \001(\004\022$\n\004type\030\002 \001(\0162\026.pjcore.HttpPar"
    "serType\022\r\n\005flags\030\003 \001(\005\022\024\n\014flag_chunked\030\004"
    " \001(\010\022\"\n\032flag_connection_keep_alive\030\005 \001(\010"
    "\022\035\n\025flag_connection_close\030\006 \001(\010\022\025\n\rflag_"
    "trailing\030\007 \001(\010\022\024\n\014flag_upgrade\030\010 \001(\010\022\025\n\r"
    "flag_skipbody\030\t \001(\010\022\r\n\005state\030\n \001(\005\022\024\n\014he"
    "ader_state\030\013 \001(\005\022\r\n\005index\030\014 \001(\005\022\r\n\005nread"
    "\030\r \001(\r\022\026\n\016content_length\030\016 \001(\004\022\022\n\nhttp_m"
    "ajor\030\017 \001(\r\022\022\n\nhttp_minor\030\020 \001(\r\022\023\n\013status"
    "_code\030\021 \001(\005\022\027\n\017status_code_str\030\022 \001(\t\022\016\n\006"
    "method\030\023 \001(\005\022\022\n\nmethod_str\030\024 \001(\t\022\022\n\nhttp"
    "_errno\030\025 \001(\005\022\036\n\026http_errno_description\030\026"
    " \001(\t\022\017\n\007upgrade\030\027 \001(\r\022\020\n\010data_ptr\030\030 \001(\004\""
    "\301\002\n\026LiveHttpParserPlusPlus\022$\n\004type\030\001 \001(\016"
    "2\026.pjcore.HttpParserType\0220\n\017pending_requ"
    "est\030\002 \001(\0132\027.pjcore.LiveHttpRequest\0222\n\020pe"
    "nding_response\030\003 \001(\0132\030.pjcore.LiveHttpRe"
    "sponse\022&\n\006parser\030\004 \001(\0132\026.pjcore.LiveHttp"
    "Parser\022\021\n\terror_ptr\030\005 \001(\004\022.\n\rrequest_que"
    "ue\030\006 \003(\0132\027.pjcore.LiveHttpRequest\0220\n\016res"
    "ponse_queue\030\007 \003(\0132\030.pjcore.LiveHttpRespo"
    "nse\"\241\002\n\031LiveHttpServerTransaction\022\016\n\006uv_"
    "ptr\030\001 \001(\004\022(\n\007request\030\002 \001(\0132\027.pjcore.Live"
    "HttpRequest\022*\n\010response\030\003 \001(\0132\030.pjcore.L"
    "iveHttpResponse\022/\n\021on_write_complete\030\004 \001"
    "(\0132\024.pjcore.LiveCallback\022\027\n\017response_hea"
    "der\030\005 \001(\t\022\026\n\016write_bufs_ptr\030\006 \001(\004\022%\n\nwri"
    "te_bufs\030\007 \003(\0132\021.pjcore.LiveUvBuf\022\025\n\rwrit"
    "e_req_ptr\030\010 \001(\004\"\223\003\n\030LiveHttpServerConnec"
    "tion\022\027\n\017shared_loop_ptr\030\001 \001(\004\022!\n\031pending"
    "_transaction_count\030\002 \001(\004\022\031\n\021listen_handl"
    "e_ptr\030\003 \001(\004\022\023\n\013handler_ptr\030\004 \001(\004\022\014\n\004open"
    "\030\005 \001(\010\022\031\n\021accept_handle_ptr\030\006 \001(\004\022\030\n\020han"
    "dle_queue_ptr\030\007 \003(\004\022\027\n\017write_queue_ptr\030\010"
    " \003(\004\022(\n\non_closing\030\t \001(\0132\024.pjcore.LiveCa"
    "llback\022&\n\010on_close\030\n \001(\0132\024.pjcore.LiveCa"
    "llback\022\017\n\007reading\030\013 \001(\010\022\017\n\007closing\030\014 \001(\010"
    "\022\022\n\nparser_ptr\030\r \001(\004\022\023\n\013buffer_size\030\016 \001("
    "\004\022\022\n\nbuffer_ptr\030\017 \001(\004\"\227\002\n\022LiveHttpServer"
    "Core\022\021\n\tshell_ptr\030\001 \001(\004\022\014\n\004open\030\002 \001(\004\022 \n"
    "\030pending_connection_count\030\003 \001(\004\022!\n\031pendi"
    "ng_transaction_count\030\004 \001(\004\022(\n\006config\030\006 \001"
    "(\0132\030.pjcore.HttpServerConfig\022\027\n\017shared_l"
    "oop_ptr\030\007 \001(\004\022\023\n\013handler_ptr\030\010 \001(\004\022\031\n\021li"
    "sten_handle_ptr\030\t \001(\004\022(\n\non_destroy\030\n \001("
    "\0132\024.pjcore.LiveCallback\"L\n\016LiveHttpServe"
    "r\022\020\n\010core_ptr\030\001 \001(\004\022(\n\non_destroy\030\002 \001(\0132"
    "\024.pjcore.LiveCallback\"\273\001\n\031LiveHttpClient"
    "Transaction\022\016\n\006uv_ptr\030\001 \001(\004\022(\n\007request\030\002"
    " \001(\0132\027.pjcore.LiveHttpRequest\0229\n\025node_an"
    "d_service_name\030\003 \001(\0132\032.pjcore.NodeAndSer"
    "viceName\022)\n\013on_response\030\004 \001(\0132\024.pjcore.L"
    "iveCallback\"\232\003\n\030LiveHttpClientConnection"
    "\022\027\n\017shared_loop_ptr\030\001 \001(\004\022(\n\naddr_infos\030"
    "\002 \003(\0132\024.pjcore.LiveAddrInfo\022\014\n\004open\030\003 \001("
    "\010\022\026\n\016wait_queue_ptr\030\004 \003(\004\022\027\n\017write_queue"
    "_ptr\030\005 \003(\004\022\026\n\016read_queue_ptr\030\006 \003(\004\022(\n\non"
    "_closing\030\007 \001(\0132\024.pjcore.LiveCallback\022&\n\010"
    "on_close\030\010 \001(\0132\024.pjcore.LiveCallback\022\032\n\022"
    "connect_handle_ptr\030\t \001(\004\022\027\n\017connect_req_"
    "ptr\030\n \001(\004\022\017\n\007reading\030\013 \001(\010\022\017\n\007closing\030\014 "
    "\001(\010\022\022\n\nparser_ptr\030\r \001(\004\022\023\n\013buffer_size\030\016"
    " \001(\004\022\022\n\nbuffer_ptr\030\017 \001(\004\"\343\002\n\035LiveHttpCli"
    "entConnectionGroup\022\027\n\017shared_loop_ptr\030\001 "
    "\001(\004\022\035\n\025pending_resolve_count\030\002 \001(\004\022 \n\030pe"
    "nding_connection_count\030\003 \001(\004\0229\n\025node_and"
    "_service_name\030\004 \001(\0132\032.pjcore.NodeAndServ"
    "iceName\022+\n\rresolve_hints\030\005 \001(\0132\024.pjcore."
    "LiveAddrInfo\022\027\n\017resolve_req_ptr\030\006 \001(\004\022(\n"
    "\naddr_infos\030\007 \003(\0132\024.pjcore.LiveAddrInfo\022"
    "\034\n\024open_connections_ptr\030\010 \003(\004\022\037\n\027closing"
    "_connections_ptr\030\t \003(\004\"\227\002\n\022LiveHttpClien"
    "tCore\022\021\n\tshell_ptr\030\001 \001(\004\022\035\n\025pending_reso"
    "lve_count\030\002 \001(\004\022 \n\030pending_connection_co"
    "unt\030\003 \001(\004\022!\n\031pending_transaction_count\030\004"
    " \001(\004\022(\n\006config\030\005 \001(\0132\030.pjcore.HttpClient"
    "Config\022\027\n\017shared_loop_ptr\030\006 \001(\004\022\035\n\025conne"
    "ction_groups_ptr\030\007 \003(\004\022(\n\non_destroy\030\010 \001"
    "(\0132\024.pjcore.LiveCallback\"L\n\016LiveHttpClie"
    "nt\022\020\n\010core_ptr\030\001 \001(\004\022(\n\non_destroy\030\002 \001(\013"
    "2\024.pjcore.LiveCallback\"A\n\027LiveHttpCallba"
    "ckHandler\022&\n\010callback\030\001 \001(\0132\024.pjcore.Liv"
    "eCallback\"\244\001\n\023LiveHttpPathHandler\0229\n\003map"
    "\030\001 \003(\0132,.pjcore.LiveHttpPathHandler.Path"
    "HandlerEntry\022\033\n\023default_handler_ptr\030\002 \001("
    "\004\0325\n\020PathHandlerEntry\022\014\n\004path\030\001 \001(\t\022\023\n\013h"
    "andler_ptr\030\002 \001(\004", 4056);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pjcore/live_http.proto", &protobuf_RegisterTypes);
  LiveHttpRequest::default_instance_ = new LiveHttpRequest();
  LiveHttpResponse::default_instance_ = new LiveHttpResponse();
  LiveHttpParser::default_instance_ = new LiveHttpParser();
  LiveHttpParserPlusPlus::default_instance_ = new LiveHttpParserPlusPlus();
  LiveHttpServerTransaction::default_instance_ = new LiveHttpServerTransaction();
  LiveHttpServerConnection::default_instance_ = new LiveHttpServerConnection();
  LiveHttpServerCore::default_instance_ = new LiveHttpServerCore();
  LiveHttpServer::default_instance_ = new LiveHttpServer();
  LiveHttpClientTransaction::default_instance_ = new LiveHttpClientTransaction();
  LiveHttpClientConnection::default_instance_ = new LiveHttpClientConnection();
  LiveHttpClientConnectionGroup::default_instance_ = new LiveHttpClientConnectionGroup();
  LiveHttpClientCore::default_instance_ = new LiveHttpClientCore();
  LiveHttpClient::default_instance_ = new LiveHttpClient();
  LiveHttpCallbackHandler::default_instance_ = new LiveHttpCallbackHandler();
  LiveHttpPathHandler::default_instance_ = new LiveHttpPathHandler();
  LiveHttpPathHandler_PathHandlerEntry::default_instance_ = new LiveHttpPathHandler_PathHandlerEntry();
  LiveHttpRequest::default_instance_->InitAsDefaultInstance();
  LiveHttpResponse::default_instance_->InitAsDefaultInstance();
  LiveHttpParser::default_instance_->InitAsDefaultInstance();
  LiveHttpParserPlusPlus::default_instance_->InitAsDefaultInstance();
  LiveHttpServerTransaction::default_instance_->InitAsDefaultInstance();
  LiveHttpServerConnection::default_instance_->InitAsDefaultInstance();
  LiveHttpServerCore::default_instance_->InitAsDefaultInstance();
  LiveHttpServer::default_instance_->InitAsDefaultInstance();
  LiveHttpClientTransaction::default_instance_->InitAsDefaultInstance();
  LiveHttpClientConnection::default_instance_->InitAsDefaultInstance();
  LiveHttpClientConnectionGroup::default_instance_->InitAsDefaultInstance();
  LiveHttpClientCore::default_instance_->InitAsDefaultInstance();
  LiveHttpClient::default_instance_->InitAsDefaultInstance();
  LiveHttpCallbackHandler::default_instance_->InitAsDefaultInstance();
  LiveHttpPathHandler::default_instance_->InitAsDefaultInstance();
  LiveHttpPathHandler_PathHandlerEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pjcore_2flive_5fhttp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pjcore_2flive_5fhttp_2eproto {
  StaticDescriptorInitializer_pjcore_2flive_5fhttp_2eproto() {
    protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  }
} static_descriptor_initializer_pjcore_2flive_5fhttp_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpRequest::kPtrFieldNumber;
const int LiveHttpRequest::kMethodFieldNumber;
const int LiveHttpRequest::kMethodStrFieldNumber;
const int LiveHttpRequest::kUrlFieldNumber;
const int LiveHttpRequest::kParsedUrlFieldNumber;
const int LiveHttpRequest::kHttpVersionFieldNumber;
const int LiveHttpRequest::kHeadersFieldNumber;
const int LiveHttpRequest::kContentFieldNumber;
#endif  // !_MSC_VER

LiveHttpRequest::LiveHttpRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpRequest)
}

void LiveHttpRequest::InitAsDefaultInstance() {
  parsed_url_ = const_cast< ::pjcore::ParsedUrl*>(&::pjcore::ParsedUrl::default_instance());
  http_version_ = const_cast< ::pjcore::HttpVersion*>(&::pjcore::HttpVersion::default_instance());
  content_ = const_cast< ::pjcore::LiveContent*>(&::pjcore::LiveContent::default_instance());
}

LiveHttpRequest::LiveHttpRequest(const LiveHttpRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpRequest)
}

void LiveHttpRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  method_ = 0;
  method_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parsed_url_ = NULL;
  http_version_ = NULL;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpRequest::~LiveHttpRequest() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpRequest)
  SharedDtor();
}

void LiveHttpRequest::SharedDtor() {
  method_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete parsed_url_;
    delete http_version_;
    delete content_;
  }
}

void LiveHttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpRequest_descriptor_;
}

const LiveHttpRequest& LiveHttpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpRequest* LiveHttpRequest::default_instance_ = NULL;

LiveHttpRequest* LiveHttpRequest::New(::google::protobuf::Arena* arena) const {
  LiveHttpRequest* n = new LiveHttpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpRequest::Clear() {
  if (_has_bits_[0 / 32] & 191) {
    ptr_ = GOOGLE_ULONGLONG(0);
    method_ = 0;
    if (has_method_str()) {
      method_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_parsed_url()) {
      if (parsed_url_ != NULL) parsed_url_->::pjcore::ParsedUrl::Clear();
    }
    if (has_http_version()) {
      if (http_version_ != NULL) http_version_->::pjcore::HttpVersion::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::pjcore::LiveContent::Clear();
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_method;
        break;
      }

      // optional int32 method = 2;
      case 2: {
        if (tag == 16) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method_str;
        break;
      }

      // optional string method_str = 3;
      case 3: {
        if (tag == 26) {
         parse_method_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_str().data(), this->method_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpRequest.method_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpRequest.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_parsed_url;
        break;
      }

      // optional .pjcore.ParsedUrl parsed_url = 5;
      case 5: {
        if (tag == 42) {
         parse_parsed_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsed_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_http_version;
        break;
      }

      // optional .pjcore.HttpVersion http_version = 6;
      case 6: {
        if (tag == 50) {
         parse_http_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_headers;
        break;
      }

      // repeated .pjcore.HttpHeader headers = 7;
      case 7: {
        if (tag == 58) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_headers;
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional .pjcore.LiveContent content = 8;
      case 8: {
        if (tag == 66) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpRequest)
  return false;
#undef DO_
}

void LiveHttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpRequest)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // optional int32 method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method(), output);
  }

  // optional string method_str = 3;
  if (has_method_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_str().data(), this->method_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpRequest.method_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method_str(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional .pjcore.ParsedUrl parsed_url = 5;
  if (has_parsed_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->parsed_url_, output);
  }

  // optional .pjcore.HttpVersion http_version = 6;
  if (has_http_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->http_version_, output);
  }

  // repeated .pjcore.HttpHeader headers = 7;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->headers(i), output);
  }

  // optional .pjcore.LiveContent content = 8;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->content_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpRequest)
}

::google::protobuf::uint8* LiveHttpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpRequest)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // optional int32 method = 2;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->method(), target);
  }

  // optional string method_str = 3;
  if (has_method_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_str().data(), this->method_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpRequest.method_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method_str(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional .pjcore.ParsedUrl parsed_url = 5;
  if (has_parsed_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->parsed_url_, target);
  }

  // optional .pjcore.HttpVersion http_version = 6;
  if (has_http_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->http_version_, target);
  }

  // repeated .pjcore.HttpHeader headers = 7;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->headers(i), target);
  }

  // optional .pjcore.LiveContent content = 8;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpRequest)
  return target;
}

int LiveHttpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191) {
    // optional uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // optional int32 method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional string method_str = 3;
    if (has_method_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_str());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .pjcore.ParsedUrl parsed_url = 5;
    if (has_parsed_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parsed_url_);
    }

    // optional .pjcore.HttpVersion http_version = 6;
    if (has_http_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->http_version_);
    }

    // optional .pjcore.LiveContent content = 8;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_);
    }

  }
  // repeated .pjcore.HttpHeader headers = 7;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpRequest::MergeFrom(const LiveHttpRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_method_str()) {
      set_has_method_str();
      method_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_str_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_parsed_url()) {
      mutable_parsed_url()->::pjcore::ParsedUrl::MergeFrom(from.parsed_url());
    }
    if (from.has_http_version()) {
      mutable_http_version()->::pjcore::HttpVersion::MergeFrom(from.http_version());
    }
    if (from.has_content()) {
      mutable_content()->::pjcore::LiveContent::MergeFrom(from.content());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpRequest::CopyFrom(const LiveHttpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpRequest::IsInitialized() const {

  return true;
}

void LiveHttpRequest::Swap(LiveHttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpRequest::InternalSwap(LiveHttpRequest* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(method_, other->method_);
  method_str_.Swap(&other->method_str_);
  url_.Swap(&other->url_);
  std::swap(parsed_url_, other->parsed_url_);
  std::swap(http_version_, other->http_version_);
  headers_.UnsafeArenaSwap(&other->headers_);
  std::swap(content_, other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpRequest_descriptor_;
  metadata.reflection = LiveHttpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpResponse::kPtrFieldNumber;
const int LiveHttpResponse::kHttpVersionFieldNumber;
const int LiveHttpResponse::kStatusCodeFieldNumber;
const int LiveHttpResponse::kHeadersFieldNumber;
const int LiveHttpResponse::kContentFieldNumber;
#endif  // !_MSC_VER

LiveHttpResponse::LiveHttpResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpResponse)
}

void LiveHttpResponse::InitAsDefaultInstance() {
  http_version_ = const_cast< ::pjcore::HttpVersion*>(&::pjcore::HttpVersion::default_instance());
  content_ = const_cast< ::pjcore::LiveContent*>(&::pjcore::LiveContent::default_instance());
}

LiveHttpResponse::LiveHttpResponse(const LiveHttpResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpResponse)
}

void LiveHttpResponse::SharedCtor() {
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  http_version_ = NULL;
  status_code_ = 100;
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpResponse::~LiveHttpResponse() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpResponse)
  SharedDtor();
}

void LiveHttpResponse::SharedDtor() {
  if (this != default_instance_) {
    delete http_version_;
    delete content_;
  }
}

void LiveHttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpResponse_descriptor_;
}

const LiveHttpResponse& LiveHttpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpResponse* LiveHttpResponse::default_instance_ = NULL;

LiveHttpResponse* LiveHttpResponse::New(::google::protobuf::Arena* arena) const {
  LiveHttpResponse* n = new LiveHttpResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpResponse::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    ptr_ = GOOGLE_ULONGLONG(0);
    if (has_http_version()) {
      if (http_version_ != NULL) http_version_->::pjcore::HttpVersion::Clear();
    }
    status_code_ = 100;
    if (has_content()) {
      if (content_ != NULL) content_->::pjcore::LiveContent::Clear();
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_http_version;
        break;
      }

      // optional .pjcore.HttpVersion http_version = 2;
      case 2: {
        if (tag == 18) {
         parse_http_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status_code;
        break;
      }

      // optional .pjcore.HttpStatusCode status_code = 3;
      case 3: {
        if (tag == 24) {
         parse_status_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pjcore::HttpStatusCode_IsValid(value)) {
            set_status_code(static_cast< ::pjcore::HttpStatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headers;
        break;
      }

      // repeated .pjcore.HttpHeader headers = 4;
      case 4: {
        if (tag == 34) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_headers;
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional .pjcore.LiveContent content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpResponse)
  return false;
#undef DO_
}

void LiveHttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpResponse)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // optional .pjcore.HttpVersion http_version = 2;
  if (has_http_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->http_version_, output);
  }

  // optional .pjcore.HttpStatusCode status_code = 3;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status_code(), output);
  }

  // repeated .pjcore.HttpHeader headers = 4;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->headers(i), output);
  }

  // optional .pjcore.LiveContent content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->content_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpResponse)
}

::google::protobuf::uint8* LiveHttpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpResponse)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // optional .pjcore.HttpVersion http_version = 2;
  if (has_http_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->http_version_, target);
  }

  // optional .pjcore.HttpStatusCode status_code = 3;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status_code(), target);
  }

  // repeated .pjcore.HttpHeader headers = 4;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->headers(i), target);
  }

  // optional .pjcore.LiveContent content = 5;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->content_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpResponse)
  return target;
}

int LiveHttpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23) {
    // optional uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // optional .pjcore.HttpVersion http_version = 2;
    if (has_http_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->http_version_);
    }

    // optional .pjcore.HttpStatusCode status_code = 3;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_code());
    }

    // optional .pjcore.LiveContent content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_);
    }

  }
  // repeated .pjcore.HttpHeader headers = 4;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpResponse::MergeFrom(const LiveHttpResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_http_version()) {
      mutable_http_version()->::pjcore::HttpVersion::MergeFrom(from.http_version());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_content()) {
      mutable_content()->::pjcore::LiveContent::MergeFrom(from.content());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpResponse::CopyFrom(const LiveHttpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpResponse::IsInitialized() const {

  return true;
}

void LiveHttpResponse::Swap(LiveHttpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpResponse::InternalSwap(LiveHttpResponse* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(http_version_, other->http_version_);
  std::swap(status_code_, other->status_code_);
  headers_.UnsafeArenaSwap(&other->headers_);
  std::swap(content_, other->content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpResponse_descriptor_;
  metadata.reflection = LiveHttpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpParser::kPtrFieldNumber;
const int LiveHttpParser::kTypeFieldNumber;
const int LiveHttpParser::kFlagsFieldNumber;
const int LiveHttpParser::kFlagChunkedFieldNumber;
const int LiveHttpParser::kFlagConnectionKeepAliveFieldNumber;
const int LiveHttpParser::kFlagConnectionCloseFieldNumber;
const int LiveHttpParser::kFlagTrailingFieldNumber;
const int LiveHttpParser::kFlagUpgradeFieldNumber;
const int LiveHttpParser::kFlagSkipbodyFieldNumber;
const int LiveHttpParser::kStateFieldNumber;
const int LiveHttpParser::kHeaderStateFieldNumber;
const int LiveHttpParser::kIndexFieldNumber;
const int LiveHttpParser::kNreadFieldNumber;
const int LiveHttpParser::kContentLengthFieldNumber;
const int LiveHttpParser::kHttpMajorFieldNumber;
const int LiveHttpParser::kHttpMinorFieldNumber;
const int LiveHttpParser::kStatusCodeFieldNumber;
const int LiveHttpParser::kStatusCodeStrFieldNumber;
const int LiveHttpParser::kMethodFieldNumber;
const int LiveHttpParser::kMethodStrFieldNumber;
const int LiveHttpParser::kHttpErrnoFieldNumber;
const int LiveHttpParser::kHttpErrnoDescriptionFieldNumber;
const int LiveHttpParser::kUpgradeFieldNumber;
const int LiveHttpParser::kDataPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpParser::LiveHttpParser()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpParser)
}

void LiveHttpParser::InitAsDefaultInstance() {
}

LiveHttpParser::LiveHttpParser(const LiveHttpParser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpParser)
}

void LiveHttpParser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ptr_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  flags_ = 0;
  flag_chunked_ = false;
  flag_connection_keep_alive_ = false;
  flag_connection_close_ = false;
  flag_trailing_ = false;
  flag_upgrade_ = false;
  flag_skipbody_ = false;
  state_ = 0;
  header_state_ = 0;
  index_ = 0;
  nread_ = 0u;
  content_length_ = GOOGLE_ULONGLONG(0);
  http_major_ = 0u;
  http_minor_ = 0u;
  status_code_ = 0;
  status_code_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
  method_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_errno_ = 0;
  http_errno_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgrade_ = 0u;
  data_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpParser::~LiveHttpParser() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpParser)
  SharedDtor();
}

void LiveHttpParser::SharedDtor() {
  status_code_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  http_errno_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LiveHttpParser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpParser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpParser_descriptor_;
}

const LiveHttpParser& LiveHttpParser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpParser* LiveHttpParser::default_instance_ = NULL;

LiveHttpParser* LiveHttpParser::New(::google::protobuf::Arena* arena) const {
  LiveHttpParser* n = new LiveHttpParser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpParser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveHttpParser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ptr_, flag_upgrade_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(flag_skipbody_, http_minor_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(status_code_, method_);
    ZR_(http_errno_, data_ptr_);
    if (has_status_code_str()) {
      status_code_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_method_str()) {
      method_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_http_errno_description()) {
      http_errno_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpParser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpParser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
          set_has_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .pjcore.HttpParserType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pjcore::HttpParserType_IsValid(value)) {
            set_type(static_cast< ::pjcore::HttpParserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag_chunked;
        break;
      }

      // optional bool flag_chunked = 4;
      case 4: {
        if (tag == 32) {
         parse_flag_chunked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_chunked_)));
          set_has_flag_chunked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag_connection_keep_alive;
        break;
      }

      // optional bool flag_connection_keep_alive = 5;
      case 5: {
        if (tag == 40) {
         parse_flag_connection_keep_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_connection_keep_alive_)));
          set_has_flag_connection_keep_alive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flag_connection_close;
        break;
      }

      // optional bool flag_connection_close = 6;
      case 6: {
        if (tag == 48) {
         parse_flag_connection_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_connection_close_)));
          set_has_flag_connection_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flag_trailing;
        break;
      }

      // optional bool flag_trailing = 7;
      case 7: {
        if (tag == 56) {
         parse_flag_trailing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_trailing_)));
          set_has_flag_trailing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flag_upgrade;
        break;
      }

      // optional bool flag_upgrade = 8;
      case 8: {
        if (tag == 64) {
         parse_flag_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_upgrade_)));
          set_has_flag_upgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_flag_skipbody;
        break;
      }

      // optional bool flag_skipbody = 9;
      case 9: {
        if (tag == 72) {
         parse_flag_skipbody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_skipbody_)));
          set_has_flag_skipbody();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional int32 state = 10;
      case 10: {
        if (tag == 80) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_header_state;
        break;
      }

      // optional int32 header_state = 11;
      case 11: {
        if (tag == 88) {
         parse_header_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &header_state_)));
          set_has_header_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_index;
        break;
      }

      // optional int32 index = 12;
      case 12: {
        if (tag == 96) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_nread;
        break;
      }

      // optional uint32 nread = 13;
      case 13: {
        if (tag == 104) {
         parse_nread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nread_)));
          set_has_nread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_content_length;
        break;
      }

      // optional uint64 content_length = 14;
      case 14: {
        if (tag == 112) {
         parse_content_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &content_length_)));
          set_has_content_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_http_major;
        break;
      }

      // optional uint32 http_major = 15;
      case 15: {
        if (tag == 120) {
         parse_http_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_major_)));
          set_has_http_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_http_minor;
        break;
      }

      // optional uint32 http_minor = 16;
      case 16: {
        if (tag == 128) {
         parse_http_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_minor_)));
          set_has_http_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_status_code;
        break;
      }

      // optional int32 status_code = 17;
      case 17: {
        if (tag == 136) {
         parse_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_status_code_str;
        break;
      }

      // optional string status_code_str = 18;
      case 18: {
        if (tag == 146) {
         parse_status_code_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_code_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_code_str().data(), this->status_code_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpParser.status_code_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_method;
        break;
      }

      // optional int32 method = 19;
      case 19: {
        if (tag == 152) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_method_str;
        break;
      }

      // optional string method_str = 20;
      case 20: {
        if (tag == 162) {
         parse_method_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_str().data(), this->method_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpParser.method_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_http_errno;
        break;
      }

      // optional int32 http_errno = 21;
      case 21: {
        if (tag == 168) {
         parse_http_errno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_errno_)));
          set_has_http_errno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_http_errno_description;
        break;
      }

      // optional string http_errno_description = 22;
      case 22: {
        if (tag == 178) {
         parse_http_errno_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_errno_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->http_errno_description().data(), this->http_errno_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpParser.http_errno_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_upgrade;
        break;
      }

      // optional uint32 upgrade = 23;
      case 23: {
        if (tag == 184) {
         parse_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_)));
          set_has_upgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_data_ptr;
        break;
      }

      // optional uint64 data_ptr = 24;
      case 24: {
        if (tag == 192) {
         parse_data_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_ptr_)));
          set_has_data_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpParser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpParser)
  return false;
#undef DO_
}

void LiveHttpParser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpParser)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // optional .pjcore.HttpParserType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // optional bool flag_chunked = 4;
  if (has_flag_chunked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag_chunked(), output);
  }

  // optional bool flag_connection_keep_alive = 5;
  if (has_flag_connection_keep_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flag_connection_keep_alive(), output);
  }

  // optional bool flag_connection_close = 6;
  if (has_flag_connection_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->flag_connection_close(), output);
  }

  // optional bool flag_trailing = 7;
  if (has_flag_trailing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->flag_trailing(), output);
  }

  // optional bool flag_upgrade = 8;
  if (has_flag_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->flag_upgrade(), output);
  }

  // optional bool flag_skipbody = 9;
  if (has_flag_skipbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->flag_skipbody(), output);
  }

  // optional int32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }

  // optional int32 header_state = 11;
  if (has_header_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->header_state(), output);
  }

  // optional int32 index = 12;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->index(), output);
  }

  // optional uint32 nread = 13;
  if (has_nread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nread(), output);
  }

  // optional uint64 content_length = 14;
  if (has_content_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->content_length(), output);
  }

  // optional uint32 http_major = 15;
  if (has_http_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->http_major(), output);
  }

  // optional uint32 http_minor = 16;
  if (has_http_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->http_minor(), output);
  }

  // optional int32 status_code = 17;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->status_code(), output);
  }

  // optional string status_code_str = 18;
  if (has_status_code_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_code_str().data(), this->status_code_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpParser.status_code_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->status_code_str(), output);
  }

  // optional int32 method = 19;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->method(), output);
  }

  // optional string method_str = 20;
  if (has_method_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_str().data(), this->method_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpParser.method_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->method_str(), output);
  }

  // optional int32 http_errno = 21;
  if (has_http_errno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->http_errno(), output);
  }

  // optional string http_errno_description = 22;
  if (has_http_errno_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_errno_description().data(), this->http_errno_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpParser.http_errno_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->http_errno_description(), output);
  }

  // optional uint32 upgrade = 23;
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->upgrade(), output);
  }

  // optional uint64 data_ptr = 24;
  if (has_data_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->data_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpParser)
}

::google::protobuf::uint8* LiveHttpParser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpParser)
  // optional uint64 ptr = 1;
  if (has_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // optional .pjcore.HttpParserType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // optional bool flag_chunked = 4;
  if (has_flag_chunked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag_chunked(), target);
  }

  // optional bool flag_connection_keep_alive = 5;
  if (has_flag_connection_keep_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flag_connection_keep_alive(), target);
  }

  // optional bool flag_connection_close = 6;
  if (has_flag_connection_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->flag_connection_close(), target);
  }

  // optional bool flag_trailing = 7;
  if (has_flag_trailing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->flag_trailing(), target);
  }

  // optional bool flag_upgrade = 8;
  if (has_flag_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->flag_upgrade(), target);
  }

  // optional bool flag_skipbody = 9;
  if (has_flag_skipbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->flag_skipbody(), target);
  }

  // optional int32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }

  // optional int32 header_state = 11;
  if (has_header_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->header_state(), target);
  }

  // optional int32 index = 12;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->index(), target);
  }

  // optional uint32 nread = 13;
  if (has_nread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nread(), target);
  }

  // optional uint64 content_length = 14;
  if (has_content_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->content_length(), target);
  }

  // optional uint32 http_major = 15;
  if (has_http_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->http_major(), target);
  }

  // optional uint32 http_minor = 16;
  if (has_http_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->http_minor(), target);
  }

  // optional int32 status_code = 17;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->status_code(), target);
  }

  // optional string status_code_str = 18;
  if (has_status_code_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_code_str().data(), this->status_code_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpParser.status_code_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->status_code_str(), target);
  }

  // optional int32 method = 19;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->method(), target);
  }

  // optional string method_str = 20;
  if (has_method_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_str().data(), this->method_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpParser.method_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->method_str(), target);
  }

  // optional int32 http_errno = 21;
  if (has_http_errno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->http_errno(), target);
  }

  // optional string http_errno_description = 22;
  if (has_http_errno_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->http_errno_description().data(), this->http_errno_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpParser.http_errno_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->http_errno_description(), target);
  }

  // optional uint32 upgrade = 23;
  if (has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->upgrade(), target);
  }

  // optional uint64 data_ptr = 24;
  if (has_data_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->data_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpParser)
  return target;
}

int LiveHttpParser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional uint64 ptr = 1;
    if (has_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ptr());
    }

    // optional .pjcore.HttpParserType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional bool flag_chunked = 4;
    if (has_flag_chunked()) {
      total_size += 1 + 1;
    }

    // optional bool flag_connection_keep_alive = 5;
    if (has_flag_connection_keep_alive()) {
      total_size += 1 + 1;
    }

    // optional bool flag_connection_close = 6;
    if (has_flag_connection_close()) {
      total_size += 1 + 1;
    }

    // optional bool flag_trailing = 7;
    if (has_flag_trailing()) {
      total_size += 1 + 1;
    }

    // optional bool flag_upgrade = 8;
    if (has_flag_upgrade()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280) {
    // optional bool flag_skipbody = 9;
    if (has_flag_skipbody()) {
      total_size += 1 + 1;
    }

    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 header_state = 11;
    if (has_header_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->header_state());
    }

    // optional int32 index = 12;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint32 nread = 13;
    if (has_nread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nread());
    }

    // optional uint64 content_length = 14;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->content_length());
    }

    // optional uint32 http_major = 15;
    if (has_http_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_major());
    }

    // optional uint32 http_minor = 16;
    if (has_http_minor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_minor());
    }

  }
  if (_has_bits_[16 / 32] & 16711680) {
    // optional int32 status_code = 17;
    if (has_status_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional string status_code_str = 18;
    if (has_status_code_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_code_str());
    }

    // optional int32 method = 19;
    if (has_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional string method_str = 20;
    if (has_method_str()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_str());
    }

    // optional int32 http_errno = 21;
    if (has_http_errno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_errno());
    }

    // optional string http_errno_description = 22;
    if (has_http_errno_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_errno_description());
    }

    // optional uint32 upgrade = 23;
    if (has_upgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade());
    }

    // optional uint64 data_ptr = 24;
    if (has_data_ptr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_ptr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpParser::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpParser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpParser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpParser::MergeFrom(const LiveHttpParser& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr()) {
      set_ptr(from.ptr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_flag_chunked()) {
      set_flag_chunked(from.flag_chunked());
    }
    if (from.has_flag_connection_keep_alive()) {
      set_flag_connection_keep_alive(from.flag_connection_keep_alive());
    }
    if (from.has_flag_connection_close()) {
      set_flag_connection_close(from.flag_connection_close());
    }
    if (from.has_flag_trailing()) {
      set_flag_trailing(from.flag_trailing());
    }
    if (from.has_flag_upgrade()) {
      set_flag_upgrade(from.flag_upgrade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag_skipbody()) {
      set_flag_skipbody(from.flag_skipbody());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_header_state()) {
      set_header_state(from.header_state());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_nread()) {
      set_nread(from.nread());
    }
    if (from.has_content_length()) {
      set_content_length(from.content_length());
    }
    if (from.has_http_major()) {
      set_http_major(from.http_major());
    }
    if (from.has_http_minor()) {
      set_http_minor(from.http_minor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_status_code_str()) {
      set_has_status_code_str();
      status_code_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_code_str_);
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_method_str()) {
      set_has_method_str();
      method_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_str_);
    }
    if (from.has_http_errno()) {
      set_http_errno(from.http_errno());
    }
    if (from.has_http_errno_description()) {
      set_has_http_errno_description();
      http_errno_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.http_errno_description_);
    }
    if (from.has_upgrade()) {
      set_upgrade(from.upgrade());
    }
    if (from.has_data_ptr()) {
      set_data_ptr(from.data_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpParser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpParser::CopyFrom(const LiveHttpParser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpParser::IsInitialized() const {

  return true;
}

void LiveHttpParser::Swap(LiveHttpParser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpParser::InternalSwap(LiveHttpParser* other) {
  std::swap(ptr_, other->ptr_);
  std::swap(type_, other->type_);
  std::swap(flags_, other->flags_);
  std::swap(flag_chunked_, other->flag_chunked_);
  std::swap(flag_connection_keep_alive_, other->flag_connection_keep_alive_);
  std::swap(flag_connection_close_, other->flag_connection_close_);
  std::swap(flag_trailing_, other->flag_trailing_);
  std::swap(flag_upgrade_, other->flag_upgrade_);
  std::swap(flag_skipbody_, other->flag_skipbody_);
  std::swap(state_, other->state_);
  std::swap(header_state_, other->header_state_);
  std::swap(index_, other->index_);
  std::swap(nread_, other->nread_);
  std::swap(content_length_, other->content_length_);
  std::swap(http_major_, other->http_major_);
  std::swap(http_minor_, other->http_minor_);
  std::swap(status_code_, other->status_code_);
  status_code_str_.Swap(&other->status_code_str_);
  std::swap(method_, other->method_);
  method_str_.Swap(&other->method_str_);
  std::swap(http_errno_, other->http_errno_);
  http_errno_description_.Swap(&other->http_errno_description_);
  std::swap(upgrade_, other->upgrade_);
  std::swap(data_ptr_, other->data_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpParser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpParser_descriptor_;
  metadata.reflection = LiveHttpParser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpParserPlusPlus::kTypeFieldNumber;
const int LiveHttpParserPlusPlus::kPendingRequestFieldNumber;
const int LiveHttpParserPlusPlus::kPendingResponseFieldNumber;
const int LiveHttpParserPlusPlus::kParserFieldNumber;
const int LiveHttpParserPlusPlus::kErrorPtrFieldNumber;
const int LiveHttpParserPlusPlus::kRequestQueueFieldNumber;
const int LiveHttpParserPlusPlus::kResponseQueueFieldNumber;
#endif  // !_MSC_VER

LiveHttpParserPlusPlus::LiveHttpParserPlusPlus()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpParserPlusPlus)
}

void LiveHttpParserPlusPlus::InitAsDefaultInstance() {
  pending_request_ = const_cast< ::pjcore::LiveHttpRequest*>(&::pjcore::LiveHttpRequest::default_instance());
  pending_response_ = const_cast< ::pjcore::LiveHttpResponse*>(&::pjcore::LiveHttpResponse::default_instance());
  parser_ = const_cast< ::pjcore::LiveHttpParser*>(&::pjcore::LiveHttpParser::default_instance());
}

LiveHttpParserPlusPlus::LiveHttpParserPlusPlus(const LiveHttpParserPlusPlus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpParserPlusPlus)
}

void LiveHttpParserPlusPlus::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pending_request_ = NULL;
  pending_response_ = NULL;
  parser_ = NULL;
  error_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpParserPlusPlus::~LiveHttpParserPlusPlus() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpParserPlusPlus)
  SharedDtor();
}

void LiveHttpParserPlusPlus::SharedDtor() {
  if (this != default_instance_) {
    delete pending_request_;
    delete pending_response_;
    delete parser_;
  }
}

void LiveHttpParserPlusPlus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpParserPlusPlus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpParserPlusPlus_descriptor_;
}

const LiveHttpParserPlusPlus& LiveHttpParserPlusPlus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpParserPlusPlus* LiveHttpParserPlusPlus::default_instance_ = NULL;

LiveHttpParserPlusPlus* LiveHttpParserPlusPlus::New(::google::protobuf::Arena* arena) const {
  LiveHttpParserPlusPlus* n = new LiveHttpParserPlusPlus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpParserPlusPlus::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    type_ = 0;
    if (has_pending_request()) {
      if (pending_request_ != NULL) pending_request_->::pjcore::LiveHttpRequest::Clear();
    }
    if (has_pending_response()) {
      if (pending_response_ != NULL) pending_response_->::pjcore::LiveHttpResponse::Clear();
    }
    if (has_parser()) {
      if (parser_ != NULL) parser_->::pjcore::LiveHttpParser::Clear();
    }
    error_ptr_ = GOOGLE_ULONGLONG(0);
  }
  request_queue_.Clear();
  response_queue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpParserPlusPlus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpParserPlusPlus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pjcore.HttpParserType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pjcore::HttpParserType_IsValid(value)) {
            set_type(static_cast< ::pjcore::HttpParserType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pending_request;
        break;
      }

      // optional .pjcore.LiveHttpRequest pending_request = 2;
      case 2: {
        if (tag == 18) {
         parse_pending_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pending_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pending_response;
        break;
      }

      // optional .pjcore.LiveHttpResponse pending_response = 3;
      case 3: {
        if (tag == 26) {
         parse_pending_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pending_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parser;
        break;
      }

      // optional .pjcore.LiveHttpParser parser = 4;
      case 4: {
        if (tag == 34) {
         parse_parser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_error_ptr;
        break;
      }

      // optional uint64 error_ptr = 5;
      case 5: {
        if (tag == 40) {
         parse_error_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &error_ptr_)));
          set_has_error_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_request_queue;
        break;
      }

      // repeated .pjcore.LiveHttpRequest request_queue = 6;
      case 6: {
        if (tag == 50) {
         parse_request_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_request_queue;
        if (input->ExpectTag(58)) goto parse_response_queue;
        break;
      }

      // repeated .pjcore.LiveHttpResponse response_queue = 7;
      case 7: {
        if (tag == 58) {
         parse_response_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_response_queue;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpParserPlusPlus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpParserPlusPlus)
  return false;
#undef DO_
}

void LiveHttpParserPlusPlus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpParserPlusPlus)
  // optional .pjcore.HttpParserType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pjcore.LiveHttpRequest pending_request = 2;
  if (has_pending_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pending_request_, output);
  }

  // optional .pjcore.LiveHttpResponse pending_response = 3;
  if (has_pending_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pending_response_, output);
  }

  // optional .pjcore.LiveHttpParser parser = 4;
  if (has_parser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parser_, output);
  }

  // optional uint64 error_ptr = 5;
  if (has_error_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->error_ptr(), output);
  }

  // repeated .pjcore.LiveHttpRequest request_queue = 6;
  for (unsigned int i = 0, n = this->request_queue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request_queue(i), output);
  }

  // repeated .pjcore.LiveHttpResponse response_queue = 7;
  for (unsigned int i = 0, n = this->response_queue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->response_queue(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpParserPlusPlus)
}

::google::protobuf::uint8* LiveHttpParserPlusPlus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpParserPlusPlus)
  // optional .pjcore.HttpParserType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pjcore.LiveHttpRequest pending_request = 2;
  if (has_pending_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pending_request_, target);
  }

  // optional .pjcore.LiveHttpResponse pending_response = 3;
  if (has_pending_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->pending_response_, target);
  }

  // optional .pjcore.LiveHttpParser parser = 4;
  if (has_parser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->parser_, target);
  }

  // optional uint64 error_ptr = 5;
  if (has_error_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->error_ptr(), target);
  }

  // repeated .pjcore.LiveHttpRequest request_queue = 6;
  for (unsigned int i = 0, n = this->request_queue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->request_queue(i), target);
  }

  // repeated .pjcore.LiveHttpResponse response_queue = 7;
  for (unsigned int i = 0, n = this->response_queue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->response_queue(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpParserPlusPlus)
  return target;
}

int LiveHttpParserPlusPlus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional .pjcore.HttpParserType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pjcore.LiveHttpRequest pending_request = 2;
    if (has_pending_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pending_request_);
    }

    // optional .pjcore.LiveHttpResponse pending_response = 3;
    if (has_pending_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pending_response_);
    }

    // optional .pjcore.LiveHttpParser parser = 4;
    if (has_parser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->parser_);
    }

    // optional uint64 error_ptr = 5;
    if (has_error_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->error_ptr());
    }

  }
  // repeated .pjcore.LiveHttpRequest request_queue = 6;
  total_size += 1 * this->request_queue_size();
  for (int i = 0; i < this->request_queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->request_queue(i));
  }

  // repeated .pjcore.LiveHttpResponse response_queue = 7;
  total_size += 1 * this->response_queue_size();
  for (int i = 0; i < this->response_queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->response_queue(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpParserPlusPlus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpParserPlusPlus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpParserPlusPlus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpParserPlusPlus::MergeFrom(const LiveHttpParserPlusPlus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  request_queue_.MergeFrom(from.request_queue_);
  response_queue_.MergeFrom(from.response_queue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pending_request()) {
      mutable_pending_request()->::pjcore::LiveHttpRequest::MergeFrom(from.pending_request());
    }
    if (from.has_pending_response()) {
      mutable_pending_response()->::pjcore::LiveHttpResponse::MergeFrom(from.pending_response());
    }
    if (from.has_parser()) {
      mutable_parser()->::pjcore::LiveHttpParser::MergeFrom(from.parser());
    }
    if (from.has_error_ptr()) {
      set_error_ptr(from.error_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpParserPlusPlus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpParserPlusPlus::CopyFrom(const LiveHttpParserPlusPlus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpParserPlusPlus::IsInitialized() const {

  return true;
}

void LiveHttpParserPlusPlus::Swap(LiveHttpParserPlusPlus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpParserPlusPlus::InternalSwap(LiveHttpParserPlusPlus* other) {
  std::swap(type_, other->type_);
  std::swap(pending_request_, other->pending_request_);
  std::swap(pending_response_, other->pending_response_);
  std::swap(parser_, other->parser_);
  std::swap(error_ptr_, other->error_ptr_);
  request_queue_.UnsafeArenaSwap(&other->request_queue_);
  response_queue_.UnsafeArenaSwap(&other->response_queue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpParserPlusPlus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpParserPlusPlus_descriptor_;
  metadata.reflection = LiveHttpParserPlusPlus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpServerTransaction::kUvPtrFieldNumber;
const int LiveHttpServerTransaction::kRequestFieldNumber;
const int LiveHttpServerTransaction::kResponseFieldNumber;
const int LiveHttpServerTransaction::kOnWriteCompleteFieldNumber;
const int LiveHttpServerTransaction::kResponseHeaderFieldNumber;
const int LiveHttpServerTransaction::kWriteBufsPtrFieldNumber;
const int LiveHttpServerTransaction::kWriteBufsFieldNumber;
const int LiveHttpServerTransaction::kWriteReqPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpServerTransaction::LiveHttpServerTransaction()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpServerTransaction)
}

void LiveHttpServerTransaction::InitAsDefaultInstance() {
  request_ = const_cast< ::pjcore::LiveHttpRequest*>(&::pjcore::LiveHttpRequest::default_instance());
  response_ = const_cast< ::pjcore::LiveHttpResponse*>(&::pjcore::LiveHttpResponse::default_instance());
  on_write_complete_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpServerTransaction::LiveHttpServerTransaction(const LiveHttpServerTransaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpServerTransaction)
}

void LiveHttpServerTransaction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uv_ptr_ = GOOGLE_ULONGLONG(0);
  request_ = NULL;
  response_ = NULL;
  on_write_complete_ = NULL;
  response_header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  write_bufs_ptr_ = GOOGLE_ULONGLONG(0);
  write_req_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpServerTransaction::~LiveHttpServerTransaction() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpServerTransaction)
  SharedDtor();
}

void LiveHttpServerTransaction::SharedDtor() {
  response_header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete request_;
    delete response_;
    delete on_write_complete_;
  }
}

void LiveHttpServerTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpServerTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpServerTransaction_descriptor_;
}

const LiveHttpServerTransaction& LiveHttpServerTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpServerTransaction* LiveHttpServerTransaction::default_instance_ = NULL;

LiveHttpServerTransaction* LiveHttpServerTransaction::New(::google::protobuf::Arena* arena) const {
  LiveHttpServerTransaction* n = new LiveHttpServerTransaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpServerTransaction::Clear() {
  if (_has_bits_[0 / 32] & 191) {
    uv_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_request()) {
      if (request_ != NULL) request_->::pjcore::LiveHttpRequest::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::pjcore::LiveHttpResponse::Clear();
    }
    if (has_on_write_complete()) {
      if (on_write_complete_ != NULL) on_write_complete_->::pjcore::LiveCallback::Clear();
    }
    if (has_response_header()) {
      response_header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    write_bufs_ptr_ = GOOGLE_ULONGLONG(0);
    write_req_ptr_ = GOOGLE_ULONGLONG(0);
  }
  write_bufs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpServerTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpServerTransaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uv_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uv_ptr_)));
          set_has_uv_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .pjcore.LiveHttpRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional .pjcore.LiveHttpResponse response = 3;
      case 3: {
        if (tag == 26) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_on_write_complete;
        break;
      }

      // optional .pjcore.LiveCallback on_write_complete = 4;
      case 4: {
        if (tag == 34) {
         parse_on_write_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_write_complete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_response_header;
        break;
      }

      // optional string response_header = 5;
      case 5: {
        if (tag == 42) {
         parse_response_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_header().data(), this->response_header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpServerTransaction.response_header");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_write_bufs_ptr;
        break;
      }

      // optional uint64 write_bufs_ptr = 6;
      case 6: {
        if (tag == 48) {
         parse_write_bufs_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_bufs_ptr_)));
          set_has_write_bufs_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_write_bufs;
        break;
      }

      // repeated .pjcore.LiveUvBuf write_bufs = 7;
      case 7: {
        if (tag == 58) {
         parse_write_bufs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_write_bufs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_write_bufs;
        if (input->ExpectTag(64)) goto parse_write_req_ptr;
        break;
      }

      // optional uint64 write_req_ptr = 8;
      case 8: {
        if (tag == 64) {
         parse_write_req_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_req_ptr_)));
          set_has_write_req_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpServerTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpServerTransaction)
  return false;
#undef DO_
}

void LiveHttpServerTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpServerTransaction)
  // optional uint64 uv_ptr = 1;
  if (has_uv_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uv_ptr(), output);
  }

  // optional .pjcore.LiveHttpRequest request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // optional .pjcore.LiveHttpResponse response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->response_, output);
  }

  // optional .pjcore.LiveCallback on_write_complete = 4;
  if (has_on_write_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->on_write_complete_, output);
  }

  // optional string response_header = 5;
  if (has_response_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_header().data(), this->response_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpServerTransaction.response_header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->response_header(), output);
  }

  // optional uint64 write_bufs_ptr = 6;
  if (has_write_bufs_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->write_bufs_ptr(), output);
  }

  // repeated .pjcore.LiveUvBuf write_bufs = 7;
  for (unsigned int i = 0, n = this->write_bufs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->write_bufs(i), output);
  }

  // optional uint64 write_req_ptr = 8;
  if (has_write_req_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->write_req_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpServerTransaction)
}

::google::protobuf::uint8* LiveHttpServerTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpServerTransaction)
  // optional uint64 uv_ptr = 1;
  if (has_uv_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uv_ptr(), target);
  }

  // optional .pjcore.LiveHttpRequest request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->request_, target);
  }

  // optional .pjcore.LiveHttpResponse response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->response_, target);
  }

  // optional .pjcore.LiveCallback on_write_complete = 4;
  if (has_on_write_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->on_write_complete_, target);
  }

  // optional string response_header = 5;
  if (has_response_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_header().data(), this->response_header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpServerTransaction.response_header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->response_header(), target);
  }

  // optional uint64 write_bufs_ptr = 6;
  if (has_write_bufs_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->write_bufs_ptr(), target);
  }

  // repeated .pjcore.LiveUvBuf write_bufs = 7;
  for (unsigned int i = 0, n = this->write_bufs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->write_bufs(i), target);
  }

  // optional uint64 write_req_ptr = 8;
  if (has_write_req_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->write_req_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpServerTransaction)
  return target;
}

int LiveHttpServerTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191) {
    // optional uint64 uv_ptr = 1;
    if (has_uv_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uv_ptr());
    }

    // optional .pjcore.LiveHttpRequest request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .pjcore.LiveHttpResponse response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

    // optional .pjcore.LiveCallback on_write_complete = 4;
    if (has_on_write_complete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_write_complete_);
    }

    // optional string response_header = 5;
    if (has_response_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_header());
    }

    // optional uint64 write_bufs_ptr = 6;
    if (has_write_bufs_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_bufs_ptr());
    }

    // optional uint64 write_req_ptr = 8;
    if (has_write_req_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_req_ptr());
    }

  }
  // repeated .pjcore.LiveUvBuf write_bufs = 7;
  total_size += 1 * this->write_bufs_size();
  for (int i = 0; i < this->write_bufs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->write_bufs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpServerTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpServerTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpServerTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpServerTransaction::MergeFrom(const LiveHttpServerTransaction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  write_bufs_.MergeFrom(from.write_bufs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uv_ptr()) {
      set_uv_ptr(from.uv_ptr());
    }
    if (from.has_request()) {
      mutable_request()->::pjcore::LiveHttpRequest::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::pjcore::LiveHttpResponse::MergeFrom(from.response());
    }
    if (from.has_on_write_complete()) {
      mutable_on_write_complete()->::pjcore::LiveCallback::MergeFrom(from.on_write_complete());
    }
    if (from.has_response_header()) {
      set_has_response_header();
      response_header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_header_);
    }
    if (from.has_write_bufs_ptr()) {
      set_write_bufs_ptr(from.write_bufs_ptr());
    }
    if (from.has_write_req_ptr()) {
      set_write_req_ptr(from.write_req_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpServerTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpServerTransaction::CopyFrom(const LiveHttpServerTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpServerTransaction::IsInitialized() const {

  return true;
}

void LiveHttpServerTransaction::Swap(LiveHttpServerTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpServerTransaction::InternalSwap(LiveHttpServerTransaction* other) {
  std::swap(uv_ptr_, other->uv_ptr_);
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(on_write_complete_, other->on_write_complete_);
  response_header_.Swap(&other->response_header_);
  std::swap(write_bufs_ptr_, other->write_bufs_ptr_);
  write_bufs_.UnsafeArenaSwap(&other->write_bufs_);
  std::swap(write_req_ptr_, other->write_req_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpServerTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpServerTransaction_descriptor_;
  metadata.reflection = LiveHttpServerTransaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpServerConnection::kSharedLoopPtrFieldNumber;
const int LiveHttpServerConnection::kPendingTransactionCountFieldNumber;
const int LiveHttpServerConnection::kListenHandlePtrFieldNumber;
const int LiveHttpServerConnection::kHandlerPtrFieldNumber;
const int LiveHttpServerConnection::kOpenFieldNumber;
const int LiveHttpServerConnection::kAcceptHandlePtrFieldNumber;
const int LiveHttpServerConnection::kHandleQueuePtrFieldNumber;
const int LiveHttpServerConnection::kWriteQueuePtrFieldNumber;
const int LiveHttpServerConnection::kOnClosingFieldNumber;
const int LiveHttpServerConnection::kOnCloseFieldNumber;
const int LiveHttpServerConnection::kReadingFieldNumber;
const int LiveHttpServerConnection::kClosingFieldNumber;
const int LiveHttpServerConnection::kParserPtrFieldNumber;
const int LiveHttpServerConnection::kBufferSizeFieldNumber;
const int LiveHttpServerConnection::kBufferPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpServerConnection::LiveHttpServerConnection()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpServerConnection)
}

void LiveHttpServerConnection::InitAsDefaultInstance() {
  on_closing_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
  on_close_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpServerConnection::LiveHttpServerConnection(const LiveHttpServerConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpServerConnection)
}

void LiveHttpServerConnection::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  pending_transaction_count_ = GOOGLE_ULONGLONG(0);
  listen_handle_ptr_ = GOOGLE_ULONGLONG(0);
  handler_ptr_ = GOOGLE_ULONGLONG(0);
  open_ = false;
  accept_handle_ptr_ = GOOGLE_ULONGLONG(0);
  on_closing_ = NULL;
  on_close_ = NULL;
  reading_ = false;
  closing_ = false;
  parser_ptr_ = GOOGLE_ULONGLONG(0);
  buffer_size_ = GOOGLE_ULONGLONG(0);
  buffer_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpServerConnection::~LiveHttpServerConnection() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpServerConnection)
  SharedDtor();
}

void LiveHttpServerConnection::SharedDtor() {
  if (this != default_instance_) {
    delete on_closing_;
    delete on_close_;
  }
}

void LiveHttpServerConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpServerConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpServerConnection_descriptor_;
}

const LiveHttpServerConnection& LiveHttpServerConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpServerConnection* LiveHttpServerConnection::default_instance_ = NULL;

LiveHttpServerConnection* LiveHttpServerConnection::New(::google::protobuf::Arena* arena) const {
  LiveHttpServerConnection* n = new LiveHttpServerConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpServerConnection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveHttpServerConnection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(shared_loop_ptr_, accept_handle_ptr_);
    open_ = false;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(parser_ptr_, buffer_ptr_);
    ZR_(reading_, closing_);
    if (has_on_closing()) {
      if (on_closing_ != NULL) on_closing_->::pjcore::LiveCallback::Clear();
    }
    if (has_on_close()) {
      if (on_close_ != NULL) on_close_->::pjcore::LiveCallback::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  handle_queue_ptr_.Clear();
  write_queue_ptr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpServerConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpServerConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pending_transaction_count;
        break;
      }

      // optional uint64 pending_transaction_count = 2;
      case 2: {
        if (tag == 16) {
         parse_pending_transaction_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_transaction_count_)));
          set_has_pending_transaction_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_listen_handle_ptr;
        break;
      }

      // optional uint64 listen_handle_ptr = 3;
      case 3: {
        if (tag == 24) {
         parse_listen_handle_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_handle_ptr_)));
          set_has_listen_handle_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_handler_ptr;
        break;
      }

      // optional uint64 handler_ptr = 4;
      case 4: {
        if (tag == 32) {
         parse_handler_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handler_ptr_)));
          set_has_handler_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_open;
        break;
      }

      // optional bool open = 5;
      case 5: {
        if (tag == 40) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accept_handle_ptr;
        break;
      }

      // optional uint64 accept_handle_ptr = 6;
      case 6: {
        if (tag == 48) {
         parse_accept_handle_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accept_handle_ptr_)));
          set_has_accept_handle_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_handle_queue_ptr;
        break;
      }

      // repeated uint64 handle_queue_ptr = 7;
      case 7: {
        if (tag == 56) {
         parse_handle_queue_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_handle_queue_ptr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_handle_queue_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_handle_queue_ptr;
        if (input->ExpectTag(64)) goto parse_write_queue_ptr;
        break;
      }

      // repeated uint64 write_queue_ptr = 8;
      case 8: {
        if (tag == 64) {
         parse_write_queue_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_write_queue_ptr())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_write_queue_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_write_queue_ptr;
        if (input->ExpectTag(74)) goto parse_on_closing;
        break;
      }

      // optional .pjcore.LiveCallback on_closing = 9;
      case 9: {
        if (tag == 74) {
         parse_on_closing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_closing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_on_close;
        break;
      }

      // optional .pjcore.LiveCallback on_close = 10;
      case 10: {
        if (tag == 82) {
         parse_on_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_close()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reading;
        break;
      }

      // optional bool reading = 11;
      case 11: {
        if (tag == 88) {
         parse_reading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reading_)));
          set_has_reading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_closing;
        break;
      }

      // optional bool closing = 12;
      case 12: {
        if (tag == 96) {
         parse_closing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closing_)));
          set_has_closing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_parser_ptr;
        break;
      }

      // optional uint64 parser_ptr = 13;
      case 13: {
        if (tag == 104) {
         parse_parser_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parser_ptr_)));
          set_has_parser_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_buffer_size;
        break;
      }

      // optional uint64 buffer_size = 14;
      case 14: {
        if (tag == 112) {
         parse_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
          set_has_buffer_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_buffer_ptr;
        break;
      }

      // optional uint64 buffer_ptr = 15;
      case 15: {
        if (tag == 120) {
         parse_buffer_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_ptr_)));
          set_has_buffer_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpServerConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpServerConnection)
  return false;
#undef DO_
}

void LiveHttpServerConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpServerConnection)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // optional uint64 pending_transaction_count = 2;
  if (has_pending_transaction_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pending_transaction_count(), output);
  }

  // optional uint64 listen_handle_ptr = 3;
  if (has_listen_handle_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->listen_handle_ptr(), output);
  }

  // optional uint64 handler_ptr = 4;
  if (has_handler_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->handler_ptr(), output);
  }

  // optional bool open = 5;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->open(), output);
  }

  // optional uint64 accept_handle_ptr = 6;
  if (has_accept_handle_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->accept_handle_ptr(), output);
  }

  // repeated uint64 handle_queue_ptr = 7;
  for (int i = 0; i < this->handle_queue_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->handle_queue_ptr(i), output);
  }

  // repeated uint64 write_queue_ptr = 8;
  for (int i = 0; i < this->write_queue_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->write_queue_ptr(i), output);
  }

  // optional .pjcore.LiveCallback on_closing = 9;
  if (has_on_closing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->on_closing_, output);
  }

  // optional .pjcore.LiveCallback on_close = 10;
  if (has_on_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->on_close_, output);
  }

  // optional bool reading = 11;
  if (has_reading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->reading(), output);
  }

  // optional bool closing = 12;
  if (has_closing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->closing(), output);
  }

  // optional uint64 parser_ptr = 13;
  if (has_parser_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->parser_ptr(), output);
  }

  // optional uint64 buffer_size = 14;
  if (has_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->buffer_size(), output);
  }

  // optional uint64 buffer_ptr = 15;
  if (has_buffer_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->buffer_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpServerConnection)
}

::google::protobuf::uint8* LiveHttpServerConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpServerConnection)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // optional uint64 pending_transaction_count = 2;
  if (has_pending_transaction_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pending_transaction_count(), target);
  }

  // optional uint64 listen_handle_ptr = 3;
  if (has_listen_handle_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->listen_handle_ptr(), target);
  }

  // optional uint64 handler_ptr = 4;
  if (has_handler_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->handler_ptr(), target);
  }

  // optional bool open = 5;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->open(), target);
  }

  // optional uint64 accept_handle_ptr = 6;
  if (has_accept_handle_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->accept_handle_ptr(), target);
  }

  // repeated uint64 handle_queue_ptr = 7;
  for (int i = 0; i < this->handle_queue_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->handle_queue_ptr(i), target);
  }

  // repeated uint64 write_queue_ptr = 8;
  for (int i = 0; i < this->write_queue_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->write_queue_ptr(i), target);
  }

  // optional .pjcore.LiveCallback on_closing = 9;
  if (has_on_closing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->on_closing_, target);
  }

  // optional .pjcore.LiveCallback on_close = 10;
  if (has_on_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->on_close_, target);
  }

  // optional bool reading = 11;
  if (has_reading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->reading(), target);
  }

  // optional bool closing = 12;
  if (has_closing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->closing(), target);
  }

  // optional uint64 parser_ptr = 13;
  if (has_parser_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->parser_ptr(), target);
  }

  // optional uint64 buffer_size = 14;
  if (has_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->buffer_size(), target);
  }

  // optional uint64 buffer_ptr = 15;
  if (has_buffer_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->buffer_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpServerConnection)
  return target;
}

int LiveHttpServerConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional uint64 pending_transaction_count = 2;
    if (has_pending_transaction_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_transaction_count());
    }

    // optional uint64 listen_handle_ptr = 3;
    if (has_listen_handle_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->listen_handle_ptr());
    }

    // optional uint64 handler_ptr = 4;
    if (has_handler_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handler_ptr());
    }

    // optional bool open = 5;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional uint64 accept_handle_ptr = 6;
    if (has_accept_handle_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accept_handle_ptr());
    }

  }
  if (_has_bits_[8 / 32] & 32512) {
    // optional .pjcore.LiveCallback on_closing = 9;
    if (has_on_closing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_closing_);
    }

    // optional .pjcore.LiveCallback on_close = 10;
    if (has_on_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_close_);
    }

    // optional bool reading = 11;
    if (has_reading()) {
      total_size += 1 + 1;
    }

    // optional bool closing = 12;
    if (has_closing()) {
      total_size += 1 + 1;
    }

    // optional uint64 parser_ptr = 13;
    if (has_parser_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parser_ptr());
    }

    // optional uint64 buffer_size = 14;
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

    // optional uint64 buffer_ptr = 15;
    if (has_buffer_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_ptr());
    }

  }
  // repeated uint64 handle_queue_ptr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->handle_queue_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->handle_queue_ptr(i));
    }
    total_size += 1 * this->handle_queue_ptr_size() + data_size;
  }

  // repeated uint64 write_queue_ptr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->write_queue_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->write_queue_ptr(i));
    }
    total_size += 1 * this->write_queue_ptr_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpServerConnection::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpServerConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpServerConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpServerConnection::MergeFrom(const LiveHttpServerConnection& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  handle_queue_ptr_.MergeFrom(from.handle_queue_ptr_);
  write_queue_ptr_.MergeFrom(from.write_queue_ptr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_pending_transaction_count()) {
      set_pending_transaction_count(from.pending_transaction_count());
    }
    if (from.has_listen_handle_ptr()) {
      set_listen_handle_ptr(from.listen_handle_ptr());
    }
    if (from.has_handler_ptr()) {
      set_handler_ptr(from.handler_ptr());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_accept_handle_ptr()) {
      set_accept_handle_ptr(from.accept_handle_ptr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_on_closing()) {
      mutable_on_closing()->::pjcore::LiveCallback::MergeFrom(from.on_closing());
    }
    if (from.has_on_close()) {
      mutable_on_close()->::pjcore::LiveCallback::MergeFrom(from.on_close());
    }
    if (from.has_reading()) {
      set_reading(from.reading());
    }
    if (from.has_closing()) {
      set_closing(from.closing());
    }
    if (from.has_parser_ptr()) {
      set_parser_ptr(from.parser_ptr());
    }
    if (from.has_buffer_size()) {
      set_buffer_size(from.buffer_size());
    }
    if (from.has_buffer_ptr()) {
      set_buffer_ptr(from.buffer_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpServerConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpServerConnection::CopyFrom(const LiveHttpServerConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpServerConnection::IsInitialized() const {

  return true;
}

void LiveHttpServerConnection::Swap(LiveHttpServerConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpServerConnection::InternalSwap(LiveHttpServerConnection* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(pending_transaction_count_, other->pending_transaction_count_);
  std::swap(listen_handle_ptr_, other->listen_handle_ptr_);
  std::swap(handler_ptr_, other->handler_ptr_);
  std::swap(open_, other->open_);
  std::swap(accept_handle_ptr_, other->accept_handle_ptr_);
  handle_queue_ptr_.UnsafeArenaSwap(&other->handle_queue_ptr_);
  write_queue_ptr_.UnsafeArenaSwap(&other->write_queue_ptr_);
  std::swap(on_closing_, other->on_closing_);
  std::swap(on_close_, other->on_close_);
  std::swap(reading_, other->reading_);
  std::swap(closing_, other->closing_);
  std::swap(parser_ptr_, other->parser_ptr_);
  std::swap(buffer_size_, other->buffer_size_);
  std::swap(buffer_ptr_, other->buffer_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpServerConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpServerConnection_descriptor_;
  metadata.reflection = LiveHttpServerConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpServerCore::kShellPtrFieldNumber;
const int LiveHttpServerCore::kOpenFieldNumber;
const int LiveHttpServerCore::kPendingConnectionCountFieldNumber;
const int LiveHttpServerCore::kPendingTransactionCountFieldNumber;
const int LiveHttpServerCore::kConfigFieldNumber;
const int LiveHttpServerCore::kSharedLoopPtrFieldNumber;
const int LiveHttpServerCore::kHandlerPtrFieldNumber;
const int LiveHttpServerCore::kListenHandlePtrFieldNumber;
const int LiveHttpServerCore::kOnDestroyFieldNumber;
#endif  // !_MSC_VER

LiveHttpServerCore::LiveHttpServerCore()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpServerCore)
}

void LiveHttpServerCore::InitAsDefaultInstance() {
  config_ = const_cast< ::pjcore::HttpServerConfig*>(&::pjcore::HttpServerConfig::default_instance());
  on_destroy_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpServerCore::LiveHttpServerCore(const LiveHttpServerCore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpServerCore)
}

void LiveHttpServerCore::SharedCtor() {
  _cached_size_ = 0;
  shell_ptr_ = GOOGLE_ULONGLONG(0);
  open_ = GOOGLE_ULONGLONG(0);
  pending_connection_count_ = GOOGLE_ULONGLONG(0);
  pending_transaction_count_ = GOOGLE_ULONGLONG(0);
  config_ = NULL;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  handler_ptr_ = GOOGLE_ULONGLONG(0);
  listen_handle_ptr_ = GOOGLE_ULONGLONG(0);
  on_destroy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpServerCore::~LiveHttpServerCore() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpServerCore)
  SharedDtor();
}

void LiveHttpServerCore::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
    delete on_destroy_;
  }
}

void LiveHttpServerCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpServerCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpServerCore_descriptor_;
}

const LiveHttpServerCore& LiveHttpServerCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpServerCore* LiveHttpServerCore::default_instance_ = NULL;

LiveHttpServerCore* LiveHttpServerCore::New(::google::protobuf::Arena* arena) const {
  LiveHttpServerCore* n = new LiveHttpServerCore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpServerCore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveHttpServerCore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(shell_ptr_, pending_transaction_count_);
    ZR_(shared_loop_ptr_, listen_handle_ptr_);
    if (has_config()) {
      if (config_ != NULL) config_->::pjcore::HttpServerConfig::Clear();
    }
  }
  if (has_on_destroy()) {
    if (on_destroy_ != NULL) on_destroy_->::pjcore::LiveCallback::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpServerCore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpServerCore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shell_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shell_ptr_)));
          set_has_shell_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // optional uint64 open = 2;
      case 2: {
        if (tag == 16) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pending_connection_count;
        break;
      }

      // optional uint64 pending_connection_count = 3;
      case 3: {
        if (tag == 24) {
         parse_pending_connection_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_connection_count_)));
          set_has_pending_connection_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pending_transaction_count;
        break;
      }

      // optional uint64 pending_transaction_count = 4;
      case 4: {
        if (tag == 32) {
         parse_pending_transaction_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_transaction_count_)));
          set_has_pending_transaction_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_config;
        break;
      }

      // optional .pjcore.HttpServerConfig config = 6;
      case 6: {
        if (tag == 50) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_shared_loop_ptr;
        break;
      }

      // optional uint64 shared_loop_ptr = 7;
      case 7: {
        if (tag == 56) {
         parse_shared_loop_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_handler_ptr;
        break;
      }

      // optional uint64 handler_ptr = 8;
      case 8: {
        if (tag == 64) {
         parse_handler_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handler_ptr_)));
          set_has_handler_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_listen_handle_ptr;
        break;
      }

      // optional uint64 listen_handle_ptr = 9;
      case 9: {
        if (tag == 72) {
         parse_listen_handle_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &listen_handle_ptr_)));
          set_has_listen_handle_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_on_destroy;
        break;
      }

      // optional .pjcore.LiveCallback on_destroy = 10;
      case 10: {
        if (tag == 82) {
         parse_on_destroy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_destroy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpServerCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpServerCore)
  return false;
#undef DO_
}

void LiveHttpServerCore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpServerCore)
  // optional uint64 shell_ptr = 1;
  if (has_shell_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shell_ptr(), output);
  }

  // optional uint64 open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->open(), output);
  }

  // optional uint64 pending_connection_count = 3;
  if (has_pending_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pending_connection_count(), output);
  }

  // optional uint64 pending_transaction_count = 4;
  if (has_pending_transaction_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pending_transaction_count(), output);
  }

  // optional .pjcore.HttpServerConfig config = 6;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->config_, output);
  }

  // optional uint64 shared_loop_ptr = 7;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->shared_loop_ptr(), output);
  }

  // optional uint64 handler_ptr = 8;
  if (has_handler_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->handler_ptr(), output);
  }

  // optional uint64 listen_handle_ptr = 9;
  if (has_listen_handle_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->listen_handle_ptr(), output);
  }

  // optional .pjcore.LiveCallback on_destroy = 10;
  if (has_on_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->on_destroy_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpServerCore)
}

::google::protobuf::uint8* LiveHttpServerCore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpServerCore)
  // optional uint64 shell_ptr = 1;
  if (has_shell_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shell_ptr(), target);
  }

  // optional uint64 open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->open(), target);
  }

  // optional uint64 pending_connection_count = 3;
  if (has_pending_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pending_connection_count(), target);
  }

  // optional uint64 pending_transaction_count = 4;
  if (has_pending_transaction_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pending_transaction_count(), target);
  }

  // optional .pjcore.HttpServerConfig config = 6;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->config_, target);
  }

  // optional uint64 shared_loop_ptr = 7;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->shared_loop_ptr(), target);
  }

  // optional uint64 handler_ptr = 8;
  if (has_handler_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->handler_ptr(), target);
  }

  // optional uint64 listen_handle_ptr = 9;
  if (has_listen_handle_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->listen_handle_ptr(), target);
  }

  // optional .pjcore.LiveCallback on_destroy = 10;
  if (has_on_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->on_destroy_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpServerCore)
  return target;
}

int LiveHttpServerCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255) {
    // optional uint64 shell_ptr = 1;
    if (has_shell_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shell_ptr());
    }

    // optional uint64 open = 2;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->open());
    }

    // optional uint64 pending_connection_count = 3;
    if (has_pending_connection_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_connection_count());
    }

    // optional uint64 pending_transaction_count = 4;
    if (has_pending_transaction_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_transaction_count());
    }

    // optional .pjcore.HttpServerConfig config = 6;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional uint64 shared_loop_ptr = 7;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional uint64 handler_ptr = 8;
    if (has_handler_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handler_ptr());
    }

    // optional uint64 listen_handle_ptr = 9;
    if (has_listen_handle_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->listen_handle_ptr());
    }

  }
  // optional .pjcore.LiveCallback on_destroy = 10;
  if (has_on_destroy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->on_destroy_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpServerCore::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpServerCore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpServerCore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpServerCore::MergeFrom(const LiveHttpServerCore& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shell_ptr()) {
      set_shell_ptr(from.shell_ptr());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_pending_connection_count()) {
      set_pending_connection_count(from.pending_connection_count());
    }
    if (from.has_pending_transaction_count()) {
      set_pending_transaction_count(from.pending_transaction_count());
    }
    if (from.has_config()) {
      mutable_config()->::pjcore::HttpServerConfig::MergeFrom(from.config());
    }
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_handler_ptr()) {
      set_handler_ptr(from.handler_ptr());
    }
    if (from.has_listen_handle_ptr()) {
      set_listen_handle_ptr(from.listen_handle_ptr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_on_destroy()) {
      mutable_on_destroy()->::pjcore::LiveCallback::MergeFrom(from.on_destroy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpServerCore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpServerCore::CopyFrom(const LiveHttpServerCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpServerCore::IsInitialized() const {

  return true;
}

void LiveHttpServerCore::Swap(LiveHttpServerCore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpServerCore::InternalSwap(LiveHttpServerCore* other) {
  std::swap(shell_ptr_, other->shell_ptr_);
  std::swap(open_, other->open_);
  std::swap(pending_connection_count_, other->pending_connection_count_);
  std::swap(pending_transaction_count_, other->pending_transaction_count_);
  std::swap(config_, other->config_);
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(handler_ptr_, other->handler_ptr_);
  std::swap(listen_handle_ptr_, other->listen_handle_ptr_);
  std::swap(on_destroy_, other->on_destroy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpServerCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpServerCore_descriptor_;
  metadata.reflection = LiveHttpServerCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpServer::kCorePtrFieldNumber;
const int LiveHttpServer::kOnDestroyFieldNumber;
#endif  // !_MSC_VER

LiveHttpServer::LiveHttpServer()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpServer)
}

void LiveHttpServer::InitAsDefaultInstance() {
  on_destroy_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpServer::LiveHttpServer(const LiveHttpServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpServer)
}

void LiveHttpServer::SharedCtor() {
  _cached_size_ = 0;
  core_ptr_ = GOOGLE_ULONGLONG(0);
  on_destroy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpServer::~LiveHttpServer() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpServer)
  SharedDtor();
}

void LiveHttpServer::SharedDtor() {
  if (this != default_instance_) {
    delete on_destroy_;
  }
}

void LiveHttpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpServer_descriptor_;
}

const LiveHttpServer& LiveHttpServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpServer* LiveHttpServer::default_instance_ = NULL;

LiveHttpServer* LiveHttpServer::New(::google::protobuf::Arena* arena) const {
  LiveHttpServer* n = new LiveHttpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpServer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    core_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_on_destroy()) {
      if (on_destroy_ != NULL) on_destroy_->::pjcore::LiveCallback::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 core_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &core_ptr_)));
          set_has_core_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_on_destroy;
        break;
      }

      // optional .pjcore.LiveCallback on_destroy = 2;
      case 2: {
        if (tag == 18) {
         parse_on_destroy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_destroy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpServer)
  return false;
#undef DO_
}

void LiveHttpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpServer)
  // optional uint64 core_ptr = 1;
  if (has_core_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->core_ptr(), output);
  }

  // optional .pjcore.LiveCallback on_destroy = 2;
  if (has_on_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->on_destroy_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpServer)
}

::google::protobuf::uint8* LiveHttpServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpServer)
  // optional uint64 core_ptr = 1;
  if (has_core_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->core_ptr(), target);
  }

  // optional .pjcore.LiveCallback on_destroy = 2;
  if (has_on_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->on_destroy_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpServer)
  return target;
}

int LiveHttpServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 core_ptr = 1;
    if (has_core_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->core_ptr());
    }

    // optional .pjcore.LiveCallback on_destroy = 2;
    if (has_on_destroy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_destroy_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpServer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpServer::MergeFrom(const LiveHttpServer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_core_ptr()) {
      set_core_ptr(from.core_ptr());
    }
    if (from.has_on_destroy()) {
      mutable_on_destroy()->::pjcore::LiveCallback::MergeFrom(from.on_destroy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpServer::CopyFrom(const LiveHttpServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpServer::IsInitialized() const {

  return true;
}

void LiveHttpServer::Swap(LiveHttpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpServer::InternalSwap(LiveHttpServer* other) {
  std::swap(core_ptr_, other->core_ptr_);
  std::swap(on_destroy_, other->on_destroy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpServer_descriptor_;
  metadata.reflection = LiveHttpServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpClientTransaction::kUvPtrFieldNumber;
const int LiveHttpClientTransaction::kRequestFieldNumber;
const int LiveHttpClientTransaction::kNodeAndServiceNameFieldNumber;
const int LiveHttpClientTransaction::kOnResponseFieldNumber;
#endif  // !_MSC_VER

LiveHttpClientTransaction::LiveHttpClientTransaction()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpClientTransaction)
}

void LiveHttpClientTransaction::InitAsDefaultInstance() {
  request_ = const_cast< ::pjcore::LiveHttpRequest*>(&::pjcore::LiveHttpRequest::default_instance());
  node_and_service_name_ = const_cast< ::pjcore::NodeAndServiceName*>(&::pjcore::NodeAndServiceName::default_instance());
  on_response_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpClientTransaction::LiveHttpClientTransaction(const LiveHttpClientTransaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpClientTransaction)
}

void LiveHttpClientTransaction::SharedCtor() {
  _cached_size_ = 0;
  uv_ptr_ = GOOGLE_ULONGLONG(0);
  request_ = NULL;
  node_and_service_name_ = NULL;
  on_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpClientTransaction::~LiveHttpClientTransaction() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpClientTransaction)
  SharedDtor();
}

void LiveHttpClientTransaction::SharedDtor() {
  if (this != default_instance_) {
    delete request_;
    delete node_and_service_name_;
    delete on_response_;
  }
}

void LiveHttpClientTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpClientTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpClientTransaction_descriptor_;
}

const LiveHttpClientTransaction& LiveHttpClientTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpClientTransaction* LiveHttpClientTransaction::default_instance_ = NULL;

LiveHttpClientTransaction* LiveHttpClientTransaction::New(::google::protobuf::Arena* arena) const {
  LiveHttpClientTransaction* n = new LiveHttpClientTransaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpClientTransaction::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    uv_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_request()) {
      if (request_ != NULL) request_->::pjcore::LiveHttpRequest::Clear();
    }
    if (has_node_and_service_name()) {
      if (node_and_service_name_ != NULL) node_and_service_name_->::pjcore::NodeAndServiceName::Clear();
    }
    if (has_on_response()) {
      if (on_response_ != NULL) on_response_->::pjcore::LiveCallback::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpClientTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpClientTransaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uv_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uv_ptr_)));
          set_has_uv_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .pjcore.LiveHttpRequest request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_and_service_name;
        break;
      }

      // optional .pjcore.NodeAndServiceName node_and_service_name = 3;
      case 3: {
        if (tag == 26) {
         parse_node_and_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_and_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_on_response;
        break;
      }

      // optional .pjcore.LiveCallback on_response = 4;
      case 4: {
        if (tag == 34) {
         parse_on_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpClientTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpClientTransaction)
  return false;
#undef DO_
}

void LiveHttpClientTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpClientTransaction)
  // optional uint64 uv_ptr = 1;
  if (has_uv_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uv_ptr(), output);
  }

  // optional .pjcore.LiveHttpRequest request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // optional .pjcore.NodeAndServiceName node_and_service_name = 3;
  if (has_node_and_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->node_and_service_name_, output);
  }

  // optional .pjcore.LiveCallback on_response = 4;
  if (has_on_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->on_response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpClientTransaction)
}

::google::protobuf::uint8* LiveHttpClientTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpClientTransaction)
  // optional uint64 uv_ptr = 1;
  if (has_uv_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uv_ptr(), target);
  }

  // optional .pjcore.LiveHttpRequest request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->request_, target);
  }

  // optional .pjcore.NodeAndServiceName node_and_service_name = 3;
  if (has_node_and_service_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->node_and_service_name_, target);
  }

  // optional .pjcore.LiveCallback on_response = 4;
  if (has_on_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->on_response_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpClientTransaction)
  return target;
}

int LiveHttpClientTransaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional uint64 uv_ptr = 1;
    if (has_uv_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uv_ptr());
    }

    // optional .pjcore.LiveHttpRequest request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .pjcore.NodeAndServiceName node_and_service_name = 3;
    if (has_node_and_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_and_service_name_);
    }

    // optional .pjcore.LiveCallback on_response = 4;
    if (has_on_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpClientTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpClientTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpClientTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpClientTransaction::MergeFrom(const LiveHttpClientTransaction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uv_ptr()) {
      set_uv_ptr(from.uv_ptr());
    }
    if (from.has_request()) {
      mutable_request()->::pjcore::LiveHttpRequest::MergeFrom(from.request());
    }
    if (from.has_node_and_service_name()) {
      mutable_node_and_service_name()->::pjcore::NodeAndServiceName::MergeFrom(from.node_and_service_name());
    }
    if (from.has_on_response()) {
      mutable_on_response()->::pjcore::LiveCallback::MergeFrom(from.on_response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpClientTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpClientTransaction::CopyFrom(const LiveHttpClientTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpClientTransaction::IsInitialized() const {

  return true;
}

void LiveHttpClientTransaction::Swap(LiveHttpClientTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpClientTransaction::InternalSwap(LiveHttpClientTransaction* other) {
  std::swap(uv_ptr_, other->uv_ptr_);
  std::swap(request_, other->request_);
  std::swap(node_and_service_name_, other->node_and_service_name_);
  std::swap(on_response_, other->on_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpClientTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpClientTransaction_descriptor_;
  metadata.reflection = LiveHttpClientTransaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpClientConnection::kSharedLoopPtrFieldNumber;
const int LiveHttpClientConnection::kAddrInfosFieldNumber;
const int LiveHttpClientConnection::kOpenFieldNumber;
const int LiveHttpClientConnection::kWaitQueuePtrFieldNumber;
const int LiveHttpClientConnection::kWriteQueuePtrFieldNumber;
const int LiveHttpClientConnection::kReadQueuePtrFieldNumber;
const int LiveHttpClientConnection::kOnClosingFieldNumber;
const int LiveHttpClientConnection::kOnCloseFieldNumber;
const int LiveHttpClientConnection::kConnectHandlePtrFieldNumber;
const int LiveHttpClientConnection::kConnectReqPtrFieldNumber;
const int LiveHttpClientConnection::kReadingFieldNumber;
const int LiveHttpClientConnection::kClosingFieldNumber;
const int LiveHttpClientConnection::kParserPtrFieldNumber;
const int LiveHttpClientConnection::kBufferSizeFieldNumber;
const int LiveHttpClientConnection::kBufferPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpClientConnection::LiveHttpClientConnection()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpClientConnection)
}

void LiveHttpClientConnection::InitAsDefaultInstance() {
  on_closing_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
  on_close_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpClientConnection::LiveHttpClientConnection(const LiveHttpClientConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpClientConnection)
}

void LiveHttpClientConnection::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  open_ = false;
  on_closing_ = NULL;
  on_close_ = NULL;
  connect_handle_ptr_ = GOOGLE_ULONGLONG(0);
  connect_req_ptr_ = GOOGLE_ULONGLONG(0);
  reading_ = false;
  closing_ = false;
  parser_ptr_ = GOOGLE_ULONGLONG(0);
  buffer_size_ = GOOGLE_ULONGLONG(0);
  buffer_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpClientConnection::~LiveHttpClientConnection() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpClientConnection)
  SharedDtor();
}

void LiveHttpClientConnection::SharedDtor() {
  if (this != default_instance_) {
    delete on_closing_;
    delete on_close_;
  }
}

void LiveHttpClientConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpClientConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpClientConnection_descriptor_;
}

const LiveHttpClientConnection& LiveHttpClientConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpClientConnection* LiveHttpClientConnection::default_instance_ = NULL;

LiveHttpClientConnection* LiveHttpClientConnection::New(::google::protobuf::Arena* arena) const {
  LiveHttpClientConnection* n = new LiveHttpClientConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpClientConnection::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveHttpClientConnection*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 197) {
    shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
    open_ = false;
    if (has_on_closing()) {
      if (on_closing_ != NULL) on_closing_->::pjcore::LiveCallback::Clear();
    }
    if (has_on_close()) {
      if (on_close_ != NULL) on_close_->::pjcore::LiveCallback::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(connect_handle_ptr_, buffer_ptr_);
    ZR_(reading_, closing_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  addr_infos_.Clear();
  wait_queue_ptr_.Clear();
  write_queue_ptr_.Clear();
  read_queue_ptr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpClientConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpClientConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addr_infos;
        break;
      }

      // repeated .pjcore.LiveAddrInfo addr_infos = 2;
      case 2: {
        if (tag == 18) {
         parse_addr_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addr_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addr_infos;
        if (input->ExpectTag(24)) goto parse_open;
        break;
      }

      // optional bool open = 3;
      case 3: {
        if (tag == 24) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wait_queue_ptr;
        break;
      }

      // repeated uint64 wait_queue_ptr = 4;
      case 4: {
        if (tag == 32) {
         parse_wait_queue_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_wait_queue_ptr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_wait_queue_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wait_queue_ptr;
        if (input->ExpectTag(40)) goto parse_write_queue_ptr;
        break;
      }

      // repeated uint64 write_queue_ptr = 5;
      case 5: {
        if (tag == 40) {
         parse_write_queue_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_write_queue_ptr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_write_queue_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_write_queue_ptr;
        if (input->ExpectTag(48)) goto parse_read_queue_ptr;
        break;
      }

      // repeated uint64 read_queue_ptr = 6;
      case 6: {
        if (tag == 48) {
         parse_read_queue_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_read_queue_ptr())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_read_queue_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_read_queue_ptr;
        if (input->ExpectTag(58)) goto parse_on_closing;
        break;
      }

      // optional .pjcore.LiveCallback on_closing = 7;
      case 7: {
        if (tag == 58) {
         parse_on_closing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_closing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_on_close;
        break;
      }

      // optional .pjcore.LiveCallback on_close = 8;
      case 8: {
        if (tag == 66) {
         parse_on_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_close()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_connect_handle_ptr;
        break;
      }

      // optional uint64 connect_handle_ptr = 9;
      case 9: {
        if (tag == 72) {
         parse_connect_handle_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_handle_ptr_)));
          set_has_connect_handle_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_connect_req_ptr;
        break;
      }

      // optional uint64 connect_req_ptr = 10;
      case 10: {
        if (tag == 80) {
         parse_connect_req_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connect_req_ptr_)));
          set_has_connect_req_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reading;
        break;
      }

      // optional bool reading = 11;
      case 11: {
        if (tag == 88) {
         parse_reading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reading_)));
          set_has_reading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_closing;
        break;
      }

      // optional bool closing = 12;
      case 12: {
        if (tag == 96) {
         parse_closing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closing_)));
          set_has_closing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_parser_ptr;
        break;
      }

      // optional uint64 parser_ptr = 13;
      case 13: {
        if (tag == 104) {
         parse_parser_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parser_ptr_)));
          set_has_parser_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_buffer_size;
        break;
      }

      // optional uint64 buffer_size = 14;
      case 14: {
        if (tag == 112) {
         parse_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
          set_has_buffer_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_buffer_ptr;
        break;
      }

      // optional uint64 buffer_ptr = 15;
      case 15: {
        if (tag == 120) {
         parse_buffer_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_ptr_)));
          set_has_buffer_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpClientConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpClientConnection)
  return false;
#undef DO_
}

void LiveHttpClientConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpClientConnection)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // repeated .pjcore.LiveAddrInfo addr_infos = 2;
  for (unsigned int i = 0, n = this->addr_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addr_infos(i), output);
  }

  // optional bool open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->open(), output);
  }

  // repeated uint64 wait_queue_ptr = 4;
  for (int i = 0; i < this->wait_queue_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->wait_queue_ptr(i), output);
  }

  // repeated uint64 write_queue_ptr = 5;
  for (int i = 0; i < this->write_queue_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->write_queue_ptr(i), output);
  }

  // repeated uint64 read_queue_ptr = 6;
  for (int i = 0; i < this->read_queue_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->read_queue_ptr(i), output);
  }

  // optional .pjcore.LiveCallback on_closing = 7;
  if (has_on_closing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->on_closing_, output);
  }

  // optional .pjcore.LiveCallback on_close = 8;
  if (has_on_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->on_close_, output);
  }

  // optional uint64 connect_handle_ptr = 9;
  if (has_connect_handle_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->connect_handle_ptr(), output);
  }

  // optional uint64 connect_req_ptr = 10;
  if (has_connect_req_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->connect_req_ptr(), output);
  }

  // optional bool reading = 11;
  if (has_reading()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->reading(), output);
  }

  // optional bool closing = 12;
  if (has_closing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->closing(), output);
  }

  // optional uint64 parser_ptr = 13;
  if (has_parser_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->parser_ptr(), output);
  }

  // optional uint64 buffer_size = 14;
  if (has_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->buffer_size(), output);
  }

  // optional uint64 buffer_ptr = 15;
  if (has_buffer_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->buffer_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpClientConnection)
}

::google::protobuf::uint8* LiveHttpClientConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpClientConnection)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // repeated .pjcore.LiveAddrInfo addr_infos = 2;
  for (unsigned int i = 0, n = this->addr_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addr_infos(i), target);
  }

  // optional bool open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->open(), target);
  }

  // repeated uint64 wait_queue_ptr = 4;
  for (int i = 0; i < this->wait_queue_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->wait_queue_ptr(i), target);
  }

  // repeated uint64 write_queue_ptr = 5;
  for (int i = 0; i < this->write_queue_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->write_queue_ptr(i), target);
  }

  // repeated uint64 read_queue_ptr = 6;
  for (int i = 0; i < this->read_queue_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->read_queue_ptr(i), target);
  }

  // optional .pjcore.LiveCallback on_closing = 7;
  if (has_on_closing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->on_closing_, target);
  }

  // optional .pjcore.LiveCallback on_close = 8;
  if (has_on_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->on_close_, target);
  }

  // optional uint64 connect_handle_ptr = 9;
  if (has_connect_handle_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->connect_handle_ptr(), target);
  }

  // optional uint64 connect_req_ptr = 10;
  if (has_connect_req_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->connect_req_ptr(), target);
  }

  // optional bool reading = 11;
  if (has_reading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->reading(), target);
  }

  // optional bool closing = 12;
  if (has_closing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->closing(), target);
  }

  // optional uint64 parser_ptr = 13;
  if (has_parser_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->parser_ptr(), target);
  }

  // optional uint64 buffer_size = 14;
  if (has_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->buffer_size(), target);
  }

  // optional uint64 buffer_ptr = 15;
  if (has_buffer_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->buffer_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpClientConnection)
  return target;
}

int LiveHttpClientConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 197) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional bool open = 3;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional .pjcore.LiveCallback on_closing = 7;
    if (has_on_closing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_closing_);
    }

    // optional .pjcore.LiveCallback on_close = 8;
    if (has_on_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_close_);
    }

  }
  if (_has_bits_[8 / 32] & 32512) {
    // optional uint64 connect_handle_ptr = 9;
    if (has_connect_handle_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->connect_handle_ptr());
    }

    // optional uint64 connect_req_ptr = 10;
    if (has_connect_req_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->connect_req_ptr());
    }

    // optional bool reading = 11;
    if (has_reading()) {
      total_size += 1 + 1;
    }

    // optional bool closing = 12;
    if (has_closing()) {
      total_size += 1 + 1;
    }

    // optional uint64 parser_ptr = 13;
    if (has_parser_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parser_ptr());
    }

    // optional uint64 buffer_size = 14;
    if (has_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

    // optional uint64 buffer_ptr = 15;
    if (has_buffer_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_ptr());
    }

  }
  // repeated .pjcore.LiveAddrInfo addr_infos = 2;
  total_size += 1 * this->addr_infos_size();
  for (int i = 0; i < this->addr_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addr_infos(i));
  }

  // repeated uint64 wait_queue_ptr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->wait_queue_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->wait_queue_ptr(i));
    }
    total_size += 1 * this->wait_queue_ptr_size() + data_size;
  }

  // repeated uint64 write_queue_ptr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->write_queue_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->write_queue_ptr(i));
    }
    total_size += 1 * this->write_queue_ptr_size() + data_size;
  }

  // repeated uint64 read_queue_ptr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->read_queue_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->read_queue_ptr(i));
    }
    total_size += 1 * this->read_queue_ptr_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpClientConnection::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpClientConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpClientConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpClientConnection::MergeFrom(const LiveHttpClientConnection& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  addr_infos_.MergeFrom(from.addr_infos_);
  wait_queue_ptr_.MergeFrom(from.wait_queue_ptr_);
  write_queue_ptr_.MergeFrom(from.write_queue_ptr_);
  read_queue_ptr_.MergeFrom(from.read_queue_ptr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_on_closing()) {
      mutable_on_closing()->::pjcore::LiveCallback::MergeFrom(from.on_closing());
    }
    if (from.has_on_close()) {
      mutable_on_close()->::pjcore::LiveCallback::MergeFrom(from.on_close());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_connect_handle_ptr()) {
      set_connect_handle_ptr(from.connect_handle_ptr());
    }
    if (from.has_connect_req_ptr()) {
      set_connect_req_ptr(from.connect_req_ptr());
    }
    if (from.has_reading()) {
      set_reading(from.reading());
    }
    if (from.has_closing()) {
      set_closing(from.closing());
    }
    if (from.has_parser_ptr()) {
      set_parser_ptr(from.parser_ptr());
    }
    if (from.has_buffer_size()) {
      set_buffer_size(from.buffer_size());
    }
    if (from.has_buffer_ptr()) {
      set_buffer_ptr(from.buffer_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpClientConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpClientConnection::CopyFrom(const LiveHttpClientConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpClientConnection::IsInitialized() const {

  return true;
}

void LiveHttpClientConnection::Swap(LiveHttpClientConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpClientConnection::InternalSwap(LiveHttpClientConnection* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  addr_infos_.UnsafeArenaSwap(&other->addr_infos_);
  std::swap(open_, other->open_);
  wait_queue_ptr_.UnsafeArenaSwap(&other->wait_queue_ptr_);
  write_queue_ptr_.UnsafeArenaSwap(&other->write_queue_ptr_);
  read_queue_ptr_.UnsafeArenaSwap(&other->read_queue_ptr_);
  std::swap(on_closing_, other->on_closing_);
  std::swap(on_close_, other->on_close_);
  std::swap(connect_handle_ptr_, other->connect_handle_ptr_);
  std::swap(connect_req_ptr_, other->connect_req_ptr_);
  std::swap(reading_, other->reading_);
  std::swap(closing_, other->closing_);
  std::swap(parser_ptr_, other->parser_ptr_);
  std::swap(buffer_size_, other->buffer_size_);
  std::swap(buffer_ptr_, other->buffer_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpClientConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpClientConnection_descriptor_;
  metadata.reflection = LiveHttpClientConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpClientConnectionGroup::kSharedLoopPtrFieldNumber;
const int LiveHttpClientConnectionGroup::kPendingResolveCountFieldNumber;
const int LiveHttpClientConnectionGroup::kPendingConnectionCountFieldNumber;
const int LiveHttpClientConnectionGroup::kNodeAndServiceNameFieldNumber;
const int LiveHttpClientConnectionGroup::kResolveHintsFieldNumber;
const int LiveHttpClientConnectionGroup::kResolveReqPtrFieldNumber;
const int LiveHttpClientConnectionGroup::kAddrInfosFieldNumber;
const int LiveHttpClientConnectionGroup::kOpenConnectionsPtrFieldNumber;
const int LiveHttpClientConnectionGroup::kClosingConnectionsPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpClientConnectionGroup::LiveHttpClientConnectionGroup()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpClientConnectionGroup)
}

void LiveHttpClientConnectionGroup::InitAsDefaultInstance() {
  node_and_service_name_ = const_cast< ::pjcore::NodeAndServiceName*>(&::pjcore::NodeAndServiceName::default_instance());
  resolve_hints_ = const_cast< ::pjcore::LiveAddrInfo*>(&::pjcore::LiveAddrInfo::default_instance());
}

LiveHttpClientConnectionGroup::LiveHttpClientConnectionGroup(const LiveHttpClientConnectionGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpClientConnectionGroup)
}

void LiveHttpClientConnectionGroup::SharedCtor() {
  _cached_size_ = 0;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  pending_resolve_count_ = GOOGLE_ULONGLONG(0);
  pending_connection_count_ = GOOGLE_ULONGLONG(0);
  node_and_service_name_ = NULL;
  resolve_hints_ = NULL;
  resolve_req_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpClientConnectionGroup::~LiveHttpClientConnectionGroup() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpClientConnectionGroup)
  SharedDtor();
}

void LiveHttpClientConnectionGroup::SharedDtor() {
  if (this != default_instance_) {
    delete node_and_service_name_;
    delete resolve_hints_;
  }
}

void LiveHttpClientConnectionGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpClientConnectionGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpClientConnectionGroup_descriptor_;
}

const LiveHttpClientConnectionGroup& LiveHttpClientConnectionGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpClientConnectionGroup* LiveHttpClientConnectionGroup::default_instance_ = NULL;

LiveHttpClientConnectionGroup* LiveHttpClientConnectionGroup::New(::google::protobuf::Arena* arena) const {
  LiveHttpClientConnectionGroup* n = new LiveHttpClientConnectionGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpClientConnectionGroup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveHttpClientConnectionGroup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(shared_loop_ptr_, pending_connection_count_);
    if (has_node_and_service_name()) {
      if (node_and_service_name_ != NULL) node_and_service_name_->::pjcore::NodeAndServiceName::Clear();
    }
    if (has_resolve_hints()) {
      if (resolve_hints_ != NULL) resolve_hints_->::pjcore::LiveAddrInfo::Clear();
    }
    resolve_req_ptr_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  addr_infos_.Clear();
  open_connections_ptr_.Clear();
  closing_connections_ptr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpClientConnectionGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpClientConnectionGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shared_loop_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pending_resolve_count;
        break;
      }

      // optional uint64 pending_resolve_count = 2;
      case 2: {
        if (tag == 16) {
         parse_pending_resolve_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_resolve_count_)));
          set_has_pending_resolve_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pending_connection_count;
        break;
      }

      // optional uint64 pending_connection_count = 3;
      case 3: {
        if (tag == 24) {
         parse_pending_connection_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_connection_count_)));
          set_has_pending_connection_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node_and_service_name;
        break;
      }

      // optional .pjcore.NodeAndServiceName node_and_service_name = 4;
      case 4: {
        if (tag == 34) {
         parse_node_and_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_and_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_resolve_hints;
        break;
      }

      // optional .pjcore.LiveAddrInfo resolve_hints = 5;
      case 5: {
        if (tag == 42) {
         parse_resolve_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolve_hints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_resolve_req_ptr;
        break;
      }

      // optional uint64 resolve_req_ptr = 6;
      case 6: {
        if (tag == 48) {
         parse_resolve_req_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resolve_req_ptr_)));
          set_has_resolve_req_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_addr_infos;
        break;
      }

      // repeated .pjcore.LiveAddrInfo addr_infos = 7;
      case 7: {
        if (tag == 58) {
         parse_addr_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addr_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_addr_infos;
        if (input->ExpectTag(64)) goto parse_open_connections_ptr;
        break;
      }

      // repeated uint64 open_connections_ptr = 8;
      case 8: {
        if (tag == 64) {
         parse_open_connections_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_open_connections_ptr())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_open_connections_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_open_connections_ptr;
        if (input->ExpectTag(72)) goto parse_closing_connections_ptr;
        break;
      }

      // repeated uint64 closing_connections_ptr = 9;
      case 9: {
        if (tag == 72) {
         parse_closing_connections_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72, input, this->mutable_closing_connections_ptr())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_closing_connections_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_closing_connections_ptr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpClientConnectionGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpClientConnectionGroup)
  return false;
#undef DO_
}

void LiveHttpClientConnectionGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpClientConnectionGroup)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shared_loop_ptr(), output);
  }

  // optional uint64 pending_resolve_count = 2;
  if (has_pending_resolve_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pending_resolve_count(), output);
  }

  // optional uint64 pending_connection_count = 3;
  if (has_pending_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pending_connection_count(), output);
  }

  // optional .pjcore.NodeAndServiceName node_and_service_name = 4;
  if (has_node_and_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->node_and_service_name_, output);
  }

  // optional .pjcore.LiveAddrInfo resolve_hints = 5;
  if (has_resolve_hints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->resolve_hints_, output);
  }

  // optional uint64 resolve_req_ptr = 6;
  if (has_resolve_req_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resolve_req_ptr(), output);
  }

  // repeated .pjcore.LiveAddrInfo addr_infos = 7;
  for (unsigned int i = 0, n = this->addr_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->addr_infos(i), output);
  }

  // repeated uint64 open_connections_ptr = 8;
  for (int i = 0; i < this->open_connections_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->open_connections_ptr(i), output);
  }

  // repeated uint64 closing_connections_ptr = 9;
  for (int i = 0; i < this->closing_connections_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->closing_connections_ptr(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpClientConnectionGroup)
}

::google::protobuf::uint8* LiveHttpClientConnectionGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpClientConnectionGroup)
  // optional uint64 shared_loop_ptr = 1;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shared_loop_ptr(), target);
  }

  // optional uint64 pending_resolve_count = 2;
  if (has_pending_resolve_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pending_resolve_count(), target);
  }

  // optional uint64 pending_connection_count = 3;
  if (has_pending_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pending_connection_count(), target);
  }

  // optional .pjcore.NodeAndServiceName node_and_service_name = 4;
  if (has_node_and_service_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->node_and_service_name_, target);
  }

  // optional .pjcore.LiveAddrInfo resolve_hints = 5;
  if (has_resolve_hints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->resolve_hints_, target);
  }

  // optional uint64 resolve_req_ptr = 6;
  if (has_resolve_req_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resolve_req_ptr(), target);
  }

  // repeated .pjcore.LiveAddrInfo addr_infos = 7;
  for (unsigned int i = 0, n = this->addr_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->addr_infos(i), target);
  }

  // repeated uint64 open_connections_ptr = 8;
  for (int i = 0; i < this->open_connections_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->open_connections_ptr(i), target);
  }

  // repeated uint64 closing_connections_ptr = 9;
  for (int i = 0; i < this->closing_connections_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(9, this->closing_connections_ptr(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpClientConnectionGroup)
  return target;
}

int LiveHttpClientConnectionGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63) {
    // optional uint64 shared_loop_ptr = 1;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional uint64 pending_resolve_count = 2;
    if (has_pending_resolve_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_resolve_count());
    }

    // optional uint64 pending_connection_count = 3;
    if (has_pending_connection_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_connection_count());
    }

    // optional .pjcore.NodeAndServiceName node_and_service_name = 4;
    if (has_node_and_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_and_service_name_);
    }

    // optional .pjcore.LiveAddrInfo resolve_hints = 5;
    if (has_resolve_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resolve_hints_);
    }

    // optional uint64 resolve_req_ptr = 6;
    if (has_resolve_req_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resolve_req_ptr());
    }

  }
  // repeated .pjcore.LiveAddrInfo addr_infos = 7;
  total_size += 1 * this->addr_infos_size();
  for (int i = 0; i < this->addr_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addr_infos(i));
  }

  // repeated uint64 open_connections_ptr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_connections_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->open_connections_ptr(i));
    }
    total_size += 1 * this->open_connections_ptr_size() + data_size;
  }

  // repeated uint64 closing_connections_ptr = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->closing_connections_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->closing_connections_ptr(i));
    }
    total_size += 1 * this->closing_connections_ptr_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpClientConnectionGroup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpClientConnectionGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpClientConnectionGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpClientConnectionGroup::MergeFrom(const LiveHttpClientConnectionGroup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  addr_infos_.MergeFrom(from.addr_infos_);
  open_connections_ptr_.MergeFrom(from.open_connections_ptr_);
  closing_connections_ptr_.MergeFrom(from.closing_connections_ptr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_pending_resolve_count()) {
      set_pending_resolve_count(from.pending_resolve_count());
    }
    if (from.has_pending_connection_count()) {
      set_pending_connection_count(from.pending_connection_count());
    }
    if (from.has_node_and_service_name()) {
      mutable_node_and_service_name()->::pjcore::NodeAndServiceName::MergeFrom(from.node_and_service_name());
    }
    if (from.has_resolve_hints()) {
      mutable_resolve_hints()->::pjcore::LiveAddrInfo::MergeFrom(from.resolve_hints());
    }
    if (from.has_resolve_req_ptr()) {
      set_resolve_req_ptr(from.resolve_req_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpClientConnectionGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpClientConnectionGroup::CopyFrom(const LiveHttpClientConnectionGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpClientConnectionGroup::IsInitialized() const {

  return true;
}

void LiveHttpClientConnectionGroup::Swap(LiveHttpClientConnectionGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpClientConnectionGroup::InternalSwap(LiveHttpClientConnectionGroup* other) {
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  std::swap(pending_resolve_count_, other->pending_resolve_count_);
  std::swap(pending_connection_count_, other->pending_connection_count_);
  std::swap(node_and_service_name_, other->node_and_service_name_);
  std::swap(resolve_hints_, other->resolve_hints_);
  std::swap(resolve_req_ptr_, other->resolve_req_ptr_);
  addr_infos_.UnsafeArenaSwap(&other->addr_infos_);
  open_connections_ptr_.UnsafeArenaSwap(&other->open_connections_ptr_);
  closing_connections_ptr_.UnsafeArenaSwap(&other->closing_connections_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpClientConnectionGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpClientConnectionGroup_descriptor_;
  metadata.reflection = LiveHttpClientConnectionGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpClientCore::kShellPtrFieldNumber;
const int LiveHttpClientCore::kPendingResolveCountFieldNumber;
const int LiveHttpClientCore::kPendingConnectionCountFieldNumber;
const int LiveHttpClientCore::kPendingTransactionCountFieldNumber;
const int LiveHttpClientCore::kConfigFieldNumber;
const int LiveHttpClientCore::kSharedLoopPtrFieldNumber;
const int LiveHttpClientCore::kConnectionGroupsPtrFieldNumber;
const int LiveHttpClientCore::kOnDestroyFieldNumber;
#endif  // !_MSC_VER

LiveHttpClientCore::LiveHttpClientCore()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpClientCore)
}

void LiveHttpClientCore::InitAsDefaultInstance() {
  config_ = const_cast< ::pjcore::HttpClientConfig*>(&::pjcore::HttpClientConfig::default_instance());
  on_destroy_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpClientCore::LiveHttpClientCore(const LiveHttpClientCore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpClientCore)
}

void LiveHttpClientCore::SharedCtor() {
  _cached_size_ = 0;
  shell_ptr_ = GOOGLE_ULONGLONG(0);
  pending_resolve_count_ = GOOGLE_ULONGLONG(0);
  pending_connection_count_ = GOOGLE_ULONGLONG(0);
  pending_transaction_count_ = GOOGLE_ULONGLONG(0);
  config_ = NULL;
  shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
  on_destroy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpClientCore::~LiveHttpClientCore() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpClientCore)
  SharedDtor();
}

void LiveHttpClientCore::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
    delete on_destroy_;
  }
}

void LiveHttpClientCore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpClientCore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpClientCore_descriptor_;
}

const LiveHttpClientCore& LiveHttpClientCore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpClientCore* LiveHttpClientCore::default_instance_ = NULL;

LiveHttpClientCore* LiveHttpClientCore::New(::google::protobuf::Arena* arena) const {
  LiveHttpClientCore* n = new LiveHttpClientCore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpClientCore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LiveHttpClientCore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(shell_ptr_, pending_transaction_count_);
    if (has_config()) {
      if (config_ != NULL) config_->::pjcore::HttpClientConfig::Clear();
    }
    shared_loop_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_on_destroy()) {
      if (on_destroy_ != NULL) on_destroy_->::pjcore::LiveCallback::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  connection_groups_ptr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpClientCore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpClientCore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 shell_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shell_ptr_)));
          set_has_shell_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pending_resolve_count;
        break;
      }

      // optional uint64 pending_resolve_count = 2;
      case 2: {
        if (tag == 16) {
         parse_pending_resolve_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_resolve_count_)));
          set_has_pending_resolve_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pending_connection_count;
        break;
      }

      // optional uint64 pending_connection_count = 3;
      case 3: {
        if (tag == 24) {
         parse_pending_connection_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_connection_count_)));
          set_has_pending_connection_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pending_transaction_count;
        break;
      }

      // optional uint64 pending_transaction_count = 4;
      case 4: {
        if (tag == 32) {
         parse_pending_transaction_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pending_transaction_count_)));
          set_has_pending_transaction_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional .pjcore.HttpClientConfig config = 5;
      case 5: {
        if (tag == 42) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_shared_loop_ptr;
        break;
      }

      // optional uint64 shared_loop_ptr = 6;
      case 6: {
        if (tag == 48) {
         parse_shared_loop_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &shared_loop_ptr_)));
          set_has_shared_loop_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_connection_groups_ptr;
        break;
      }

      // repeated uint64 connection_groups_ptr = 7;
      case 7: {
        if (tag == 56) {
         parse_connection_groups_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_connection_groups_ptr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_connection_groups_ptr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_connection_groups_ptr;
        if (input->ExpectTag(66)) goto parse_on_destroy;
        break;
      }

      // optional .pjcore.LiveCallback on_destroy = 8;
      case 8: {
        if (tag == 66) {
         parse_on_destroy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_destroy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpClientCore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpClientCore)
  return false;
#undef DO_
}

void LiveHttpClientCore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpClientCore)
  // optional uint64 shell_ptr = 1;
  if (has_shell_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->shell_ptr(), output);
  }

  // optional uint64 pending_resolve_count = 2;
  if (has_pending_resolve_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pending_resolve_count(), output);
  }

  // optional uint64 pending_connection_count = 3;
  if (has_pending_connection_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pending_connection_count(), output);
  }

  // optional uint64 pending_transaction_count = 4;
  if (has_pending_transaction_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pending_transaction_count(), output);
  }

  // optional .pjcore.HttpClientConfig config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->config_, output);
  }

  // optional uint64 shared_loop_ptr = 6;
  if (has_shared_loop_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->shared_loop_ptr(), output);
  }

  // repeated uint64 connection_groups_ptr = 7;
  for (int i = 0; i < this->connection_groups_ptr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->connection_groups_ptr(i), output);
  }

  // optional .pjcore.LiveCallback on_destroy = 8;
  if (has_on_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->on_destroy_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpClientCore)
}

::google::protobuf::uint8* LiveHttpClientCore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpClientCore)
  // optional uint64 shell_ptr = 1;
  if (has_shell_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->shell_ptr(), target);
  }

  // optional uint64 pending_resolve_count = 2;
  if (has_pending_resolve_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pending_resolve_count(), target);
  }

  // optional uint64 pending_connection_count = 3;
  if (has_pending_connection_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pending_connection_count(), target);
  }

  // optional uint64 pending_transaction_count = 4;
  if (has_pending_transaction_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pending_transaction_count(), target);
  }

  // optional .pjcore.HttpClientConfig config = 5;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->config_, target);
  }

  // optional uint64 shared_loop_ptr = 6;
  if (has_shared_loop_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->shared_loop_ptr(), target);
  }

  // repeated uint64 connection_groups_ptr = 7;
  for (int i = 0; i < this->connection_groups_ptr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->connection_groups_ptr(i), target);
  }

  // optional .pjcore.LiveCallback on_destroy = 8;
  if (has_on_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->on_destroy_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpClientCore)
  return target;
}

int LiveHttpClientCore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191) {
    // optional uint64 shell_ptr = 1;
    if (has_shell_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shell_ptr());
    }

    // optional uint64 pending_resolve_count = 2;
    if (has_pending_resolve_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_resolve_count());
    }

    // optional uint64 pending_connection_count = 3;
    if (has_pending_connection_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_connection_count());
    }

    // optional uint64 pending_transaction_count = 4;
    if (has_pending_transaction_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pending_transaction_count());
    }

    // optional .pjcore.HttpClientConfig config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional uint64 shared_loop_ptr = 6;
    if (has_shared_loop_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->shared_loop_ptr());
    }

    // optional .pjcore.LiveCallback on_destroy = 8;
    if (has_on_destroy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_destroy_);
    }

  }
  // repeated uint64 connection_groups_ptr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->connection_groups_ptr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->connection_groups_ptr(i));
    }
    total_size += 1 * this->connection_groups_ptr_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpClientCore::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpClientCore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpClientCore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpClientCore::MergeFrom(const LiveHttpClientCore& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  connection_groups_ptr_.MergeFrom(from.connection_groups_ptr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shell_ptr()) {
      set_shell_ptr(from.shell_ptr());
    }
    if (from.has_pending_resolve_count()) {
      set_pending_resolve_count(from.pending_resolve_count());
    }
    if (from.has_pending_connection_count()) {
      set_pending_connection_count(from.pending_connection_count());
    }
    if (from.has_pending_transaction_count()) {
      set_pending_transaction_count(from.pending_transaction_count());
    }
    if (from.has_config()) {
      mutable_config()->::pjcore::HttpClientConfig::MergeFrom(from.config());
    }
    if (from.has_shared_loop_ptr()) {
      set_shared_loop_ptr(from.shared_loop_ptr());
    }
    if (from.has_on_destroy()) {
      mutable_on_destroy()->::pjcore::LiveCallback::MergeFrom(from.on_destroy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpClientCore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpClientCore::CopyFrom(const LiveHttpClientCore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpClientCore::IsInitialized() const {

  return true;
}

void LiveHttpClientCore::Swap(LiveHttpClientCore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpClientCore::InternalSwap(LiveHttpClientCore* other) {
  std::swap(shell_ptr_, other->shell_ptr_);
  std::swap(pending_resolve_count_, other->pending_resolve_count_);
  std::swap(pending_connection_count_, other->pending_connection_count_);
  std::swap(pending_transaction_count_, other->pending_transaction_count_);
  std::swap(config_, other->config_);
  std::swap(shared_loop_ptr_, other->shared_loop_ptr_);
  connection_groups_ptr_.UnsafeArenaSwap(&other->connection_groups_ptr_);
  std::swap(on_destroy_, other->on_destroy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpClientCore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpClientCore_descriptor_;
  metadata.reflection = LiveHttpClientCore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpClient::kCorePtrFieldNumber;
const int LiveHttpClient::kOnDestroyFieldNumber;
#endif  // !_MSC_VER

LiveHttpClient::LiveHttpClient()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpClient)
}

void LiveHttpClient::InitAsDefaultInstance() {
  on_destroy_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpClient::LiveHttpClient(const LiveHttpClient& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpClient)
}

void LiveHttpClient::SharedCtor() {
  _cached_size_ = 0;
  core_ptr_ = GOOGLE_ULONGLONG(0);
  on_destroy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpClient::~LiveHttpClient() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpClient)
  SharedDtor();
}

void LiveHttpClient::SharedDtor() {
  if (this != default_instance_) {
    delete on_destroy_;
  }
}

void LiveHttpClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpClient_descriptor_;
}

const LiveHttpClient& LiveHttpClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpClient* LiveHttpClient::default_instance_ = NULL;

LiveHttpClient* LiveHttpClient::New(::google::protobuf::Arena* arena) const {
  LiveHttpClient* n = new LiveHttpClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpClient::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    core_ptr_ = GOOGLE_ULONGLONG(0);
    if (has_on_destroy()) {
      if (on_destroy_ != NULL) on_destroy_->::pjcore::LiveCallback::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 core_ptr = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &core_ptr_)));
          set_has_core_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_on_destroy;
        break;
      }

      // optional .pjcore.LiveCallback on_destroy = 2;
      case 2: {
        if (tag == 18) {
         parse_on_destroy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_destroy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpClient)
  return false;
#undef DO_
}

void LiveHttpClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpClient)
  // optional uint64 core_ptr = 1;
  if (has_core_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->core_ptr(), output);
  }

  // optional .pjcore.LiveCallback on_destroy = 2;
  if (has_on_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->on_destroy_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpClient)
}

::google::protobuf::uint8* LiveHttpClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpClient)
  // optional uint64 core_ptr = 1;
  if (has_core_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->core_ptr(), target);
  }

  // optional .pjcore.LiveCallback on_destroy = 2;
  if (has_on_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->on_destroy_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpClient)
  return target;
}

int LiveHttpClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 core_ptr = 1;
    if (has_core_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->core_ptr());
    }

    // optional .pjcore.LiveCallback on_destroy = 2;
    if (has_on_destroy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->on_destroy_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpClient::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpClient::MergeFrom(const LiveHttpClient& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_core_ptr()) {
      set_core_ptr(from.core_ptr());
    }
    if (from.has_on_destroy()) {
      mutable_on_destroy()->::pjcore::LiveCallback::MergeFrom(from.on_destroy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpClient::CopyFrom(const LiveHttpClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpClient::IsInitialized() const {

  return true;
}

void LiveHttpClient::Swap(LiveHttpClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpClient::InternalSwap(LiveHttpClient* other) {
  std::swap(core_ptr_, other->core_ptr_);
  std::swap(on_destroy_, other->on_destroy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpClient_descriptor_;
  metadata.reflection = LiveHttpClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpCallbackHandler::kCallbackFieldNumber;
#endif  // !_MSC_VER

LiveHttpCallbackHandler::LiveHttpCallbackHandler()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpCallbackHandler)
}

void LiveHttpCallbackHandler::InitAsDefaultInstance() {
  callback_ = const_cast< ::pjcore::LiveCallback*>(&::pjcore::LiveCallback::default_instance());
}

LiveHttpCallbackHandler::LiveHttpCallbackHandler(const LiveHttpCallbackHandler& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpCallbackHandler)
}

void LiveHttpCallbackHandler::SharedCtor() {
  _cached_size_ = 0;
  callback_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpCallbackHandler::~LiveHttpCallbackHandler() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpCallbackHandler)
  SharedDtor();
}

void LiveHttpCallbackHandler::SharedDtor() {
  if (this != default_instance_) {
    delete callback_;
  }
}

void LiveHttpCallbackHandler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpCallbackHandler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpCallbackHandler_descriptor_;
}

const LiveHttpCallbackHandler& LiveHttpCallbackHandler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpCallbackHandler* LiveHttpCallbackHandler::default_instance_ = NULL;

LiveHttpCallbackHandler* LiveHttpCallbackHandler::New(::google::protobuf::Arena* arena) const {
  LiveHttpCallbackHandler* n = new LiveHttpCallbackHandler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpCallbackHandler::Clear() {
  if (has_callback()) {
    if (callback_ != NULL) callback_->::pjcore::LiveCallback::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpCallbackHandler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpCallbackHandler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pjcore.LiveCallback callback = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpCallbackHandler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpCallbackHandler)
  return false;
#undef DO_
}

void LiveHttpCallbackHandler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpCallbackHandler)
  // optional .pjcore.LiveCallback callback = 1;
  if (has_callback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->callback_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpCallbackHandler)
}

::google::protobuf::uint8* LiveHttpCallbackHandler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpCallbackHandler)
  // optional .pjcore.LiveCallback callback = 1;
  if (has_callback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->callback_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpCallbackHandler)
  return target;
}

int LiveHttpCallbackHandler::ByteSize() const {
  int total_size = 0;

  // optional .pjcore.LiveCallback callback = 1;
  if (has_callback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->callback_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpCallbackHandler::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpCallbackHandler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpCallbackHandler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpCallbackHandler::MergeFrom(const LiveHttpCallbackHandler& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback()) {
      mutable_callback()->::pjcore::LiveCallback::MergeFrom(from.callback());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpCallbackHandler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpCallbackHandler::CopyFrom(const LiveHttpCallbackHandler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpCallbackHandler::IsInitialized() const {

  return true;
}

void LiveHttpCallbackHandler::Swap(LiveHttpCallbackHandler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpCallbackHandler::InternalSwap(LiveHttpCallbackHandler* other) {
  std::swap(callback_, other->callback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpCallbackHandler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpCallbackHandler_descriptor_;
  metadata.reflection = LiveHttpCallbackHandler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LiveHttpPathHandler_PathHandlerEntry::kPathFieldNumber;
const int LiveHttpPathHandler_PathHandlerEntry::kHandlerPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpPathHandler_PathHandlerEntry::LiveHttpPathHandler_PathHandlerEntry()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpPathHandler.PathHandlerEntry)
}

void LiveHttpPathHandler_PathHandlerEntry::InitAsDefaultInstance() {
}

LiveHttpPathHandler_PathHandlerEntry::LiveHttpPathHandler_PathHandlerEntry(const LiveHttpPathHandler_PathHandlerEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpPathHandler.PathHandlerEntry)
}

void LiveHttpPathHandler_PathHandlerEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handler_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpPathHandler_PathHandlerEntry::~LiveHttpPathHandler_PathHandlerEntry() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  SharedDtor();
}

void LiveHttpPathHandler_PathHandlerEntry::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LiveHttpPathHandler_PathHandlerEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpPathHandler_PathHandlerEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpPathHandler_PathHandlerEntry_descriptor_;
}

const LiveHttpPathHandler_PathHandlerEntry& LiveHttpPathHandler_PathHandlerEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpPathHandler_PathHandlerEntry* LiveHttpPathHandler_PathHandlerEntry::default_instance_ = NULL;

LiveHttpPathHandler_PathHandlerEntry* LiveHttpPathHandler_PathHandlerEntry::New(::google::protobuf::Arena* arena) const {
  LiveHttpPathHandler_PathHandlerEntry* n = new LiveHttpPathHandler_PathHandlerEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpPathHandler_PathHandlerEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    handler_ptr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpPathHandler_PathHandlerEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pjcore.LiveHttpPathHandler.PathHandlerEntry.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_handler_ptr;
        break;
      }

      // optional uint64 handler_ptr = 2;
      case 2: {
        if (tag == 16) {
         parse_handler_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handler_ptr_)));
          set_has_handler_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  return false;
#undef DO_
}

void LiveHttpPathHandler_PathHandlerEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpPathHandler.PathHandlerEntry.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional uint64 handler_ptr = 2;
  if (has_handler_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->handler_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpPathHandler.PathHandlerEntry)
}

::google::protobuf::uint8* LiveHttpPathHandler_PathHandlerEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pjcore.LiveHttpPathHandler.PathHandlerEntry.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional uint64 handler_ptr = 2;
  if (has_handler_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->handler_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpPathHandler.PathHandlerEntry)
  return target;
}

int LiveHttpPathHandler_PathHandlerEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint64 handler_ptr = 2;
    if (has_handler_ptr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handler_ptr());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpPathHandler_PathHandlerEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpPathHandler_PathHandlerEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpPathHandler_PathHandlerEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpPathHandler_PathHandlerEntry::MergeFrom(const LiveHttpPathHandler_PathHandlerEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_handler_ptr()) {
      set_handler_ptr(from.handler_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpPathHandler_PathHandlerEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpPathHandler_PathHandlerEntry::CopyFrom(const LiveHttpPathHandler_PathHandlerEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpPathHandler_PathHandlerEntry::IsInitialized() const {

  return true;
}

void LiveHttpPathHandler_PathHandlerEntry::Swap(LiveHttpPathHandler_PathHandlerEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpPathHandler_PathHandlerEntry::InternalSwap(LiveHttpPathHandler_PathHandlerEntry* other) {
  path_.Swap(&other->path_);
  std::swap(handler_ptr_, other->handler_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpPathHandler_PathHandlerEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpPathHandler_PathHandlerEntry_descriptor_;
  metadata.reflection = LiveHttpPathHandler_PathHandlerEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LiveHttpPathHandler::kMapFieldNumber;
const int LiveHttpPathHandler::kDefaultHandlerPtrFieldNumber;
#endif  // !_MSC_VER

LiveHttpPathHandler::LiveHttpPathHandler()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pjcore.LiveHttpPathHandler)
}

void LiveHttpPathHandler::InitAsDefaultInstance() {
}

LiveHttpPathHandler::LiveHttpPathHandler(const LiveHttpPathHandler& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pjcore.LiveHttpPathHandler)
}

void LiveHttpPathHandler::SharedCtor() {
  _cached_size_ = 0;
  default_handler_ptr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveHttpPathHandler::~LiveHttpPathHandler() {
  // @@protoc_insertion_point(destructor:pjcore.LiveHttpPathHandler)
  SharedDtor();
}

void LiveHttpPathHandler::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LiveHttpPathHandler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LiveHttpPathHandler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LiveHttpPathHandler_descriptor_;
}

const LiveHttpPathHandler& LiveHttpPathHandler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pjcore_2flive_5fhttp_2eproto();
  return *default_instance_;
}

LiveHttpPathHandler* LiveHttpPathHandler::default_instance_ = NULL;

LiveHttpPathHandler* LiveHttpPathHandler::New(::google::protobuf::Arena* arena) const {
  LiveHttpPathHandler* n = new LiveHttpPathHandler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LiveHttpPathHandler::Clear() {
  default_handler_ptr_ = GOOGLE_ULONGLONG(0);
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LiveHttpPathHandler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pjcore.LiveHttpPathHandler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pjcore.LiveHttpPathHandler.PathHandlerEntry map = 1;
      case 1: {
        if (tag == 10) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_map;
        if (input->ExpectTag(16)) goto parse_default_handler_ptr;
        break;
      }

      // optional uint64 default_handler_ptr = 2;
      case 2: {
        if (tag == 16) {
         parse_default_handler_ptr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_handler_ptr_)));
          set_has_default_handler_ptr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pjcore.LiveHttpPathHandler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pjcore.LiveHttpPathHandler)
  return false;
#undef DO_
}

void LiveHttpPathHandler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pjcore.LiveHttpPathHandler)
  // repeated .pjcore.LiveHttpPathHandler.PathHandlerEntry map = 1;
  for (unsigned int i = 0, n = this->map_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map(i), output);
  }

  // optional uint64 default_handler_ptr = 2;
  if (has_default_handler_ptr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->default_handler_ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pjcore.LiveHttpPathHandler)
}

::google::protobuf::uint8* LiveHttpPathHandler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pjcore.LiveHttpPathHandler)
  // repeated .pjcore.LiveHttpPathHandler.PathHandlerEntry map = 1;
  for (unsigned int i = 0, n = this->map_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map(i), target);
  }

  // optional uint64 default_handler_ptr = 2;
  if (has_default_handler_ptr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->default_handler_ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pjcore.LiveHttpPathHandler)
  return target;
}

int LiveHttpPathHandler::ByteSize() const {
  int total_size = 0;

  // optional uint64 default_handler_ptr = 2;
  if (has_default_handler_ptr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->default_handler_ptr());
  }

  // repeated .pjcore.LiveHttpPathHandler.PathHandlerEntry map = 1;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveHttpPathHandler::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LiveHttpPathHandler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LiveHttpPathHandler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LiveHttpPathHandler::MergeFrom(const LiveHttpPathHandler& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_default_handler_ptr()) {
      set_default_handler_ptr(from.default_handler_ptr());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LiveHttpPathHandler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LiveHttpPathHandler::CopyFrom(const LiveHttpPathHandler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveHttpPathHandler::IsInitialized() const {

  return true;
}

void LiveHttpPathHandler::Swap(LiveHttpPathHandler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LiveHttpPathHandler::InternalSwap(LiveHttpPathHandler* other) {
  map_.UnsafeArenaSwap(&other->map_);
  std::swap(default_handler_ptr_, other->default_handler_ptr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LiveHttpPathHandler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LiveHttpPathHandler_descriptor_;
  metadata.reflection = LiveHttpPathHandler_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pjcore

// @@protoc_insertion_point(global_scope)
